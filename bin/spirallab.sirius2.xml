<?xml version="1.0"?>
<doc>
    <assembly>
        <name>spirallab.sirius2</name>
    </assembly>
    <members>
        <member name="T:SpiralLab.Sirius2.Common.MinMax">
            <summary>
            Represent for Min, Max Data
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Common.MinMax.Min">
            <summary>
            Min
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Common.MinMax.Max">
            <summary>
            Max
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Common.MinMax.Data">
            <summary>
            Array of Min, Max data
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Common.MinMax.ToString">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Common.MinMax.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Common.MinMax.#ctor(System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="min">Min</param>
            <param name="max">Max</param>
        </member>
        <member name="T:SpiralLab.Sirius2.Common.AxisXY">
            <summary>
            X,Y Data 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Common.AxisXY.X">
            <summary>
            X Axis
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Common.AxisXY.Y">
            <summary>
            Y Axis
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Common.AxisXY.Data">
            <summary>
            Array of X, Y data
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Common.AxisXY.ToString">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Common.AxisXY.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Common.Rockey4ND">
            <summary>
            Rockey 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Common.Rockey4ND.SerialNo">
            <summary>
            License key serial no
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Common.Rockey4ND.IsRtcLicensed">
            <summary>
            license RTC 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Common.Rockey4ND.RtcLicenseMax">
            <summary>
            Max RTC license
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Common.Rockey4ND.IsRtcSyncAxisLicensed">
            <summary>
            license for syncAXIS
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Common.Rockey4ND.RtcSyncAxisLicenseMax">
            <summary>
            Max syncAXIS license
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Common.Rockey4ND.IsMoFLicensed">
            <summary>
            license for MoF
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Common.Rockey4ND.Is3DLicensed">
            <summary>
            license for 3D
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Common.Rockey4ND.IsLaserLicensed">
            <summary>
            license for Laser
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Common.Rockey4ND.IsGridCheckerLicensed">
            <summary>
            license for Grid checker
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Common.Rockey4ND.IsPathOptimizerLicensed">
            <summary>
            license for Path optimizer
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Common.Rockey4ND.Is2ndHeadLicensed">
            <summary>
            license for 2nd Head
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Common.Rockey4ND.IsDIOLicensed">
            <summary>
            license for DIO
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Common.Rockey4ND.IsMotorLicensed">
            <summary>
            license for Motion control
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Common.Rockey4ND.IsPowerMeterLicensed">
            <summary>
            license for Powermeter
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Common.Rockey4ND.IsVisionLicensed">
            <summary>
            license for MachineVision
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Common.Rockey4ND.ExtensionLicenseText">
            <summary>
            license for Extension feature
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Common.Rockey4ND.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Common.Rockey4ND.Initialize">
            <summary>
            Initialize
            </summary>
            <returns>Existence of license dongle key</returns>
        </member>
        <member name="T:SpiralLab.Sirius2.Common.Vector2Converter">
            <summary>
            <c>Numerics.Vector2</c> format converter
            </summary>
            <remarks>
            Used with PropertyGrid control <br/>
            </remarks>
        </member>
        <member name="M:SpiralLab.Sirius2.Common.Vector2Converter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Common.Vector2Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Common.Vector2Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:SpiralLab.Sirius2.Common.Vector3Converter">
            <summary>
            Numerics.Vector3 format converter
            </summary>
            <remarks>
            Used with PropertyGrid control <br/>
            </remarks>
        </member>
        <member name="M:SpiralLab.Sirius2.Common.Vector3Converter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Common.Vector3Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Common.Vector3Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:SpiralLab.Sirius2.Common.OffsetConverter">
            <summary>
            Offset (x,y,z, and angle) converter
            </summary>
            <remarks>
            Used with PropertyGrid control <br/>
            </remarks>
        </member>
        <member name="M:SpiralLab.Sirius2.Common.OffsetConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Common.OffsetConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Common.OffsetConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:SpiralLab.Sirius2.Common.DTTypeConverter">
            <summary>
            Datetime format converter
            </summary>
            <remarks>
            Used with PropertyGrid control <br/>
            </remarks>
        </member>
        <member name="M:SpiralLab.Sirius2.Common.DTTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Common.DTTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Common.DTTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Common.DTTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:SpiralLab.Sirius2.Common.FloatTypeConverter">
            <summary>
            Double converter
            </summary>
            <remarks>
            Used with PropertyGrid control <br/>
            </remarks>
        </member>
        <member name="M:SpiralLab.Sirius2.Common.FloatTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Common.FloatTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Common.FloatTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:SpiralLab.Sirius2.Common.CorrectionFileBrowser">
            <summary>
            CorrectionFileBrowser
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Common.CorrectionFileBrowser.InitializeDialog(System.Windows.Forms.OpenFileDialog)">
            <inheritdoc/>
        </member>
        <member name="T:SpiralLab.Sirius2.Common.PowerMapFileBrowser">
            <summary>
            PowerMapFileBrowser
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Config">
            <summary>
            Configuration for <c>SpiralLab.Sirius2</c> library
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Config.AssemblyName">
            <summary>
            Package assembly filename
            </summary>
            <remarks>
            Default: "spirallab.sirius2.dll" <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Config.AssemblyVersion">
            <summary>
            Package assembly version
            </summary>
            <remarks>
            String (major.minor.builds) for version information. <br/>
            </remarks>
        </member>
        <member name="T:SpiralLab.Sirius2.Config.Languages">
            <summary>
            Languages
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Config.Languages.enUS">
            <summary>
            en-US
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Config.Languages.koKR">
            <summary>
            Ko-KR
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Config.Language">
            <summary>
            Language for library
            <code>
            //If Languages.enUs
            Thread.CurrentThread.CurrentCulture = new System.Globalization.CultureInfo("en-US"); 
            Thread.CurrentThread.CurrentUICulture = new System.Globalization.CultureInfo("en-US");
            //or If Languages.koKR
            Thread.CurrentThread.CurrentCulture = new System.Globalization.CultureInfo("ko-KR");
            Thread.CurrentThread.CurrentUICulture = new System.Globalization.CultureInfo("ko-KR");
            </code>
            </summary>
            <remarks>
            Should be configured before <c>InitializeComponent</c> at <c>Form</c>. <br/>
            Default: <c>Languages.enUS</c> <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Config.IsLogEnable">
            <summary>
            Enable(or disable) logging
            </summary>
            <remarks>
            Default: <c>True</c> <br/>
            Output log path: <see cref="P:SpiralLab.Sirius2.Config.LogPath">Config.LogPath</see> <br/>        
            Should be configured before do <see cref="M:SpiralLab.Sirius2.Core.Initialize">Core.Initialize</see>. <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Config.IsLogToConsole">
            <summary>
            Enable(or disable) logging with console output
            </summary>
            <remarks>
            Default: <c>True</c> <br/>
            Meaningful when user output program type as Console. <br/>
            Should be configured before do <see cref="M:SpiralLab.Sirius2.Core.Initialize">Core.Initialize</see>. <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Config.LogLevel">
            <summary>
            Min. log level
            </summary>
            <remarks>
            User must be assign <c>LogLevel</c> before do <see cref="M:SpiralLab.Sirius2.Core.Initialize">Core.Initialize</see>. <br/>
            Default: <see cref="F:SpiralLab.Sirius2.Logger.Types.Trace">Logger.Types.Trace</see> <br/>
            </remarks>
        </member>
        <member name="E:SpiralLab.Sirius2.Config.OnLogged">
            <summary>
            Event for log message
            </summary>
            <remarks>
            User can register event handler for log messages. <br/>
            Event will be fired when every logged messages. <br/>
            </remarks>
        </member>
        <member name="M:SpiralLab.Sirius2.Config.NotifyLogMessage(SpiralLab.Sirius2.Logger.Types,System.String)">
            <summary>
            Notify log message
            </summary>
            <param name="type">Log type</param>
            <param name="message">Message</param>
        </member>
        <member name="P:SpiralLab.Sirius2.Config.LogPath">
            <summary>
            Log file path
            </summary>
            <remarks>
            Default: <c>Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "siriuslogs")</c> <br/>
            Should be configured before do <see cref="M:SpiralLab.Sirius2.Core.Initialize">Core.Initialize</see>. <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Config.MeasurementPath">
            <summary>
            Measurement path
            </summary>
            <remarks>
            Default path: <c>Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "measurement")</c> <br/>
            Used with <see cref="T:SpiralLab.Sirius2.Scanner.Rtc.RtcMeasurementHelper">RtcMeasurementHelper</see>. <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Config.MeasurementGNUPlotProgramPath">
            <summary>
            gnuplot program file path
            </summary>
            <remarks>
            Default path: <c>Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "gnuplot", "gnuplot.exe")</c> <br/>
             Used with <see cref="T:SpiralLab.Sirius2.Scanner.Rtc.RtcMeasurementHelper">RtcMeasurementHelper</see>. <br/>
            Copy gnuplot program into gnuplot directory from <seealso href="http://tmacchant33.starfree.jp/gnuplot_bin.html">Download link</seealso>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Config.CorrectionPath">
            <summary>
            Correction path
            </summary>
            <remarks>
            Default path: <c>Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "correction")</c>. <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Config.CorreXionProProgramPath">
            <summary>
            SCANLAB's CorreXionPro.exe program file path
            </summary>
            <remarks>
            Default path: <c>Path.Combine(CorrectionPath, "CorreXionPro.exe")</c> <br/>
            Used with <see cref="T:SpiralLab.Sirius2.Scanner.Rtc.RtcCorrection2D">RtcCorrection2D</see>. <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Config.StretchCorreXion5ProgramPath">
            <summary>
            SCANLAB's StretchcorreXion5.exe program file path
            </summary>
            <remarks>
            Default path: <c>Path.Combine(CorrectionPath, "stretchcorreXion5.exe")</c> <br/>
            Used with <see cref="T:SpiralLab.Sirius2.Scanner.Rtc.RtcCorrection3D">RtcCorrection3D</see>. <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Config.CorrectionFileCoverterProgramPath">
            <summary>
            SCANLAB's CorrectionFileConverter.exe program file path
            </summary>
            <remarks>
            Default path: <c>Path.Combine( CorrectionPath, "CorrectionFileConverter.exe")</c> <br/>
            Used with <see cref="T:SpiralLab.Sirius2.Scanner.Rtc.RtcCorrection3D">RtcCorrection3D</see>. <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Config.PowerMapPath">
            <summary>
            Powermap path
            </summary>
            <remarks>
            Default path: <c>Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "powermap")</c>. <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Config.SyncAxisViewerProgramPath">
            <summary>
            SyncAxis viewer program file path
            </summary>
            <remarks>
            Default path: <c>Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "syncaxis", "Tools", "syncAXIS_Viewer", "syncAXIS_Viewer.exe")</c>. <br/>
            Used with <c>SpiralLab.Sirius2.Winform.Marker.MarkerSyncAxis</c> and <see cref="T:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.SyncAxisViewerHelper">SyncAxisViewerHelper</see>. <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Config.SyncAxisSimulateFilePath">
            <summary>
            SyncAxis simulation output file path
            </summary>
            <remarks>
            Default path: <c>Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "siriuslogs")</c>. <br/>
            Used with <c>SpiralLab.Sirius2.Winform.Marker.MarkerSyncAxis</c> and <see cref="T:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.SyncAxisViewerHelper">SyncAxisViewerHelper</see>. <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Config.CalibrationLibraryActivationCode">
            <summary>
            SCANLAB's CalibrationLibrary activation code
            </summary>
            <remarks>
            Please assign your activation keycode. <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Config.MergeDistance">
            <summary>
            Threshold distance between jump and mark(or arc) list commands that merged (mm)
            </summary>
            <remarks>
            Default: 0.001 mm <br/>
            Marks or jumps for same positions are cause unexpected poor(likes as burn-in effect) laser quality. <br/>
            So need to suppress(or eliminate) duplicated jumps for same positions for higher laser quality. <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Config.JumpModeLimitLength">
            <summary>
            Limit distance for jump mode (mm)
            </summary>
            <remarks>
            Default: 0 mm <br/>
            Used with <see cref="T:SpiralLab.Sirius2.Scanner.Rtc.RtcJumpMode">RtcJumpMode</see>. <br/>
            At the end of the 2D jump, a jump-length dependent Jump Delay occurs. <br/>
            This Jump Delay can be specified for the corresponding jump length by load_jump_table_offset or set_jump_table.<br/>
            <see cref="M:SpiralLab.Sirius2.Scanner.Rtc.IRtc.CtlDelay(System.Double,System.Double,System.Double,System.Double,System.Double)">IRtc.CtlDelay</see> is not taken into account. <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Config.DivideArcToLinesDistance">
            <summary>
            Step distance for divide arc into lines
            </summary>
            <remarks>
            Default: 0.5 mm <br/>
            <list type="case study">
            <item><description>When draw(or render) arc at screen, it will be splitted into lines.</description></item>
            <item><description>If center of arc is out of range when marking, it will be splitted into lines.</description></item>
            <item><description>Curve(or spline) are splitted into lines.</description></item>
            <item><description>Spiral are splitted into lines.</description></item>
            <item><description>DXF ellipse is splitted into lines.</description></item>
            <item><description>Transformed(like as rotated by matrix) arc is splitted into lines.</description></item>
            <item><description>Jump and marks are splitted into lines when simulate laser path.</description></item>
            <item><description>Hatch by polygon are splitted into lines.</description></item>
            </list>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Config.VirtualJumpAndMarkAccScale">
            <summary>
            Simulation jump and mark accel scale
            </summary>
            <remarks>
            Default: 1.2 <br/>
            Acceleration scale for when simulate(or render) laser path with jump and mark commands. <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Config.MeasurementLaserOnFactor">
            <summary>
            Laser ON scale factor when convert measurement data 
            </summary>
            <remarks>
            Default: 1 <br/>
            Used with <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.MeasurementChannels.LaserOn">MeasurementChannels.LaserOn</see> channel. <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Config.PowerMapPreHeatTimeMs">
            <summary>
            Pre-Heat time (msec) for power mapping/verification/compensation
            </summary>
            <remarks>
            Default: 10000ms (10 secs) <br/>
            Delay time for pre-heating. <br/>
            Used with <see cref="M:SpiralLab.Sirius2.PowerMap.IPowerMap.CtlMapping(System.String[],System.Double[])">IPowerMap.CtlMapping</see>, <see cref="M:SpiralLab.Sirius2.PowerMap.IPowerMap.CtlVerify(System.Collections.Generic.KeyValuePair{System.String,System.Double}[])">IPowerMap.CtlVerify</see>, <see cref="M:SpiralLab.Sirius2.PowerMap.IPowerMap.CtlCompensate(System.Collections.Generic.KeyValuePair{System.String,System.Double}[])">IPowerMap.CtlCompensate</see>. <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Config.PowerMapHoldTimeMs">
            <summary>
            Hold time (msec) for power mapping/verification/compensation
            </summary>
            <remarks>
            Default: 5000ms (5 secs) <br/>
            Used last measured laser output power after this time period. <br/>
            Used with <see cref="M:SpiralLab.Sirius2.PowerMap.IPowerMap.CtlMapping(System.String[],System.Double[])">IPowerMap.CtlMapping</see>, <see cref="M:SpiralLab.Sirius2.PowerMap.IPowerMap.CtlVerify(System.Collections.Generic.KeyValuePair{System.String,System.Double}[])">IPowerMap.CtlVerify</see>, <see cref="M:SpiralLab.Sirius2.PowerMap.IPowerMap.CtlCompensate(System.Collections.Generic.KeyValuePair{System.String,System.Double}[])">IPowerMap.CtlCompensate</see>. <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Config.PowerMapInRangeThreshold">
            <summary>
            In range threshold percentage(%) for power mapping, verification, compensation
            </summary>
            <remarks>
            Default: 5% (Range: 0 ~ 100%) <br/>
            Threshold power(W) = Target power(W) * <c>PowerMapInRangeThreshold</c> / 100.0 <br/>
            Used with <see cref="M:SpiralLab.Sirius2.PowerMap.IPowerMap.CtlMapping(System.String[],System.Double[])">IPowerMap.CtlMapping</see>, <see cref="M:SpiralLab.Sirius2.PowerMap.IPowerMap.CtlVerify(System.Collections.Generic.KeyValuePair{System.String,System.Double}[])">IPowerMap.CtlVerify</see>, <see cref="M:SpiralLab.Sirius2.PowerMap.IPowerMap.CtlCompensate(System.Collections.Generic.KeyValuePair{System.String,System.Double}[])">IPowerMap.CtlCompensate</see>. <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Config.PowerMapOutOfRangeThreshold">
            <summary>
            Out of range threshold percentage(%) for compensation
            </summary>
            <remarks>
            Default: 20% (Range: 0 ~ 100%)<br/>
            Threshold power(W) = Target power(W) * <c>PowerMapOutOfRangeThreshold</c> / 100.0 <br/>
            Used with <see cref="M:SpiralLab.Sirius2.PowerMap.IPowerMap.CtlCompensate(System.Collections.Generic.KeyValuePair{System.String,System.Double}[])">IPowerMap.CtlCompensate</see>. <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Config.PowerMapCompensateRetryCounts">
            <summary>
            Retry counts for power compensation
            </summary>
            <remarks>
            Default: 2 <br/>
            Retry until range withing <see cref="P:SpiralLab.Sirius2.Config.PowerMapInRangeThreshold">Config.PowerMapInRangeThreshold</see>. <br/>
            Used with <see cref="M:SpiralLab.Sirius2.PowerMap.IPowerMap.CtlCompensate(System.Collections.Generic.KeyValuePair{System.String,System.Double}[])">IPowerMap.CtlCompensate</see>. <br/>
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Config.DIOBitMask">
            <summary>
            Bitmasks for bit operation
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Core">
            <summary>
            Core for <c>SpiralLab.Sirius2</c> library
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Core.Initialize">
            <summary>
            Initialize(or start up) library 
            </summary>
            <remarks>
            When initializing, configuring path, starting log service and verifying licenses. <br/>
            Created <see cref="P:SpiralLab.Sirius2.Config.LogPath">Config.LogPath</see>, <see cref="P:SpiralLab.Sirius2.Config.SyncAxisSimulateFilePath">Config.SyncAxisSimulateFilePath</see>, <see cref="P:SpiralLab.Sirius2.Config.MeasurementPath">Config.MeasurementPath</see> pathes if not exist. <br/>
            Output logged file is <see cref="P:SpiralLab.Sirius2.Config.LogPath">Config.LogPath\'date'.txt </see> with max 90 days. <br/>
            Output logged file is <see cref="P:SpiralLab.Sirius2.Config.LogPath">Config.LogPath\errors.txt</see> with max 90 days and error only. <br/>
            Enabled(or disable) logging feature by <see cref="P:SpiralLab.Sirius2.Config.IsLogEnable">Config.IsLogEnable</see>. <br/>
            Enabled(or disable) log to console by <see cref="P:SpiralLab.Sirius2.Config.IsLogToConsole">Config.IsLogToConsole</see>. <br/>
            Minimal log level configured by <see cref="P:SpiralLab.Sirius2.Config.LogLevel">Config.LogLevel</see>. <br/>
            Without license key, would be activated evalution mode during 30 mins. <br/>
            </remarks>
            <returns>Success of initialization or not</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Core.License(SpiralLab.Sirius2.LicenseInfo@)">
            <summary>
            Query license information
            </summary>
            <param name="licenseInfo"><c>LicenseInfo</c></param>
            <returns>Is exist license key or not</returns>
        </member>
        <member name="P:SpiralLab.Sirius2.Core.IsRunningPlatform64">
            <summary>
            Runtime platform
            </summary>
            <returns>x64 or not</returns>
        </member>
        <member name="T:SpiralLab.Sirius2.Core.NativeMethods">
            <summary>
            P/Invoke native methods
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Core.Platform">
            <summary>
            Target platform specifier
            <para>
            <see href="https://learn.microsoft.com/ko-kr/dotnet/standard/frameworks">Platform lists</see>
            </para>
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.IO.IDInput">
            <summary>
            IDInput interface
            </summary>
            <remarks>
            Used with digital inputs at RTC card <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.IO.IDInput.SyncRoot">
            <summary>
            Synchronization object
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.IO.IDInput.Index">
            <summary>
            Identifier
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.IO.IDInput.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.IO.IDInput.ChannelCount">
            <summary>
            Channel count(s)
            </summary>
            <remarks>
            1 channel = 16 bits <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.IO.IDInput.Channels">
            <summary>
            Array of channel
            </summary>
            <remarks>
            Array of 16 bits
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.IO.IDInput.Tag">
            <summary>
            User data
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.IO.IDInput.Initialize">
            <summary>
            Initialize
            <code>
            enum DIN
            {
                D0 = 0,
                D1 = 1,
                D2 = 2,
                D3 = 3,
                D4 = 4,
                D5 = 5,
                D6 = 6,
                D7 = 7,
                D8 = 8,
                D9 = 9,
                D10 = 10,
                D11 = 11,
                D12 = 12,
                D13 = 13,
                D14 = 14,
                D15 = 15,
            }
            var dInput = IOFactory.CreateInputExtension1(rtc);
            dInput.Initialize();
            do
            {
                dInput.Update();
                if (dIn.IsAOn(DIN.D0))
                {
                    // something ...
                }
            }
            while(True);
            </code>
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.IO.IDInput.IsAOn``1(``0)">
            <summary>
            Bit status (On/High/True)
            <para>Normal open, Make contact, Arbeit contact</para>
            </summary>
            <typeparam name="T">Enum</typeparam>
            <param name="no">Enum item</param>
            <returns>True(On, High), False(Off, Low)</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.IO.IDInput.IsAOn(System.Int32)">
            <summary>
            Bit status (On/High/True)
            <para>Normal open, Make contact, Arbeit contact</para>
            </summary>
            <param name="no">No</param>
            <returns>True(On, High), False(Off, Low)</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.IO.IDInput.IsAOff``1(``0)">
            <summary>
            Bit status (Off/Low/False)
            <para>Normal open, Make contact, Arbeit contact</para>
            </summary>
            <typeparam name="T">Enum</typeparam>
            <param name="no">Enum item</param>
            <returns>True(Off, Low), False(On, High)</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.IO.IDInput.IsAOff(System.Int32)">
            <summary>
            Bit status (Off/Low/False)
            <para>Normal open, Make contact, Arbeit contact</para>
            </summary>
            <param name="no">No</param>
            <returns>True(Off, Low), False(On, High)</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.IO.IDInput.IsBOn``1(``0)">
            <summary>
            Bit status (On/High/True)
            <para>Normal close, Break contact</para>
            </summary>
            <typeparam name="T">Enum</typeparam>
            <param name="no">Enum item</param>
            <returns>True(On, High), False(Off, Low)</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.IO.IDInput.IsBOn(System.Int32)">
            <summary>
            Bit status (On/High/True)
            <para>Normal close, Break contact</para>
            </summary>
            <param name="no">No</param>
            <returns>True(On, High), False(Off, Low)</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.IO.IDInput.IsBOff``1(``0)">
            <summary>
            Bit status (Off/Low/Flase)
            <para>Normal close, Break contact</para>
            </summary>
            <typeparam name="T">Enum</typeparam>
            <param name="no">Enum item</param>
            <returns>True(Off, Low), False(On, High)</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.IO.IDInput.IsBOff(System.Int32)">
            <summary>
            Bit status (Off/Low/Flase)
            <para>Normal close, Break contact</para>
            </summary>
            <param name="no">No</param>
            <returns>True(Off, Low), False(On, High)</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.IO.IDInput.GetChannel(System.Int32,System.UInt16@)">
            <summary>
            Get channel(16bits) status
            </summary>
            <param name="ch">Channel (0,1,2,...)</param>
            <param name="d16bits">16bits value</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.IO.IDInput.Update">
            <summary>
            Update channel(s) data from input
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="T:SpiralLab.Sirius2.IO.DInputVirtual">
            <summary>
            DInput Virtual
            </summary>
            <remarks>
            Virtual digital inputs
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.IO.DInputVirtual.SyncRoot">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.IO.DInputVirtual.Index">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.IO.DInputVirtual.Name">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.IO.DInputVirtual.ChannelCount">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.IO.DInputVirtual.Channels">
            <inheritdoc/>  
        </member>
        <member name="F:SpiralLab.Sirius2.IO.DInputVirtual.channels">
            <summary>
            Array of (ushort) 16bits 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.IO.DInputVirtual.Tag">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.IO.DInputVirtual.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="index">Identifier (0,1,2,3, ...)</param>
        </member>
        <member name="M:SpiralLab.Sirius2.IO.DInputVirtual.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.IO.DInputVirtual.Dispose">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.IO.DInputVirtual.Dispose(System.Boolean)">
            <summary>
            Dispose internal resources
            </summary>
            <param name="disposing">Explicit dispose or not</param>
        </member>
        <member name="M:SpiralLab.Sirius2.IO.DInputVirtual.Initialize">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.IO.DInputVirtual.IsAOn``1(``0)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.IO.DInputVirtual.IsAOn(System.Int32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.IO.DInputVirtual.IsAOff``1(``0)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.IO.DInputVirtual.IsAOff(System.Int32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.IO.DInputVirtual.IsBOff``1(``0)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.IO.DInputVirtual.IsBOff(System.Int32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.IO.DInputVirtual.IsBOn``1(``0)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.IO.DInputVirtual.IsBOn(System.Int32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.IO.DInputVirtual.GetChannel(System.Int32,System.UInt16@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.IO.DInputVirtual.Update">
            <inheritdoc/>  
        </member>
        <member name="T:SpiralLab.Sirius2.IO.IDOutput">
            <summary>
            IDOutput interface
            </summary>
            <remarks>
            Used with digital outputs at RTC card <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.IO.IDOutput.SyncRoot">
            <summary>
            Synchronization object
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.IO.IDOutput.Index">
            <summary>
            Identifier
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.IO.IDOutput.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.IO.IDOutput.ChannelCount">
            <summary>
            Channel count(s)
            </summary>
            <remarks>
            1 channel = 16 bits <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.IO.IDOutput.Channels">
            <summary>
            Array of channel
            </summary>
            <remarks>
            Array of 16 bits
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.IO.IDOutput.Tag">
            <summary>
            User data
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.IO.IDOutput.Initialize">
            <summary>
            Initialize
            <code>
            enum DOUT
            {
                D0 = 0,
                D1 = 1,
                D2 = 2,
                D3 = 3,
                D4 = 4,
                D5 = 5,
                D6 = 6,
                D7 = 7,
                D8 = 8,
                D9 = 9,
                D10 = 10,
                D11 = 11,
                D12 = 12,
                D13 = 13,
                D14 = 14,
                D15 = 15,
            }
            var dOutput = IOFactory.RtcDOutputExtension1Port(rtc);
            dOutput.Initialize();
            do
            {
                ...
                dOutput.OutOn(DOUT.D0);
                dOutput.OutOn(DOUT.D1);
                ...
                dOutput.Update();
            }
            while(True);
            </code>
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.IO.IDOutput.OutOn``1(``0)">
            <summary>
            Bit ouput (On/High/True)
            </summary>
            <typeparam name="T"><c>Enum</c></typeparam>
            <param name="no">Item of <c>Enum</c></param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.IO.IDOutput.OutOn(System.Int32)">
            <summary>
            Bit ouput (On/High/True)
            </summary>
            <param name="no">No</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.IO.IDOutput.OutOff``1(``0)">
            <summary>
            Bit output (Off/Low/False)
            </summary>
            <typeparam name="T"><c>Enum</c></typeparam>
            <param name="no">Item of <c>Enum</c></param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.IO.IDOutput.OutOff(System.Int32)">
            <summary>
            Bit output (Off/Low/False)
            </summary>
            <param name="no">No</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.IO.IDOutput.IsOutOn``1(``0)">
            <summary>
            Bit status (On/High/True)
            </summary>
            <typeparam name="T"><c>Enum</c></typeparam>
            <param name="no">Item of <c>Enum</c></param>
            <returns>True(On, High), False(Off, Low)</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.IO.IDOutput.IsOutOn(System.Int32)">
            <summary>
            Bit status (On/High/True)
            </summary>
            <param name="no">No</param>
            <returns>True(On, High), False(Off, Low)</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.IO.IDOutput.IsOutOff``1(``0)">
            <summary>
            Bit status (Off/Low/Flase)
            </summary>
            <typeparam name="T"><c>Enum</c></typeparam>
            <param name="no">Item of <c>Enum</c></param>
            <returns>True(Off, Low), False(On, High)</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.IO.IDOutput.IsOutOff(System.Int32)">
            <summary>
            Bit status (Off/Low/Flase)
            </summary>
            <param name="no">No</param>
            <returns>True(Off, Low), False(On, High)</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.IO.IDOutput.GetChannel(System.Int32,System.UInt16@)">
            <summary>
            Get channel(16bits) status
            </summary>
            <param name="ch">Channel (0,1,2,...)</param>
            <param name="d16bits">16bits value</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.IO.IDOutput.SetChannel(System.Int32,System.UInt16)">
            <summary>
            Set channel(16bits) status
            </summary>
            <param name="ch">Channel (0,1,2,...)</param>
            <param name="d16bits">16bits value</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.IO.IDOutput.Update">
            <summary>
            Update channel(s) data to output
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="T:SpiralLab.Sirius2.IO.DOutputVirtual">
            <summary>
            DOutput Virtual
            </summary>
            <remarks>
            Virtual digital outputs
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.IO.DOutputVirtual.SyncRoot">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.IO.DOutputVirtual.Index">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.IO.DOutputVirtual.Name">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.IO.DOutputVirtual.ChannelCount">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.IO.DOutputVirtual.Channels">
            <inheritdoc/>  
        </member>
        <member name="F:SpiralLab.Sirius2.IO.DOutputVirtual.channels">
            <summary>
            Array of ushort (16bits)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.IO.DOutputVirtual.Tag">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.IO.DOutputVirtual.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="index">Identifier (0,1,2,3, ...)</param>
        </member>
        <member name="M:SpiralLab.Sirius2.IO.DOutputVirtual.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.IO.DOutputVirtual.Dispose">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.IO.DOutputVirtual.Dispose(System.Boolean)">
            <summary>
            Dispose internal resources
            </summary>
            <param name="disposing">Explicit dispose or not</param>
        </member>
        <member name="M:SpiralLab.Sirius2.IO.DOutputVirtual.Initialize">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.IO.DOutputVirtual.OutOn``1(``0)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.IO.DOutputVirtual.OutOn(System.Int32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.IO.DOutputVirtual.OutOff``1(``0)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.IO.DOutputVirtual.OutOff(System.Int32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.IO.DOutputVirtual.IsOutOn``1(``0)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.IO.DOutputVirtual.IsOutOn(System.Int32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.IO.DOutputVirtual.IsOutOff``1(``0)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.IO.DOutputVirtual.IsOutOff(System.Int32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.IO.DOutputVirtual.GetChannel(System.Int32,System.UInt16@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.IO.DOutputVirtual.SetChannel(System.Int32,System.UInt16)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.IO.DOutputVirtual.Update">
            <inheritdoc/>  
        </member>
        <member name="T:SpiralLab.Sirius2.IO.IOFactory">
            <summary>
            IOFactory
            </summary>
            <remarks>
            Factory for create <see cref="T:SpiralLab.Sirius2.IO.IDInput">IDInput</see> or <see cref="T:SpiralLab.Sirius2.IO.IDOutput">IDOutput</see> instance for RTC card <br/>
            </remarks>
        </member>
        <member name="M:SpiralLab.Sirius2.IO.IOFactory.CreateVirtualInput(System.Int32)">
            <summary>
            Create <see cref="T:SpiralLab.Sirius2.IO.DInputVirtual">DInputVirtual</see>
            <code>
            var dInput = IOFactory.CreateVirtualInput(0);
            ...
            do
            {
                dInput.Update();
                if (dInput.IsAOn(0))
                {
                    // To do when 0bit goes to HIGH
                }
                ...
            }while(true);
            </code>
            </summary>
            <param name="index">Identifier (0,1,2,3, ...)</param>
            <returns><see cref="T:SpiralLab.Sirius2.IO.DInputVirtual">DInputVirtual</see></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.IO.IOFactory.CreateInputExtension1(SpiralLab.Sirius2.Scanner.Rtc.IRtc)">
            <summary>
            Create <see cref="T:SpiralLab.Sirius2.IO.RtcDInputExtension1Port">RtcDInputExtension1Port</see>
            <code>
            var dInput = IOFactory.CreateInputExtension1(0);
            ...
            do
            {
                dInput.Update();
                if (dInput.IsAOn(0))
                {
                    // To do when 0bit goes to HIGH
                }
                ...
            }while(true);
            </code>
            </summary>
            <remarks>
            Digital input at RTC extension port 1. <br/>
            Used with <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.ExtensionChannels.ExtDI16">ExtensionChannels.ExtDI16</see> <br/>
            </remarks>
            <param name="rtc"><c>IRtc</c></param>
            <returns><see cref="T:SpiralLab.Sirius2.IO.RtcDInputExtension1Port">RtcDInputExtension1Port</see></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.IO.IOFactory.CreateInputLaserPort(SpiralLab.Sirius2.Scanner.Rtc.IRtc)">
            <summary>
            Create <see cref="T:SpiralLab.Sirius2.IO.RtcDInputLaserPort">RtcDInputLaserPort</see>
            <code>
            var dInput = IOFactory.CreateInputLaserPort(0);
            ...
            do
            {
                dInput.Update();
                if (dInput.IsAOn(0))
                {
                    // To do when 0bit goes to HIGH
                }
                ...
            }while(true);
            </code>
            </summary>
            <param name="rtc"><c>IRtc</c></param>
            <remarks>
            Digital input at RTC laser port.
            Used with <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.ExtensionChannels.ExtDI2">ExtensionChannels.ExtDI2</see> <br/>
            </remarks>
            <returns><see cref="T:SpiralLab.Sirius2.IO.RtcDInputLaserPort">RtcDInputLaserPort</see></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.IO.IOFactory.CreateVirtualOutput(System.Int32)">
            <summary>
            Create <see cref="T:SpiralLab.Sirius2.IO.DOutputVirtual">DOutputVirtual</see> 
            <code>
            var dInput = IOFactory.Create...
            var dOutput = IOFactory.CreateVirtualOutput(0);
            ...
            do
            {
                dInput.Update();
                if (dInput.IsAOn(0))
                {
                    // Set 0 output bit goes to HIGH
                    dOutput.OutOn(0);
                }
                ...
                dOutput.Update();
            }while(true);
            </code>
            </summary>
            <param name="index">Identifier (0,1,2,3, ...)</param>
            <returns><see cref="T:SpiralLab.Sirius2.IO.DOutputVirtual">DOutputVirtual</see></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.IO.IOFactory.CreateOutputExtension1(SpiralLab.Sirius2.Scanner.Rtc.IRtc)">
            <summary>
            Create <see cref="T:SpiralLab.Sirius2.IO.RtcDOutputExtension1Port">RtcDOutputExtension1Port</see> 
            <code>
            var dInput = IOFactory.Create...
            var dOutput = IOFactory.CreateOutputExtension1(0);
            ...
            do
            {
                dInput.Update();
                if (dInput.IsAOn(0))
                {
                    // Set 0 output bit goes to HIGH
                    dOutput.OutOn(0);
                }
                ...
                dOutput.Update();
            }while(true);
            </code>
            </summary>
            <param name="rtc"><c>IRtc</c></param>
            <remarks>
            Digital output at RTC extension port 1. <br/>
            Used with <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.ExtensionChannels.ExtDO16">ExtensionChannels.ExtDO16</see> <br/>
            </remarks>
            <returns><see cref="T:SpiralLab.Sirius2.IO.RtcDOutputExtension1Port">RtcDOutputExtension1Port</see></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.IO.IOFactory.CreateOutputExtension2(SpiralLab.Sirius2.Scanner.Rtc.IRtc)">
            <summary>
            Create <see cref="T:SpiralLab.Sirius2.IO.RtcDOutputExtension2Port">RtcDOutputExtension2Port</see>
            <code>
            var dInput = IOFactory.Create...
            var dOutput = IOFactory.CreateOutputExtension2(0);
            ...
            do
            {
                dInput.Update();
                if (dInput.IsAOn(0))
                {
                    // Set 0 output bit goes to HIGH
                    dOutput.OutOn(0);
                }
                ...
                dOutput.Update();
            }while(true);
            </code>
            </summary>
            <param name="rtc"><c>IRtc</c></param>
            <remarks>
            Digital output at RTC extension port 2. <br/>
            Used with <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.ExtensionChannels.ExtDO8">ExtensionChannels.ExtDO8</see> <br/>
            </remarks>
            <returns><see cref="T:SpiralLab.Sirius2.IO.RtcDOutputExtension2Port">RtcDOutputExtension2Port</see></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.IO.IOFactory.CreateOutputLaserPort(SpiralLab.Sirius2.Scanner.Rtc.IRtc)">
            <summary>
            Create <see cref="T:SpiralLab.Sirius2.IO.RtcDOutputLaserPort">RtcDOutputLaserPort</see> 
            <code>
            var dInput = IOFactory.Create...
            var dOutput = IOFactory.CreateOutputLaserPort(0);
            ...
            do
            {
                dInput.Update();
                if (dInput.IsAOn(0))
                {
                    // Set 0 output bit goes to HIGH
                    dOutput.OutOn(0);
                }
                ...
                dOutput.Update();
            }while(true);
            </code>
            </summary>
            <param name="rtc"><c>IRtc</c></param>
            <remarks>
            Digital output at RTC laser port. <br/>
            Used with <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.ExtensionChannels.ExtDO2">ExtensionChannels.ExtDO2</see> <br/>
            </remarks>
            <returns><see cref="T:SpiralLab.Sirius2.IO.RtcDOutputLaserPort">RtcDOutputLaserPort</see></returns>
        </member>
        <member name="T:SpiralLab.Sirius2.IO.RtcDInputExtension1Port">
            <summary>
            DInput RTC Extension1 Port
            </summary>
            <remarks>
            Digital input for extension1 port at RTC card.<br/>
            <img src="images/rtc6pciex.png"/> <br/>
            Used with <c>ExtensionChannels.ExtDI16</c> at Fig 4.<br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.IO.RtcDInputExtension1Port.SyncRoot">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.IO.RtcDInputExtension1Port.Index">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.IO.RtcDInputExtension1Port.Name">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.IO.RtcDInputExtension1Port.ChannelCount">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.IO.RtcDInputExtension1Port.Channels">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.IO.RtcDInputExtension1Port.Tag">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.IO.RtcDInputExtension1Port.#ctor(SpiralLab.Sirius2.Scanner.Rtc.IRtc,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="rtc">IRtc interface</param>
            <param name="name">Name</param>
        </member>
        <member name="M:SpiralLab.Sirius2.IO.RtcDInputExtension1Port.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.IO.RtcDInputExtension1Port.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.IO.RtcDInputExtension1Port.Dispose(System.Boolean)">
            <summary>
            Dispose internal resources
            </summary>
            <param name="disposing">Explicit dispose or not</param>
        </member>
        <member name="M:SpiralLab.Sirius2.IO.RtcDInputExtension1Port.Initialize">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.IO.RtcDInputExtension1Port.IsAOn``1(``0)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.IO.RtcDInputExtension1Port.IsAOn(System.Int32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.IO.RtcDInputExtension1Port.IsAOff``1(``0)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.IO.RtcDInputExtension1Port.IsAOff(System.Int32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.IO.RtcDInputExtension1Port.IsBOff``1(``0)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.IO.RtcDInputExtension1Port.IsBOff(System.Int32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.IO.RtcDInputExtension1Port.IsBOn``1(``0)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.IO.RtcDInputExtension1Port.IsBOn(System.Int32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.IO.RtcDInputExtension1Port.GetChannel(System.Int32,System.UInt16@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.IO.RtcDInputExtension1Port.Update">
            <inheritdoc/>  
        </member>
        <member name="T:SpiralLab.Sirius2.IO.RtcDInputLaserPort">
            <summary>
            DInput RTC Laser Port 2Pin
            </summary>
            <remarks>
            Digital input for laser port at RTC card.<br/>
            <img src="images/rtc6pciex.png"/><br/>
            Used with <c>ExtensionChannels.ExtDI2</c> at Fig 2.<br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.IO.RtcDInputLaserPort.SyncRoot">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.IO.RtcDInputLaserPort.Index">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.IO.RtcDInputLaserPort.Name">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.IO.RtcDInputLaserPort.ChannelCount">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.IO.RtcDInputLaserPort.Channels">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.IO.RtcDInputLaserPort.Tag">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.IO.RtcDInputLaserPort.#ctor(SpiralLab.Sirius2.Scanner.Rtc.IRtc,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="rtc">IRtc interface</param>
            <param name="name">Name</param>
        </member>
        <member name="M:SpiralLab.Sirius2.IO.RtcDInputLaserPort.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.IO.RtcDInputLaserPort.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.IO.RtcDInputLaserPort.Dispose(System.Boolean)">
            <summary>
            Dispose internal resources
            </summary>
            <param name="disposing">Explicit dispose or not</param>
        </member>
        <member name="M:SpiralLab.Sirius2.IO.RtcDInputLaserPort.Initialize">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.IO.RtcDInputLaserPort.IsAOn``1(``0)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.IO.RtcDInputLaserPort.IsAOn(System.Int32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.IO.RtcDInputLaserPort.IsAOff``1(``0)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.IO.RtcDInputLaserPort.IsAOff(System.Int32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.IO.RtcDInputLaserPort.IsBOff``1(``0)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.IO.RtcDInputLaserPort.IsBOff(System.Int32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.IO.RtcDInputLaserPort.IsBOn``1(``0)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.IO.RtcDInputLaserPort.IsBOn(System.Int32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.IO.RtcDInputLaserPort.GetChannel(System.Int32,System.UInt16@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.IO.RtcDInputLaserPort.Update">
            <inheritdoc/>  
        </member>
        <member name="T:SpiralLab.Sirius2.IO.RtcDOutputExtension1Port">
            <summary>
            DOutput RTC Extension Port1
            </summary>
            <remarks>
            Digital output for extension1 port at RTC card.<br/>
            <img src="images/rtc6pciex.png"/><br/>
            Used with <c>ExtensionChannels.ExtDO16</c> at Fig 4.<br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.IO.RtcDOutputExtension1Port.SyncRoot">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.IO.RtcDOutputExtension1Port.Index">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.IO.RtcDOutputExtension1Port.Name">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.IO.RtcDOutputExtension1Port.ChannelCount">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.IO.RtcDOutputExtension1Port.Channels">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.IO.RtcDOutputExtension1Port.Tag">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.IO.RtcDOutputExtension1Port.#ctor(SpiralLab.Sirius2.Scanner.Rtc.IRtc,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="rtc"><c>IRtc</c></param>
            <param name="name">Name</param>
        </member>
        <member name="M:SpiralLab.Sirius2.IO.RtcDOutputExtension1Port.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.IO.RtcDOutputExtension1Port.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.IO.RtcDOutputExtension1Port.Dispose(System.Boolean)">
            <summary>
            Dispose internal resources
            </summary>
            <param name="disposing">Explicit dispose or not</param>
        </member>
        <member name="M:SpiralLab.Sirius2.IO.RtcDOutputExtension1Port.Initialize">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.IO.RtcDOutputExtension1Port.OutOn``1(``0)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.IO.RtcDOutputExtension1Port.OutOn(System.Int32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.IO.RtcDOutputExtension1Port.OutOff``1(``0)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.IO.RtcDOutputExtension1Port.OutOff(System.Int32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.IO.RtcDOutputExtension1Port.IsOutOn``1(``0)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.IO.RtcDOutputExtension1Port.IsOutOn(System.Int32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.IO.RtcDOutputExtension1Port.IsOutOff``1(``0)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.IO.RtcDOutputExtension1Port.IsOutOff(System.Int32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.IO.RtcDOutputExtension1Port.GetChannel(System.Int32,System.UInt16@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.IO.RtcDOutputExtension1Port.SetChannel(System.Int32,System.UInt16)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.IO.RtcDOutputExtension1Port.Update">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.IO.RtcDOutputExtension1Port.ReverseUpdate">
            <summary>
            Read output status and save as channel values
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="T:SpiralLab.Sirius2.IO.RtcDOutputExtension2Port">
            <summary>
            DOutput RTC Extension Port2
            </summary>
            <remarks>
            Digital output for extension2 port at RTC card.<br/>
            <img src="images/rtc6pciex.png"/><br/>
            Used with <c>ExtensionChannels.ExtDO8</c> at Fig 5.<br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.IO.RtcDOutputExtension2Port.SyncRoot">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.IO.RtcDOutputExtension2Port.Index">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.IO.RtcDOutputExtension2Port.Name">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.IO.RtcDOutputExtension2Port.ChannelCount">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.IO.RtcDOutputExtension2Port.Channels">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.IO.RtcDOutputExtension2Port.Tag">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.IO.RtcDOutputExtension2Port.#ctor(SpiralLab.Sirius2.Scanner.Rtc.IRtc,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="rtc">IRtc interface</param>
            <param name="name">Name</param>
        </member>
        <member name="M:SpiralLab.Sirius2.IO.RtcDOutputExtension2Port.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.IO.RtcDOutputExtension2Port.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.IO.RtcDOutputExtension2Port.Dispose(System.Boolean)">
            <summary>
            Dispose internal resources
            </summary>
            <param name="disposing">Explicit dispose or not</param>
        </member>
        <member name="M:SpiralLab.Sirius2.IO.RtcDOutputExtension2Port.Initialize">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.IO.RtcDOutputExtension2Port.OutOn``1(``0)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.IO.RtcDOutputExtension2Port.OutOn(System.Int32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.IO.RtcDOutputExtension2Port.OutOff``1(``0)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.IO.RtcDOutputExtension2Port.OutOff(System.Int32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.IO.RtcDOutputExtension2Port.IsOutOn``1(``0)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.IO.RtcDOutputExtension2Port.IsOutOn(System.Int32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.IO.RtcDOutputExtension2Port.IsOutOff``1(``0)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.IO.RtcDOutputExtension2Port.IsOutOff(System.Int32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.IO.RtcDOutputExtension2Port.GetChannel(System.Int32,System.UInt16@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.IO.RtcDOutputExtension2Port.SetChannel(System.Int32,System.UInt16)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.IO.RtcDOutputExtension2Port.Update">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.IO.RtcDOutputExtension2Port.ReverseUpdate">
            <summary>
            Read output status and save as channel values
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="T:SpiralLab.Sirius2.IO.RtcDOutputLaserPort">
            <summary>
            DOutput RTC Laser Port 2Pin
            </summary>
            <remarks>
            Digital output for laser port at RTC card.<br/>
            <img src="images/rtc6pciex.png"/><br/>
            Used with <c>ExtensionChannels.ExtDO2</c> at Fig 2.<br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.IO.RtcDOutputLaserPort.SyncRoot">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.IO.RtcDOutputLaserPort.Index">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.IO.RtcDOutputLaserPort.Name">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.IO.RtcDOutputLaserPort.ChannelCount">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.IO.RtcDOutputLaserPort.Channels">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.IO.RtcDOutputLaserPort.Tag">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.IO.RtcDOutputLaserPort.#ctor(SpiralLab.Sirius2.Scanner.Rtc.IRtc,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="rtc"><c>IRtc</c></param>
            <param name="name">Name</param>
        </member>
        <member name="M:SpiralLab.Sirius2.IO.RtcDOutputLaserPort.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.IO.RtcDOutputLaserPort.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.IO.RtcDOutputLaserPort.Dispose(System.Boolean)">
            <summary>
            Dispose internal resources
            </summary>
            <param name="disposing">Explicit dispose or not</param>
        </member>
        <member name="M:SpiralLab.Sirius2.IO.RtcDOutputLaserPort.Initialize">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.IO.RtcDOutputLaserPort.OutOn``1(``0)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.IO.RtcDOutputLaserPort.OutOn(System.Int32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.IO.RtcDOutputLaserPort.OutOff``1(``0)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.IO.RtcDOutputLaserPort.OutOff(System.Int32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.IO.RtcDOutputLaserPort.IsOutOn``1(``0)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.IO.RtcDOutputLaserPort.IsOutOn(System.Int32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.IO.RtcDOutputLaserPort.IsOutOff``1(``0)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.IO.RtcDOutputLaserPort.IsOutOff(System.Int32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.IO.RtcDOutputLaserPort.GetChannel(System.Int32,System.UInt16@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.IO.RtcDOutputLaserPort.SetChannel(System.Int32,System.UInt16)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.IO.RtcDOutputLaserPort.Update">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.IO.RtcDOutputLaserPort.ReverseUpdate">
            <summary>
            Read output status and save as channel values
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="T:SpiralLab.Sirius2.Laser.LaserFactory">
            <summary>
            LaserFactory
            </summary>
            <remarks>
            Factory for create <see cref="T:SpiralLab.Sirius2.Laser.ILaser">ILaser</see> instance for various laser manufacturers. <br/>
            </remarks>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.LaserFactory.CreateVirtual(System.Int32,System.Double,SpiralLab.Sirius2.Laser.PowerControlMethods)">
            <summary>
            Create virtual laser source with specific <see cref="T:SpiralLab.Sirius2.Laser.PowerControlMethods">PowerControlMethods</see>
            <code>
            var rtc = ScannerFactory.Create...
            ...
            float maxPowerWatt = 20;
            var laser = LaserFactory.CreateVirtual(0, maxPowerWatt);
            laser.Scanner = rtc;
            bool success = true;
            success &amp;= laser.Initialize();
            success &amp;= laser.CtlPower(2);
            Debug.Assert(success);
            </code>
            </summary>
            <param name="index">Identifier (0,1,2,...)</param>
            <param name="maxPowerWatt">Max laser power (W)<br/>Actual output laser power(W) but theorical.<br/>Recommended by measure output laser max power by powermeter and use it. <br/></param>
            <param name="powerControlMethod"><see cref="T:SpiralLab.Sirius2.Laser.PowerControlMethods">PowerControlMethod</see></param>
            <returns><see cref="T:SpiralLab.Sirius2.Laser.LaserVirtual">LaserVirtual</see></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.LaserFactory.CreateVirtualAnalog(System.Int32,System.Double,System.Int32,System.Double,System.Double)">
            <summary>
            Create laser source with control analog voltage output power
            <code>
            var rtc = ScannerFactory.Create...
            ...
            float maxPowerWatt = 20;
            int analogCh = 1;
            // For example 0W(0V) ~ 20W(10V)
            float minVoltage = 0;
            float maxVoltage = 10;
            var laser = LaserFactory.CreateVirtualAnalog(0, maxPowerWatt, analogCh, minVoltage, maxVoltage);
            laser.Scanner = rtc;
            bool success = true;
            success &amp;= laser.Initialize();
            success &amp;= laser.CtlPower(2);
            Debug.Assert(success);
            </code>
            </summary>
            <remarks>
            Fixed with <see cref="F:SpiralLab.Sirius2.Laser.PowerControlMethods.Analog">PowerControlMethods.Analog</see> <br/>
            </remarks>
            <param name="index">Identifier (0,1,2,...)</param>
            <param name="maxPowerWatt">Max laser power (W)<br/>Actual output laser power(W) but theorical.<br/>Recommended by measure output laser max power by powermeter and use it. <br/></param>
            <param name="analogCh">1: <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.ExtensionChannels.ExtAO1">ExtensionChannels.ExtAO1</see><br/>2: <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.ExtensionChannels.ExtAO2">ExtensionChannels.ExtAO2</see></param>
            <param name="minVoltage">Min voltage (V)</param>
            <param name="maxVoltage">Max voltage (V)</param>
            <returns><see cref="T:SpiralLab.Sirius2.Laser.LaserVirtual">LaserVirtual</see></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.LaserFactory.CreateVirtualFrequency(System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            Create laser source with control frequency output power
            <code>
            var rtc = ScannerFactory.Create...
            ...
            float maxPowerWatt = 20;
            // For example 0W(50KHz) ~ 20W(100KHz)
            float minFrequency = 50*1000;
            float maxFrequency = 100*1000;
            var laser = LaserFactory.CreateVirtualAnalog(0, maxPowerWatt, minFrequency, maxFrequency);
            laser.Scanner = rtc;
            bool success = true;
            success &amp;= laser.Initialize();
            success &amp;= laser.CtlPower(2);
            Debug.Assert(success);
            </code>
            </summary>
            <remarks>
            Fixed with <see cref="F:SpiralLab.Sirius2.Laser.PowerControlMethods.Frequency">PowerControlMethods.Frequency</see> <br/>
            </remarks>
            <param name="index">Identifier (0,1,2,...)</param>
            <param name="maxPowerWatt">Max laser power (W)<br/>Actual output laser power(W) but theorical.<br/>Recommended by measure output laser max power by powermeter and use it. <br/></param>
            <param name="minFrequency">Min Frequency (Hz)</param>
            <param name="maxFrequency">Max Frequency (Hz)</param>
            <returns><see cref="T:SpiralLab.Sirius2.Laser.LaserVirtual">LaserVirtual</see></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.LaserFactory.CreateVirtualDutyCycle(System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            Create laser source with control pulse width output power
            <code>
            var rtc = ScannerFactory.Create...
            ...
            float maxPowerWatt = 20;
            // For example 0W(0%) ~ 20W(99%)
            // If output frequency is 50Khz, 0W(0usec) ~ 20W( 1.8usec= 20usec * 0.9)
            float minDutyCycle = 0;
            float maxDutyCycle = 90;
            var laser = LaserFactory.CreateVirtualDutyCycle(0, maxPowerWatt, minDutyCycle, maxDutyCycle);
            laser.Scanner = rtc;
            bool success = true;
            success &amp;= laser.Initialize();
            success &amp;= laser.CtlPower(2);
            Debug.Assert(success);
            </code>
            </summary>
            <remarks>
            Fixed with <see cref="F:SpiralLab.Sirius2.Laser.PowerControlMethods.DutyCycle">PowerControlMethods.DutyCycle</see> <br/>
            </remarks>
            <param name="index">Identifier (0,1,2,...)</param>
            <param name="maxPowerWatt">Max laser power (W)<br/>Actual output laser power(W) but theorical.<br/>Recommended by measure output laser max power by powermeter and use it. <br/></param>
            <param name="minDutyCycle">Min Duty Cycle Duty (%)</param>
            <param name="maxDutyCycle">Max Duty Cycle Duty (%)</param>
            <returns><see cref="T:SpiralLab.Sirius2.Laser.LaserVirtual">LaserVirtual</see></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.LaserFactory.CreateVirtualDO16Bits(System.Int32,System.Double,System.UInt16,System.UInt16)">
            <summary>
            Create laser source with extension1 port with digital 16bits output power
            <code>
            var rtc = ScannerFactory.Create...
            ...
            float maxPowerWatt = 20;
            // For example 0W(0x00) ~ 20W(0xFFFF)
            float minBits = 0;
            float maxBits = 65535;
            var laser = LaserFactory.CreateVirtualDO16Bits(0, maxPowerWatt, minBits, maxBits);
            laser.Scanner = rtc;
            bool success = true;
            success &amp;= laser.Initialize();
            success &amp;= laser.CtlPower(2);
            Debug.Assert(success);
            </code>
            </summary>
            <remarks>
            Fixed with <see cref="F:SpiralLab.Sirius2.Laser.PowerControlMethods.DigitalBits">PowerControlMethods.DigitalBits</see> <br/>
            Used with <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.ExtensionChannels.ExtDO16">ExtensionChannels.ExtDO16</see> <br/>
            </remarks>
            <param name="index">Identifier (0,1,2,...)</param>
            <param name="maxPowerWatt">Max laser power (W)<br/>Actual output laser power(W) but theorical.<br/>Recommended by measure output laser max power by powermeter and use it. <br/></param>
            <param name="minBit">Min bit value (0)</param>
            <param name="maxBit">Max bit value (65535)</param>
            <returns><see cref="T:SpiralLab.Sirius2.Laser.LaserVirtual">LaserVirtual</see></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.LaserFactory.CreateVirtualDO8Bits(System.Int32,System.Double,System.UInt16,System.UInt16)">
            <summary>
            Create laser source with extension2 port with digital 8bits output power
            <code>
            var rtc = ScannerFactory.Create...
            ...
            float maxPowerWatt = 20;
            // For example 0W(0x00) ~ 20W(0xFF)
            float minBits = 0;
            float maxBits = 255;
            var laser = LaserFactory.CreateVirtualDO8Bits(0, maxPowerWatt, minBits, maxBits);
            laser.Scanner = rtc;
            bool success = true;
            success &amp;= laser.Initialize();
            success &amp;= laser.CtlPower(2);
            Debug.Assert(success);
            </code>
            </summary>
            <remarks>
            Fixed with <see cref="F:SpiralLab.Sirius2.Laser.PowerControlMethods.DigitalBits">PowerControlMethods.DigitalBits</see> <br/>
            Used with <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.ExtensionChannels.ExtDO8">ExtensionChannels.ExtDO8</see> <br/>
            </remarks>
            <param name="index">Identifier (0,1,2,...)</param>
            <param name="maxPowerWatt">Max laser power (W)<br/>Actual output laser power(W) but theorical.<br/>Recommended by measure output laser max power by powermeter and use it. <br/></param>
            <param name="minBit">Min bit value (0)</param>
            <param name="maxBit">Max bit value (255)</param>
            <returns><see cref="T:SpiralLab.Sirius2.Laser.LaserVirtual">LaserVirtual</see></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.LaserFactory.CreateVirtualRS232(System.Int32,System.Double,System.String)">
            <summary>
            Create laser source with control RS232 communication at RTC card output power
            <code>
            var rtc = ScannerFactory.Create...
            ...
            float maxPowerWatt = 20;
            // For example 0W("0.000") ~ 20W("10.000")
            string format = "{0:F3}";
            var laser = LaserFactory.CreateVirtualRS232(0, maxPowerWatt, format);
            laser.Scanner = rtc;
            bool success = true;
            success &amp;= laser.Initialize();
            success &amp;= laser.CtlPower(2);
            Debug.Assert(success);
            </code>
            </summary>
            <remarks>
            Warning : Used RS232 port at internal RTC card. <br/>
            Fixed with <see cref="F:SpiralLab.Sirius2.Laser.PowerControlMethods.Rs232">PowerControlMethods.Rs232</see> <br/>
            Converted and transmitted data as <c>string.Format(Rs232StringFormat, percentage)</c>. <br/>
            Argument value is fixed to percentage value. For example, "{0:F3}" is means "{percentage:F3}". <br/>
            </remarks>
            <param name="index">Identifier (0,1,2,...)</param>
            <param name="maxPowerWatt">Max laser power (W)<br/>Actual output laser power(W) but theorical.<br/>Recommended by measure output laser max power by powermeter and use it. <br/></param>
            <param name="format">Formatted string</param>
            <returns><see cref="T:SpiralLab.Sirius2.Laser.LaserVirtual">LaserVirtual</see></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.LaserFactory.CreateVirtualCustom(System.Int32,System.Double)">
            <summary>
            Create laser source with control custom output power
            <code>
            var rtc = ScannerFactory.Create...
            ...
            float maxPowerWatt = 20;
            string format = "{0:F3}";
            var laser = LaserFactory.CreateVirtualCustom(0, maxPowerWatt);
            laser.Scanner = rtc;
            bool success = true;
            success &amp;= laser.Initialize();
            success &amp;= laser.CtlPower(2);
            Debug.Assert(success);
            </code>
            </summary>
            <remarks>
            Fixed with <see cref="F:SpiralLab.Sirius2.Laser.PowerControlMethods.Custom">PowerControlMethods.Custom</see> <br/>
            Recommened that create your own laser instance that inherited <see cref="T:SpiralLab.Sirius2.Laser.LaserBase">LaserBase</see> <br/>
            </remarks>
            <param name="index">Identifier (0,1,2,...)</param>
            <param name="maxPowerWatt">Max laser power (W)<br/>Actual output laser power(W) but theorical.<br/>Recommended by measure output laser max power by powermeter and use it. <br/></param>
            <returns><see cref="T:SpiralLab.Sirius2.Laser.LaserVirtual">LaserVirtual</see></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.LaserFactory.CreateAdvancedOptoWaveAOPico(System.Int32,System.String,System.Int32,System.Double)">
            <summary>
            Create Advanced OptoWave AOPico
            </summary>
            <remarks>
            Vary <see cref="P:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPico.PowerFactor">PowerFactor</see> value by custom(external) RS-232 communication. <br/>
            </remarks>
            <param name="index">Identifier</param>
            <param name="name">Name</param>
            <param name="comPort">COM port</param>
            <param name="maxPowerWatt">Max laser power (W)<br/>Actual output laser power(W) but theorical.<br/>Recommended by measure output laser max power by powermeter and use it. <br/></param>
            <returns><see cref="T:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPico">AdvancedOptoWaveAOPico</see></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.LaserFactory.CreateAdvancedOptoWaveAOPicoPrecision(System.Int32,System.String,System.Int32,System.Double)">
            <summary>
            Create Advanced OptoWave AOPico Precision
            </summary>
            <remarks>
            Vary <see cref="P:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPico.PowerFactor">PowerFactor</see> value by custom(external) RS-232 communication. <br/>
            </remarks>
            <param name="index">Identifier</param>
            <param name="name">Name</param>
            <param name="comPort">COM port</param>
            <param name="maxPowerWatt">Max laser power (W)<br/>Actual output laser power(W) but theorical.<br/>Recommended by measure output laser max power by powermeter and use it. <br/></param>
            <returns><see cref="T:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPicoPrecision">AdvancedOptoWaveAOPicoPrecision</see></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.LaserFactory.CreateAdvancedOptoWaveFotia(System.Int32,System.String,System.Int32,System.Double)">
            <summary>
            Create Advanced OptoWave Fotia
            </summary>
            <remarks>
            Vary pulse width(cycle) between <see cref="P:SpiralLab.Sirius2.Laser.AdvancedOptoWaveFotia.MinDutyCycle">MinDutyCycle</see> and <see cref="P:SpiralLab.Sirius2.Laser.AdvancedOptoWaveFotia.MaxDutyCycle">MaxDutyCycle</see>. <br/>
            </remarks>
            <param name="index">Identifier</param>
            <param name="name">Name</param>
            <param name="comPort">COM port</param>
            <param name="maxPowerWatt">Max laser power (W)<br/>Actual output laser power(W) but theorical.<br/>Recommended by measure output laser max power by powermeter and use it. <br/></param>
            <returns><see cref="T:SpiralLab.Sirius2.Laser.AdvancedOptoWaveFotia">AdvancedOptoWaveFotia</see></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.LaserFactory.CreateCoherentAviaLX(System.Int32,System.String,System.Int32,System.Double)">
            <summary>
            Create Coherent Avia LX
            </summary>
            <remarks>
            Vary <see cref="P:SpiralLab.Sirius2.Laser.CoherentAviaLX.DiodeCurrent">DiodeCurrent</see> value by custom(external) RS-232 communication. <br/>
            </remarks>
            <param name="index">Identifier</param>
            <param name="name">Name</param>
            <param name="comPort">COM port</param>
            <param name="maxPowerWatt">Max laser power (W)<br/>Actual output laser power(W) but theorical.<br/>Recommended by measure output laser max power by powermeter and use it. <br/></param>
            <returns><see cref="T:SpiralLab.Sirius2.Laser.CoherentAviaLX">CoherentAviaLX</see></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.LaserFactory.CreateCoherentDiamondCSeries(System.Int32,System.String,System.Double)">
            <summary>
            Create Coherent Diamond C-Series
            </summary>
            <remarks>
            Vary pulse width(cycle) between <see cref="P:SpiralLab.Sirius2.Laser.CoherentDiamondCSeries.MinDutyCycle">MinDutyCycle</see> and <see cref="P:SpiralLab.Sirius2.Laser.CoherentDiamondCSeries.MaxDutyCycle">MaxDutyCycle</see>. <br/>
            </remarks>
            <param name="index">Identifier</param>
            <param name="name">Name</param>
            <param name="maxPowerWatt">Max laser power (W)<br/>Actual output laser power(W) but theorical.<br/>Recommended by measure output laser max power by powermeter and use it. <br/></param>
            <returns><see cref="T:SpiralLab.Sirius2.Laser.CoherentDiamondCSeries">CoherentDiamondCSeries</see></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.LaserFactory.CreateIPGYLPN(System.Int32,System.String,System.Int32,System.Double,System.Int32)">
            <summary>
            Create IPG YLP N
            </summary>
            <remarks>
            Vary ouput analog voltage between <see cref="P:SpiralLab.Sirius2.Laser.IPGYLPN.MinVoltage">MinVoltage</see> and <see cref="P:SpiralLab.Sirius2.Laser.IPGYLPN.MaxVoltage">MaxVoltage</see>. <br/>
            </remarks>
            <param name="index">Identifier</param>
            <param name="name">Name</param>
            <param name="comPort">COM port</param>
            <param name="maxPowerWatt">Max laser power (W)<br/>Actual output laser power(W) but theorical.<br/>Recommended by measure output laser max power by powermeter and use it. <br/></param>
            <param name="analogPort">RTC analog port no (1 or 2)</param>
            <returns><see cref="T:SpiralLab.Sirius2.Laser.IPGYLPN">IPGYLPN</see></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.LaserFactory.CreateIPGYLPTypeD(System.Int32,System.String,System.Int32,System.Double)">
            <summary>
            Create IPG YLP TypeD
            </summary>
            <remarks>
            Vary <see cref="P:SpiralLab.Sirius2.Laser.IPGYLPTypeD.OperatingPower">OperatingPower</see> value by custom(external) RS-232 communication. <br/>
            </remarks>
            <param name="index">Identifier</param>
            <param name="name">Name</param>
            <param name="comPort">COM port</param>
            <param name="maxPowerWatt">Max laser power (W)<br/>Actual output laser power(W) but theorical.<br/>Recommended by measure output laser max power by powermeter and use it. <br/></param>
            <returns><see cref="T:SpiralLab.Sirius2.Laser.IPGYLPTypeD">IPGYLPTypeD</see></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.LaserFactory.CreateIPGYLPTypeE(System.Int32,System.String,System.Int32,System.Double)">
            <summary>
            Create IPG YLP TypeE
            </summary>
            <remarks>
            Vary <see cref="P:SpiralLab.Sirius2.Laser.IPGYLPTypeE.OperatingPower">OperatingPower</see> value by custom(external) RS-232 communication. <br/>
            </remarks>
            <param name="index">Identifier</param>
            <param name="name">Name</param>
            <param name="comPort">COM port</param>
            <param name="maxPowerWatt">Max laser power (W)<br/>Actual output laser power(W) but theorical.<br/>Recommended by measure output laser max power by powermeter and use it. <br/></param>
            <returns><see cref="T:SpiralLab.Sirius2.Laser.IPGYLPTypeE">IPGYLPTypeE</see></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.LaserFactory.CreateIPGYLPULPN(System.Int32,System.String,System.Int32,System.Double)">
            <summary>
            Create IPG YLP ULP N
            </summary>
            <remarks>
            Vary <see cref="P:SpiralLab.Sirius2.Laser.IPGYLPULPN.SetPoint">SetPoint</see> value by custom(external) RS-232 communication. <br/>
            </remarks>
            <param name="index">Identifier</param>
            <param name="name">Name</param>
            <param name="comPort">COM port</param>
            <param name="maxPowerWatt">Max laser power (W)<br/>Actual output laser power(W) but theorical.<br/>Recommended by measure output laser max power by powermeter and use it. <br/></param>
            <returns><see cref="T:SpiralLab.Sirius2.Laser.IPGYLPULPN">IPGYLPULPN</see></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.LaserFactory.CreateJPTTypeE(System.Int32,System.String,System.Int32,System.Double)">
            <summary>
            Create JPT TypeE
            </summary>
            <remarks>
            Vary <see cref="P:SpiralLab.Sirius2.Laser.JPTTypeE.OperatingPower">OperatingPower</see> value by custom(external) RS-232 communication. <br/>
            </remarks>
            <param name="index">Identifier</param>
            <param name="name">Name</param>
            <param name="comPort">COM port</param>
            <param name="maxPowerWatt">Max laser power (W)<br/>Actual output laser power(W) but theorical.<br/>Recommended by measure output laser max power by powermeter and use it. <br/></param>
            <returns><see cref="T:SpiralLab.Sirius2.Laser.JPTTypeE">JPTTypeE</see></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.LaserFactory.CreatePhotonicsIndustryDX(System.Int32,System.String,System.Int32,System.Double)">
            <summary>
            Create Photonics Industry DX
            </summary>
            <remarks>
            Vary <see cref="P:SpiralLab.Sirius2.Laser.PhotonicsIndustryDX.PECLevel">PECLevel</see> value by custom(external) RS-232 communication. <br/>
            </remarks>
            <param name="index">Identifier</param>
            <param name="name">Name</param>
            <param name="comPort">COM port</param>
            <param name="maxPowerWatt">Max laser power (W)<br/>Actual output laser power(W) but theorical.<br/>Recommended by measure output laser max power by powermeter and use it. <br/></param>
            <returns><see cref="T:SpiralLab.Sirius2.Laser.PhotonicsIndustryDX">PhotonicsIndustryDX</see></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.LaserFactory.CreatePhotonicsIndustryRGHAIO(System.Int32,System.String,System.Int32,System.Double)">
            <summary>
            Create Photonics Industry RGH AIO
            </summary>
            <remarks>
            Vary <see cref="P:SpiralLab.Sirius2.Laser.PhotonicsIndustryRGHAIO.PECLevel">PECLevel</see> value by custom(external) RS-232 communication. <br/>
            </remarks>
            <param name="index">Identifier</param>
            <param name="name">Name</param>
            <param name="comPort">COM port</param>
            <param name="maxPowerWatt">Max laser power (W)<br/>Actual output laser power(W) but theorical.<br/>Recommended by measure output laser max power by powermeter and use it. <br/></param>
            <returns><see cref="T:SpiralLab.Sirius2.Laser.PhotonicsIndustryRGHAIO">PhotonicsIndustryRGHAIO</see></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.LaserFactory.CreateSpectraPhysicsHippo(System.Int32,System.String,System.Int32,System.Double)">
            <summary>
            Create Spectra Physics Hippo
            </summary>
            <remarks>
            Vary <see cref="P:SpiralLab.Sirius2.Laser.SpectraPhysicsHippo.Diode1Current">Diode1Current</see> and <see cref="P:SpiralLab.Sirius2.Laser.SpectraPhysicsHippo.Diode2Current">Diode2Current</see> values by custom(external) RS-232 communication. <br/> 
            </remarks>
            <param name="index">Identifier</param>
            <param name="name">Name</param>
            <param name="comPort">COM port</param>
            <param name="maxPowerWatt">Max laser power (W)<br/>Actual output laser power(W) but theorical.<br/>Recommended by measure output laser max power by powermeter and use it. <br/></param>
            <returns><see cref="T:SpiralLab.Sirius2.Laser.SpectraPhysicsHippo">SpectraPhysicsHippo</see></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.LaserFactory.CreateSpectraPhysicsTalon(System.Int32,System.String,System.Int32,System.Double)">
            <summary>
            Create Spectra Physics Talon
            </summary>
            <remarks>
            Vary <see cref="P:SpiralLab.Sirius2.Laser.SpectraPhysicsTalon.DiodeCurrent">DiodeCurrent</see> value by custom(external) RS-232 communication. <br/> 
            </remarks>
            <param name="index">Identifier</param>
            <param name="name">Name</param>
            <param name="comPort">COM port</param>
            <param name="maxPowerWatt">Max laser power (W)<br/>Actual output laser power(W) but theorical.<br/>Recommended by measure output laser max power by powermeter and use it. <br/></param>
            <returns><see cref="T:SpiralLab.Sirius2.Laser.SpectraPhysicsTalon">SpectraPhysicsTalon</see></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.LaserFactory.CreateSPIG4(System.Int32,System.String,System.Int32,System.Double)">
            <summary>
            Create SPI G4(or G3)
            </summary>
            <remarks>
            Vary <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.ExtensionChannels.ExtAO1">Analog1</see> and <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.ExtensionChannels.ExtAO2">Analog2</see> voltage output at RTC analog port <br/>
            </remarks>
            <param name="index">Identifier</param>
            <param name="name">Name</param>
            <param name="comPort">COM port</param>
            <param name="maxPowerWatt">Max laser power (W)<br/>Actual output laser power(W) but theorical.<br/>Recommended by measure output laser max power by powermeter and use it. <br/></param>
            <returns><see cref="T:SpiralLab.Sirius2.Laser.SPIG4">SPIG4</see></returns>
        </member>
        <member name="T:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPico">
            <summary>
            Advanced OptoWave AOPico
            </summary>
            <remarks>
            Vary <c>PowerFactor</c> value by custom(external) RS-232 communication. <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPico.LaserType">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPico.PowerMap">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPico.Serial">
            <summary>
            SerialPort instance
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPico.IsShutterOpen">
            <summary>
            Shutter open/close control
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPico.PulseRepRate">
            <summary>
            Pulse repetition rate (Hz)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPico.PulsedInBurstMode">
            <summary>
            Pulses in burst mode
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPico.PowerFactor">
            <summary>
            Power Factor: 0~100 (%)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPico.TargetCrystal1Temperature">
            <summary>
            Target Crystal1 Temperature (°C)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPico.TargetCrystal2Temperature">
            <summary>
            Target Crystal2 Temperature (°C)
            </summary> 
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPico.TargetCrystal3Temperature">
            <summary>
            Target Crystal3 Temperature (°C)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPico.TargetCrystal4Temperature">
            <summary>
            Target Crystal4 Temperature (°C)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPico.ActualCrystal1Temperature">
            <summary>
            Actual Crystal1 Temperature (°C)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPico.ActualCrystal2Temperature">
            <summary>
            Actual Crystal2 Temperature (°C)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPico.ActualCrystal3Temperature">
            <summary>
            Actual Crystal3 Temperature (°C)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPico.ActualCrystal4Temperature">
            <summary>
            Actual Crystal4 Temperature (°C)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPico.ActualLaserHeadTemperature">
            <summary>
            Laser Head Actual Temperature (°C)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPico.EnvironmentalTemperature">
            <summary>
            Environmental Temperature (°C)
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPico.AlarmCodes">
            <summary>
            Alarm codes
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPico.AlarmCodes.Normal">
            <summary>
            Normal
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPico.AlarmCodes.Diode1TemperatureHigh">
            <summary>
            Higher 35
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPico.AlarmCodes.Diode1TemperatureLow">
            <summary>
            Lower 15
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPico.AlarmCodes.LaserHeadTemperatureHigh">
            <summary>
            Higher 40
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPico.AlarmCodes.LaserHeadTemperatureLow">
            <summary>
            Lower 15
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPico.AlarmCodes.EnvironmentalTemperatureHigh">
            <summary>
            Higher 40
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPico.AlarmCodes.EnvironmentalTemperatureLow">
            <summary>
            Lower 15
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPico.AlarmCodes.InterlockOpen">
            <summary>
            Double check, Lasting longer than 100ms
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPico.AlarmCode">
            <summary>
            Current alarm code
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPico.IsTimedOut">
            <summary>
            Communication timed out or not
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPico.IsProtocolError">
            <summary>
            Communication protocol error or not
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPico.ComPort">
            <summary>
            COM port no
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPico.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPico.#ctor(System.Int32,System.String,System.Int32,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="index">Identifier</param>
            <param name="name">Name</param>
            <param name="comPort">COM port</param>
            <param name="maxPowerWatt">Max power (W)</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPico.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPico.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPico.Initialize">
            <inheritdoc/>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPico.CRLF">
            <summary>
            Terminator
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPico.step">
            <summary>
            Cycle step counts within worker thread
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPico.OnThread">
            <summary>
            Worker thread
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPico.Send(System.String)">
            <summary>
            Send string data by <c>SerialPort</c>
            </summary>
            <param name="data">Data</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPico.ReceiveParse(System.IO.Ports.SerialPort,System.Int32@)">
            <summary>
            Receive data from  <c>SerialPort</c>
            </summary>
            <param name="serialPort"><c>SerialPort</c> instance</param>
            <param name="data">Return and converted integer data</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPico.QueryAlarmCode">
            <summary>
            Query alarm code
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPico.QueryCrystal1TargetTemp">
            <summary>
            Query crystal1 target temp
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPico.QueryCrystal2TargetTemp">
            <summary>
            Query crystal2 target temp
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPico.QueryCrystal3TargetTemp">
            <summary>
            Query crystal3 target temp
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPico.QueryCrystal4TargetTemp">
            <summary>
            Query crystal4 target temp
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPico.QueryAcutalCrystal1Temp">
            <summary>
            Query actual crystal1 temp
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPico.QueryAcutalCrystal2Temp">
            <summary>
            Query actual crystal2 temp
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPico.QueryAcutalCrystal3Temp">
            <summary>
            Query actual crystal3 temp
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPico.QueryAcutalCrystal4Temp">
            <summary>
            Query actual crystal4 temp
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPico.QueryUser">
            <summary>
            Query by user override or implemented function
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPico.CmdCrystal1TargetTemp">
            <summary>
            Command crystal1 target temp
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPico.CmdUser">
            <summary>
            User can override and implement this function for addition communication
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPico.CheckErrors">
            <summary>
            Check <c>IsError</c> status
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPico.CheckReady">
            <summary>
            Check <c>IsReady</c> status
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPico.CheckBusy">
            <summary>
            Check <c>IsBusy</c> status
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPico.CtlAbort">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPico.CtlReset">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPico.CtlPower(System.Double,System.String)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPico.ListBegin">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPico.ListEnd">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPico.ListPower(System.Double,System.String)">
            <inheritdoc/>  
        </member>
        <member name="T:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPicoPrecision">
            <summary>
            Advanced OptoWave AOPico Precision
            </summary>
            <remarks>
            Vary <c>PowerFactor</c> value by custom(external) RS-232 communication. <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPicoPrecision.LaserType">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPicoPrecision.IsDiodeOn">
            <summary>
            Diode status
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPicoPrecision.Diode1Current">
            <summary>
            Diode1 Current
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPicoPrecision.Diode2Current">
            <summary>
            Diode2 Current
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPicoPrecision.Diode3Current">
            <summary>
            Diode3 Current
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPicoPrecision.PulseRepRate">
            <summary>
            Pulse Rep Rate (Hz)
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPicoPrecision.GateFunctions">
            <summary>
            Gate Levels
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPicoPrecision.GateLevel">
            <summary>
            Gate Level 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPicoPrecision.PulsedInBurstMode">
            <summary>
            Pulses in burst mode
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPicoPrecision.PulseOutputs">
            <summary>
            Pulse Outputs
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPicoPrecision.PulseMode">
            <summary>
            Pulse output mode
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPicoPrecision.TargetCrystal2Temperature">
            <summary>
            Not used
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPicoPrecision.TargetCrystal3Temperature">
            <summary>
            Not used
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPicoPrecision.TargetCrystal4Temperature">
            <summary>
            Not used
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPicoPrecision.ActualCrystal2Temperature">
            <summary>
            Not used
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPicoPrecision.ActualCrystal3Temperature">
            <summary>
            Not used
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPicoPrecision.ActualCrystal4Temperature">
            <summary>
            Not used
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPicoPrecision.ActualLaserHeadTemperature">
            <summary>
            Not used
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPicoPrecision.EnvironmentalTemperature">
            <summary>
            Not used
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPicoPrecision.Hours">
            <summary>
            Lifetime
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPicoPrecision.AlarmCode">
            <summary>
            Not used
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPicoPrecision.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPicoPrecision.#ctor(System.Int32,System.String,System.Int32,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="index">Identifier</param>
            <param name="name">Name</param>
            <param name="comPort">COM port</param>
            <param name="maxPowerWatt">Max power (W)</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPicoPrecision.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPicoPrecision.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPicoPrecision.QueryUser">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPicoPrecision.QueryAlarmCode">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPicoPrecision.QueryCrystal1TargetTemp">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPicoPrecision.QueryCrystal2TargetTemp">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPicoPrecision.QueryCrystal3TargetTemp">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPicoPrecision.QueryCrystal4TargetTemp">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPicoPrecision.QueryAcutalCrystal1Temp">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPicoPrecision.QueryAcutalCrystal2Temp">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPicoPrecision.QueryAcutalCrystal3Temp">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPicoPrecision.QueryAcutalCrystal4Temp">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPicoPrecision.CmdUser">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPicoPrecision.CmdCrystal1TargetTemp">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.AdvancedOptoWaveAOPicoPrecision.CheckReady">
            <inheritdoc/>  
        </member>
        <member name="T:SpiralLab.Sirius2.Laser.AdvancedOptoWaveFotia">
            <summary>
            Advanced OptoWave AOPico
            </summary>
            <remarks>
            Vary pulse width(cycle) between <c>MinDutyCycle</c> and <c>MaxDutyCycle</c>. <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.AdvancedOptoWaveFotia.LaserType">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.AdvancedOptoWaveFotia.PowerMap">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.AdvancedOptoWaveFotia.Serial">
            <summary>
            SerialPort instance
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.AdvancedOptoWaveFotia.MinDutyCycle">
            <summary>
            Min Duty Cycle Duty (%)
            <para>Default: 1</para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.AdvancedOptoWaveFotia.MaxDutyCycle">
            <summary>
            Max Duty Cycle Duty (%)
            <para>Default: 99</para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.AdvancedOptoWaveFotia.IsDiodeOn">
            <summary>
            Diode On/Off
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.AdvancedOptoWaveFotia.IsQSwitchOn">
            <summary>
            Q Switch On/Off
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.AdvancedOptoWaveFotia.IsShutterOpen">
            <inheritdoc/> 
        </member>
        <member name="T:SpiralLab.Sirius2.Laser.AdvancedOptoWaveFotia.TriggerModes">
            <summary>
            Trigger modes
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.AdvancedOptoWaveFotia.TriggerModes.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.AdvancedOptoWaveFotia.TriggerModes.Internal">
            <summary>
            Internal
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.AdvancedOptoWaveFotia.TriggerModes.External">
            <summary>
            External
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.AdvancedOptoWaveFotia.TriggerMode">
            <summary>
            Trigger Mode
            <para>Recommended <c>External</c></para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.AdvancedOptoWaveFotia.PulseRepRate">
            <summary>
            Frequency (Hz)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.AdvancedOptoWaveFotia.PowerFactor">
            <summary>
            Power Factor: 0~100 (%)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.AdvancedOptoWaveFotia.DiodeCurrentAmp">
            <summary>
            Diode Current (A)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.AdvancedOptoWaveFotia.DiodeActualCurrentAmp">
            <summary>
            Actual Diode Current (A)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.AdvancedOptoWaveFotia.Diode1CurrentHightLimitAmp">
            <summary>
            Diode 1 Current High Limit (A)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.AdvancedOptoWaveFotia.LaserTime">
            <summary>
            Lifetime (Hrs)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.AdvancedOptoWaveFotia.FirmwareVersion">
            <summary>
            Firmware version
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.AdvancedOptoWaveFotia.TargetCrystal1Temperature">
            <summary>
            Crystal 1 Target Temperature (°C)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.AdvancedOptoWaveFotia.ActualCrystal1Temperature">
            <summary>
            Crystal 1 Actual Temperature (°C)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.AdvancedOptoWaveFotia.ActualLaserHeadTemperature">
            <summary>
            Laser Head Actual Temperature (°C)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.AdvancedOptoWaveFotia.ActualDiodeTemperature">
            <summary>
            Diode Actual Temperature (°C)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.AdvancedOptoWaveFotia.EnvironmentalTemperature">
            <summary>
            Environment Temperature (°C)
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Laser.AdvancedOptoWaveFotia.AlarmCodes">
            <summary>
            Alarm codes
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.AdvancedOptoWaveFotia.AlarmCodes.Normal">
            <summary>
            Normal
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.AdvancedOptoWaveFotia.AlarmCodes.Diode1TemperatureHigh">
            <summary>
            higher 35
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.AdvancedOptoWaveFotia.AlarmCodes.Diode1TemperatureLow">
            <summary>
            lower 15
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.AdvancedOptoWaveFotia.AlarmCodes.LaserHeadTemperatureHigh">
            <summary>
            higher 40
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.AdvancedOptoWaveFotia.AlarmCodes.LaserHeadTemperatureLow">
            <summary>
            lower 15
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.AdvancedOptoWaveFotia.AlarmCodes.EnvironmentalTemperatureHigh">
            <summary>
            higher 40
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.AdvancedOptoWaveFotia.AlarmCodes.EnvironmentalTemperatureLow">
            <summary>
            lower 15
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.AdvancedOptoWaveFotia.AlarmCodes.InterlockOpen">
            <summary>
            double check, lasting longer than 100ms
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.AdvancedOptoWaveFotia.AlarmCode">
            <summary>
            Current alarm code
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.AdvancedOptoWaveFotia.IsTimedOut">
            <summary>
            Communication timed out or not
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.AdvancedOptoWaveFotia.IsProtocolError">
            <summary>
            Communication protocol error or not
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.AdvancedOptoWaveFotia.IsGuideOn">
            <inheritdoc/> 
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.AdvancedOptoWaveFotia.ComPort">
            <summary>
            COM port no
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.AdvancedOptoWaveFotia.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.AdvancedOptoWaveFotia.#ctor(System.Int32,System.String,System.Int32,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="index">Identifier</param>
            <param name="name">Name</param>
            <param name="comPort">COM port</param>
            <param name="maxPowerWatt">Max power (W)</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.AdvancedOptoWaveFotia.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.AdvancedOptoWaveFotia.Dispose(System.Boolean)">
            <summary>
            Dispose internal resource
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.AdvancedOptoWaveFotia.Initialize">
            <inheritdoc/>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.AdvancedOptoWaveFotia.CRLF">
            <summary>
            Terminator
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.AdvancedOptoWaveFotia.step">
            <summary>
            Cycle step counts within worker thread
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.AdvancedOptoWaveFotia.OnThread">
            <summary>
            Worker thread
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.AdvancedOptoWaveFotia.Send(System.String)">
            <summary>
            Send string data by <c>SerialPort</c>
            </summary>
            <param name="data">Data</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.AdvancedOptoWaveFotia.ReceiveParse(System.IO.Ports.SerialPort,System.Int32@)">
            <summary>
            Receive data from  <c>SerialPort</c>
            </summary>
            <param name="serialPort"><c>SerialPort</c> instance</param>
            <param name="data">Return and converted integer data</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.AdvancedOptoWaveFotia.QueryUser">
            <summary>
            Query by user override or implemented function
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.AdvancedOptoWaveFotia.CmdUser">
            <summary>
            User can override and implement this function for addition communication
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.AdvancedOptoWaveFotia.CheckErrors">
            <summary>
            Check <c>IsError</c> status
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.AdvancedOptoWaveFotia.CheckReady">
            <summary>
            Check <c>IsReady</c> status
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.AdvancedOptoWaveFotia.CheckBusy">
            <summary>
            Check <c>IsBusy</c> status
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.AdvancedOptoWaveFotia.CtlAbort">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.AdvancedOptoWaveFotia.CtlReset">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.AdvancedOptoWaveFotia.CtlGuide(System.Boolean)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.AdvancedOptoWaveFotia.CtlPower(System.Double,System.String)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.AdvancedOptoWaveFotia.ListBegin">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.AdvancedOptoWaveFotia.ListEnd">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.AdvancedOptoWaveFotia.ListPower(System.Double,System.String)">
            <inheritdoc/>  
        </member>
        <member name="T:SpiralLab.Sirius2.Laser.CoherentAviaLX">
            <summary>
            Coherent Avia LX 
            </summary>
            <remarks>
            Vary <c>DiodeCurrent</c> value by custom(external) RS-232 communication. <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.CoherentAviaLX.LaserType">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.CoherentAviaLX.PowerMap">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.CoherentAviaLX.Serial">
            <summary>
            SerialPort instance
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.CoherentAviaLX.PulseRepRate">
            <summary>
            Pulse Rep Rate (Hz)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.CoherentAviaLX.DiodeTemperature">
            <summary>
            Diode Temperature (°C)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.CoherentAviaLX.BasePlateTemperature">
            <summary>
            Diode Temperature (°C)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.CoherentAviaLX.SHGTemperature">
            <summary>
            SHG Temperature (°C)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.CoherentAviaLX.THGTemperature">
            <summary>
            THG Temperature (°C)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.CoherentAviaLX.ModuleTemperature">
            <summary>
            Module Temperature (°C)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.CoherentAviaLX.Rod1Temperature">
            <summary>
            ROD1 Temperature (°C)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.CoherentAviaLX.NextCrystalWarningHrs">
            <summary>
            Next Crystal Warning (Hrs)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.CoherentAviaLX.Diode1OperationHrs">
            <summary>
            Diode LifeTime (Hrs)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.CoherentAviaLX.SystemHeadOperationHrs">
            <summary>
            System Head LifeTime (Hrs)
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Laser.CoherentAviaLX.LaserStates">
            <summary>
            Laser states
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.CoherentAviaLX.State">
            <summary>
            Laser state
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.CoherentAviaLX.FaultCode">
            <summary>
            Fault codes
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Laser.CoherentAviaLX.FaultCodes">
            <summary>
            Fault codes
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.CoherentAviaLX.DiodeCurrent">
            <summary>
            Diode current (%)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.CoherentAviaLX.IsDiodeOn">
            <summary>
            Diode On/Off status
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.CoherentAviaLX.IsQSwitchOn">
            <summary>
            Q switch On/Off status
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Laser.CoherentAviaLX.TriggerModes">
            <summary>
            Trigger modes
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.CoherentAviaLX.TrgMode">
            <summary>
            Trigget mode
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Laser.CoherentAviaLX.PulseModes">
            <summary>
            Pulse modes
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.CoherentAviaLX.PsMode">
            <summary>
            Pulse mode
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Laser.CoherentAviaLX.PulseControlModes">
            <summary>
            Pulse control modes
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.CoherentAviaLX.PsControlMode">
            <summary>
            Pulse control mode
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.CoherentAviaLX.IsShutterOpen">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.CoherentAviaLX.IsTimedOut">
            <summary>
            Communication timed out or not
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.CoherentAviaLX.IsProtocolError">
            <summary>
            Communication protocol error or not
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.CoherentAviaLX.ComPort">
            <summary>
            COM port no
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.CoherentAviaLX.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.CoherentAviaLX.#ctor(System.Int32,System.String,System.Int32,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="index">Identifier</param>
            <param name="name">Name</param>
            <param name="comPort">COM port</param>
            <param name="maxPowerWatt">Max power (W)</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.CoherentAviaLX.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.CoherentAviaLX.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.CoherentAviaLX.Initialize">
            <inheritdoc/>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.CoherentAviaLX.CRLF">
            <summary>
            Terminator for send
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.CoherentAviaLX.LF">
            <summary>
            Terminator for receive
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.CoherentAviaLX.step">
            <summary>
            Cycle step counts within worker thread
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.CoherentAviaLX.OnThread">
            <summary>
            Worker thread
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.CoherentAviaLX.Send(System.String)">
            <summary>
            Send string data by <c>SerialPort</c>
            </summary>
            <param name="data">Data</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.CoherentAviaLX.ReceiveParse(System.IO.Ports.SerialPort,System.String@)">
            <summary>
            Receive data from <c>SerialPort</c>
            </summary>
            <param name="serialPort"><c>SerialPort</c> instance</param>
            <param name="data">Return and converted string data</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.CoherentAviaLX.QueryUser">
            <summary>
            Query by user override or implemented function
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.CoherentAviaLX.CmdUser">
            <summary>
            User can override and implement this function for addition communication
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.CoherentAviaLX.CheckErrors">
            <summary>
            Check <c>IsError</c> status
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.CoherentAviaLX.CheckReady">
            <summary>
            Check <c>IsReady</c> status
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.CoherentAviaLX.CheckBusy">
            <summary>
            Check <c>IsBusy</c> status
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.CoherentAviaLX.CtlAbort">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.CoherentAviaLX.CtlReset">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.CoherentAviaLX.CtlPower(System.Double,System.String)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.CoherentAviaLX.ListBegin">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.CoherentAviaLX.ListEnd">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.CoherentAviaLX.ListPower(System.Double,System.String)">
            <inheritdoc/>  
        </member>
        <member name="T:SpiralLab.Sirius2.Laser.CoherentDiamondCSeries">
            <summary>
            Coherent Diamond C-Series
            </summary>
            <remarks>
            Vary pulse width(cycle) between <c>MinDutyCycle</c> and <c>MaxDutyCycle</c>. <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.CoherentDiamondCSeries.LaserType">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.CoherentDiamondCSeries.PowerMap">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.CoherentDiamondCSeries.MinDutyCycle">
            <summary>
            Min duty cycle (%)
            <para>Default: 1</para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.CoherentDiamondCSeries.MaxDutyCycle">
            <summary>
            Max duty cycle (%)
            <para>Default: 98</para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.CoherentDiamondCSeries.IsLaserOk">
            <summary>
            PIN3 Laser OK
            <para>Head temp below 80C and SWR, Temp and Volt are should be ok</para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.CoherentDiamondCSeries.IsTemperatureOk">
            <summary>
            PIN4 Temperature OK
            <para>Head temp below 60C</para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.CoherentDiamondCSeries.IsVoltageOk">
            <summary>
            PIN5 Voltage OK
            <para>DC voltage is in-range 43~55VDC</para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.CoherentDiamondCSeries.IsControlEnable">
            <summary>
            PIN7 Control Enable
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.CoherentDiamondCSeries.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.CoherentDiamondCSeries.#ctor(System.Int32,System.String,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="index">Identifier</param>
            <param name="name">Name</param>
            <param name="maxPowerWatt">Max power (W)</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.CoherentDiamondCSeries.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.CoherentDiamondCSeries.Dispose(System.Boolean)">
            <summary>
            Dispose internal resource
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.CoherentDiamondCSeries.Initialize">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.CoherentDiamondCSeries.OnThread">
            <summary>
            Worker thread
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.CoherentDiamondCSeries.CheckErrors">
            <summary>
            Check <c>IsError</c> status
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.CoherentDiamondCSeries.CheckReady">
            <summary>
            Check <c>IsReady</c> status
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.CoherentDiamondCSeries.CheckBusy">
            <summary>
            Check <c>IsBusy</c> status
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.CoherentDiamondCSeries.CtlAbort">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.CoherentDiamondCSeries.CtlReset">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.CoherentDiamondCSeries.CtlPower(System.Double,System.String)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.CoherentDiamondCSeries.ListBegin">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.CoherentDiamondCSeries.ListEnd">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.CoherentDiamondCSeries.ListPower(System.Double,System.String)">
            <inheritdoc/>  
        </member>
        <member name="T:SpiralLab.Sirius2.Laser.IPGYLPN">
            <summary>
            IPG YLP N 
            </summary>
            <remarks>
            Vary ouput analog voltage between <c>MinVoltage</c> and <c>MaxVoltage</c>. <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPN.LaserType">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPN.PowerMap">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPN.Serial">
            <summary>
            SerialPort instance
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Laser.IPGYLPN.DeviceStatus">
            <summary>
            Device status
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.IPGYLPN.DeviceStatus.ToString">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPN.StatusBit">
            <summary>
            DeviceStatus.Bit
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Laser.IPGYLPN.OperationMode">
            <summary>
            Operation Mode
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPN.OperationMode.Bit.EmissionModulationControlByDB25">
            <summary>
            RS-232 only
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPN.OperationMode.Bit.HighContrast">
            <summary>
            always 1
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPN.OpMode">
            <summary>
            OP Mode 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPN.OperationModeBit">
            <summary>
            OperationMode.Bit
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Laser.IPGYLPN.Options">
            <summary>
            Options
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPN.Options.Bit.ParallelIOControlInterface">
            <summary>
            always 1
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPN.Options.Bit.RS232ControlInterface">
            <summary>
            always 1
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPN.Options.Bit.HC">
            <summary>
            always 1
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPN.Option">
            <summary>
            Options
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPN.OptionBit">
            <summary>
            Options.Bit
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Laser.IPGYLPN.DeviceExtendedStatus">
            <summary>
            DeviceExtendedStatus
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPN.ExtendedStatus">
            <summary>
            Device Extended Status (16bits)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPN.ExtendedStatusBit">
            <summary>
            DeviceExtendedStatus.Bit
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Laser.IPGYLPN.ParallelIOInterface">
            <summary>
            ParallelIOInterface
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPN.DigitalInterface">
            <summary>
            Digital Interface DB-25 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPN.DigitalInterfaceBits">
            <summary>
            ParallelIOInterface.Bit
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPN.DeviceId">
            <summary>
            Devicd id
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPN.DeviceSN">
            <summary>
            Device serial no
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPN.FirmwareRev">
            <summary>
            Firmware revision
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPN.Vendor">
            <summary>
            Vendor code
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPN.DeviceTemperature">
            <summary>
            Device temperature
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPN.PulseRepRateMin">
            <summary>
            Frequency Min (KHz)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPN.PulseRepRateMax">
            <summary>
            Frequency Max (KHz)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPN.PulseRepRate">
            <summary>
            Frequency (KHz)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPN.IsTimedOut">
            <summary>
            Communication timed out or not
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPN.IsProtocolError">
            <summary>
            Communication protocol error or not
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPN.OperatingPower">
            <summary>
            Operating Power (%)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPN.OperatingPowerWatt">
            <summary>
            Operating Power (W)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPN.IsGuideOn">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPN.MinVoltage">
            <summary>
            Min Analog Voltage (V)
            <para>Default: 0</para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPN.MaxVoltage">
            <summary>
            Max Analog Voltage (V)
            <para>Default: 10</para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPN.AnalogPortNo">
            <summary>
            Port for Analog 
            <para>Default: 1</para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPN.ComPort">
            <summary>
            COM port no
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.IPGYLPN.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.IPGYLPN.#ctor(System.Int32,System.String,System.Int32,System.Double,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="index">Identifier</param>
            <param name="name">Name</param>
            <param name="comPort">COM port</param>
            <param name="maxPowerWatt">Max power (W)</param>
            <param name="analogPort">RTC analog port no (1 or 2)</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.IPGYLPN.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.IPGYLPN.Dispose(System.Boolean)">
            <summary>
            Dispose internal resource
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.IPGYLPN.Initialize">
            <inheritdoc/>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPN.PREAMBLE">
            <summary>
            Preamble
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPN.CR">
            <summary>
            Terminator
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Laser.IPGYLPN.Queries">
            <summary>
            Queries
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPN.Queries.DeviceStatus">
            <summary>
            32 bit
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPN.Queries.DeviceTemperature">
            <summary>
            C
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPN.Queries.ParallelIOInterfaceStatus">
            <summary>
            32 bit
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPN.Queries.Extended_Status">
            <summary>
            32 bit
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPN.Queries.BR_Counter">
            <summary>
            read back reflection counter 
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPN.Queries.Session_BR_Counter">
            <summary>
            read back reflection counter for the current session. the session starts with supplying voltage to the laser module
            32 bit
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPN.Queries.Nominal_Average_Power">
            <summary>
            read nomina average power of the laser in [W]. return value is double in [W]
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPN.Queries.NorminalPRR">
            <summary>
            double .1 KHz
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPN.Queries.Nominal_Pulse_Energy">
            <summary>
            read nominal pulse energy of the laser [mJ]
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPN.Queries.Nominal_Peak_Power">
            <summary>
            read nominal peak power of the laser in [kW]
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPN.Queries.Pulse_Repetition_Rate_Range">
            <summary>
            read pulse repetition rates range. return value is two doubles separated by a semicolon. min and max in [KHz]
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPN.Queries.MainSupplyVoltage">
            <summary>
            V
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPN.Queries.HouseKeepingSupplyVoltage">
            <summary>
            V
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPN.Queries.Operating_Mode">
            <summary>
            16 bit
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPN.Queries.Installed_Options">
            <summary>
            16 bit
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPN.Queries.Start_Opertating_Mode">
            <summary>
            16 bit
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPN.Queries.PRR">
            <summary>
            double .1 KHz
            Read back operating pulse repetition rate in [kHz] set by command 28
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPN.Queries.OperatingWatt">
            <summary>
            double .1 W
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPN.Queries.OperatingPower">
            <summary>
             double .1 %
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPN.Queries.OperatingPulseEnergy">
            <summary>
            double .2 mJ
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPN.Queries.PRRMonitor">
            <summary>
            double .1 KHz
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPN.Queries.MinMaxPRR">
            <summary>
            Read back minimum and maximum operating PRRs in extended range, Extended PRR should be activated, otherwise answer is N
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPN.Queries.TemperatureRange">
            <summary>
            double .1 C
            Example response: 58;0.0;50.0
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPN.Queries.AlarmCounters">
            <summary>
            Read counter for alarms
            The command parameter specifies the counter that will be read
            1 – alarm counter of the MAIN power supply alarm
            2 – alarm counter of the HK alarm
            3 – alarm counter of the System alarm
            4 – alarm counter of the Temperature alarm
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Laser.IPGYLPN.Commands">
            <summary>
            Commands
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPN.Commands.Operating_Mode">
            <summary>
            /16 bit. set active control interface operating mode
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPN.Commands.Start_Operating_Mode">
            <summary>
            16 bit
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPN.Commands.PRR">
            <summary>
            double .1 KHz
            set operating pulse repetition rate in [KHz]
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPN.Commands.Laser_Emission_On">
            <summary>
            switch ON laser emission
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPN.Commands.Laser_Emission_Off">
            <summary>
            switch OFF laser emission
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPN.Commands.Operating_Power">
            <summary>
            double .1 %
            set operating power in [%]. 0~100 (resolution 255 levels)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPN.Commands.Guide_Laser_On">
            <summary>
            switch ON guide laser
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPN.Commands.Guide_Laser_Off">
            <summary>
            switch OFF guide laser
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPN.Commands.EE_On">
            <summary>
            Switch ON Emission Enable
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPN.Commands.EE_Off">
            <summary>
            Switch Off Emission Enable
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPN.Commands.Reset_Alarms">
            <summary>
            reset alarms
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPN.step">
            <summary>
            Cycle step counts within worker thread
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.IPGYLPN.OnThread">
            <summary>
            Worker thread
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.IPGYLPN.Send(System.String)">
            <summary>
            Send string data by <c>SerialPort</c>
            </summary>
            <param name="data">Data</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.IPGYLPN.ReceiveParse(System.IO.Ports.SerialPort,System.String@,System.String@)">
            <summary>
            Receive data from <c>SerialPort</c>
            </summary>
            <param name="serialPort"><c>SerialPort</c> instance</param>
            <param name="data1">1st return and converted integer data</param>
            <param name="data2">2nd return and converted integer data</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.IPGYLPN.QueryUser">
            <summary>
            Query by user override or implemented function
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.IPGYLPN.CmdUser">
            <summary>
            User can override and implement this function for addition communication
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.IPGYLPN.CheckErrors">
            <summary>
            Check <c>IsError</c> status
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.IPGYLPN.CheckReady">
            <summary>
            Check <c>IsReady</c> status
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.IPGYLPN.CheckBusy">
            <summary>
            Check <c>IsBusy</c> status
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.IPGYLPN.CtlAbort">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.IPGYLPN.CtlReset">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.IPGYLPN.CtlGuide(System.Boolean)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.IPGYLPN.CtlPower(System.Double,System.String)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.IPGYLPN.ListBegin">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.IPGYLPN.ListEnd">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.IPGYLPN.ListPower(System.Double,System.String)">
            <inheritdoc/>  
        </member>
        <member name="T:SpiralLab.Sirius2.Laser.IPGYLPTypeD">
            <summary>
            IPG YLP Type D 
            </summary>
            <remarks>
            Vary <c>OperatingPower</c> value by custom(external) RS-232 communication. <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPTypeD.LaserType">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPTypeD.PowerMap">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPTypeD.Serial">
            <summary>
            SerialPort instance
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Laser.IPGYLPTypeD.DeviceStatus">
            <summary>
            DeviceStatus
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.IPGYLPTypeD.DeviceStatus.ToString">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPTypeD.StatusBit">
            <summary>
            DeviceStatus.Bit
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Laser.IPGYLPTypeD.DeviceExtendedStatus">
            <summary>
            DeviceExtendedStatus
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPTypeD.ExtendedStatus">
            <summary>
            Extended Status (16bits)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPTypeD.ExtendedStatusBit">
            <summary>
            DeviceExtendedStatus.Bit
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Laser.IPGYLPTypeD.DeviceDigitalInterface">
            <summary>
            DeviceDigitalInterface
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPTypeD.DigitalInterface">
            <summary>
            Device Digital DB-25 Interface 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPTypeD.DigitalInterfaceBits">
            <summary>
            DeviceDigitalInterface.Bit
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPTypeD.DeviceId">
            <summary>
            DeviceId
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPTypeD.DeviceSN">
            <summary>
            Serial no
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPTypeD.FirmwareRev">
            <summary>
            Firmware revision
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPTypeD.Vendor">
            <summary>
            Vendor code
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPTypeD.DeviceTemperature">
            <summary>
            Device temperature (°C)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPTypeD.PulseRepRateMin">
            <summary>
            Frequency Min (KHz)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPTypeD.PulseRepRateMax">
            <summary>
            Frequency Max (KHz)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPTypeD.PulseRepRate">
            <summary>
            Frequency (KHz)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPTypeD.IsTimedOut">
            <summary>
            Communication timed out or not
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPTypeD.IsProtocolError">
            <summary>
            Communication protocol error or not
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPTypeD.OperatingPower">
            <summary>
            Operating Power (%)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPTypeD.OperatingPowerWatt">
            <summary>
            Operating Power (W)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPTypeD.IsGuideOn">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPTypeD.ComPort">
            <summary>
            COM port no
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.IPGYLPTypeD.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.IPGYLPTypeD.#ctor(System.Int32,System.String,System.Int32,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="index">Identifier</param>
            <param name="name">Name</param>
            <param name="comPort">COM port</param>
            <param name="maxPowerWatt">Max power (W)</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.IPGYLPTypeD.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.IPGYLPTypeD.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.IPGYLPTypeD.Initialize">
            <inheritdoc/>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPTypeD.PREAMBLE">
            <summary>
            Preamble
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPTypeD.CR">
            <summary>
            Terminator
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Laser.IPGYLPTypeD.Queries">
            <summary>
            Queries
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPTypeD.Queries.Device_Status">
            <summary>
            32 bit
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPTypeD.Queries.Device_Temp">
            <summary>
            C
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPTypeD.Queries.Digital_Interface_Status">
            <summary>
            32 bit
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPTypeD.Queries.Extended_Status">
            <summary>
            32 bit
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPTypeD.Queries.BR_Counter">
            <summary>
            read back reflection counter 
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPTypeD.Queries.Session_BR_Counter">
            <summary>
            read back reflection counter for the current session. the session starts with supplying voltage to the laser module
            32 bit
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPTypeD.Queries.Nominal_Average_Power">
            <summary>
            read nomina average power of the laser in [W]. return value is double in [W]
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPTypeD.Queries.Nominal_Pulse_Duration">
            <summary>
            read nominal pulse duration of the laser [ns]
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPTypeD.Queries.Nominal_Pulse_Energy">
            <summary>
            read nominal pulse energy of the laser [mJ]
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPTypeD.Queries.Nominal_Peak_Power">
            <summary>
            read nominal peak power of the laser in [kW]
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPTypeD.Queries.Pulse_Repetion_Rate_Range">
            <summary>
            read pulse repetition rates range. return value is two doubles separated by a semicolon. min and max in [KHz]
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPTypeD.Queries.Head_Temp">
            <summary>
            C
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPTypeD.Queries.Main_24V_Supply">
            <summary>
            V
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPTypeD.Queries.HouseKeeping_24V_Supply">
            <summary>
            V
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPTypeD.Queries.Operating_Mode">
            <summary>
            16 bit
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPTypeD.Queries.Installed_Options">
            <summary>
            16 bit
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPTypeD.Queries.Start_Opertating_Mode">
            <summary>
            16 bit
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPTypeD.Queries.Pulse_Repetion_Rate">
            <summary>
            KHz
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPTypeD.Queries.Operating_Power_Watt">
            <summary>
            W
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPTypeD.Queries.Operating_Power_Percentage">
            <summary>
            %
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPTypeD.Queries.Operating_Pulse_Energy">
            <summary>
            mJ
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPTypeD.Queries.Pulse_Repetion_Rate_Monitor">
            <summary>
            KHz
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Laser.IPGYLPTypeD.Commands">
            <summary>
            Commands
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPTypeD.Commands.Operating_Mode">
            <summary>
            /16 bit. set active control interface operating mode
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPTypeD.Commands.Start_Operating_Mode">
            <summary>
            16 bit
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPTypeD.Commands.Pulse_Repetion_Rate">
            <summary>
            set operating pulse repetition rate in [KHz]
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPTypeD.Commands.Laser_Emission_On">
            <summary>
            switch ON laser emission
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPTypeD.Commands.Laser_Emission_Off">
            <summary>
            switch OFF laser emission
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPTypeD.Commands.Operating_Power">
            <summary>
            set operating power in [%]. 0~100 (resolution 255 levels)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPTypeD.Commands.Guide_Laser_On">
            <summary>
            switch ON guide laser
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPTypeD.Commands.Guide_Laser_Off">
            <summary>
            switch OFF guide laser
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPTypeD.Commands.Reset_Alarms">
            <summary>
            reset alarms
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPTypeD.step">
            <summary>
            Cycle step counts within worker thread
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.IPGYLPTypeD.OnThread">
            <summary>
            Worker thread
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.IPGYLPTypeD.Send(System.String)">
            <summary>
            Send string data by <c>SerialPort</c>
            </summary>
            <param name="data">Data</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.IPGYLPTypeD.ReceiveParse(System.IO.Ports.SerialPort,System.String@,System.String@)">
            <summary>
            Receive data from <c>SerialPort</c>
            </summary>
            <param name="serialPort"><c>SerialPort</c> instance</param>
            <param name="data1">1st return and converted integer data</param>
            <param name="data2">2nd return and converted integer data</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.IPGYLPTypeD.QueryUser">
            <summary>
            Query by user override or implemented function
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.IPGYLPTypeD.CmdUser">
            <summary>
            User can override and implement this function for addition communication
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.IPGYLPTypeD.CheckErrors">
            <summary>
            Check <c>IsError</c> status
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.IPGYLPTypeD.CheckReady">
            <summary>
            Check <c>IsReady</c> status
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.IPGYLPTypeD.CheckBusy">
            <summary>
            Check <c>IsBusy</c> status
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.IPGYLPTypeD.CtlAbort">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.IPGYLPTypeD.CtlReset">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.IPGYLPTypeD.CtlGuide(System.Boolean)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.IPGYLPTypeD.CtlPower(System.Double,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.IPGYLPTypeD.ListBegin">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.IPGYLPTypeD.ListEnd">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.IPGYLPTypeD.ListPower(System.Double,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiralLab.Sirius2.Laser.IPGYLPTypeE">
            <summary>
            IPG YLP Type E 
            </summary>
            <remarks>
            Vary <c>OperatingPower</c> value by custom(external) RS-232 communication. <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPTypeE.LaserType">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPTypeE.PowerMap">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPTypeE.Serial">
            <summary>
            SerialPort instance
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Laser.IPGYLPTypeE.DeviceStatus">
            <summary>
            DeviceStatus
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.IPGYLPTypeE.DeviceStatus.ToString">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPTypeE.StatusBit">
            <summary>
            DeviceStatus.Bit
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Laser.IPGYLPTypeE.OperationMode">
            <summary>
            OperationMode
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPTypeE.OperationMode.Bit.PowerControlD0D7ByDB25">
            <summary>
            1 : DB-25
            0 : RS-232
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPTypeE.OperationMode.Bit.AuxOOffControlByDB25">
            <summary>
            1 : DB-25
            0 : RS-232
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPTypeE.OperationMode.Bit.GuideLaserControlByDB25">
            <summary>
            1 : DB-25
            0 : RS-232
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPTypeE.OperationMode.Bit.EmissionModulationControlByDB25">
            <summary>
            1 : DB-25
            0 : RS-232
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPTypeE.OperationModeBit">
            <summary>
            OperationMode.Bit
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Laser.IPGYLPTypeE.Options">
            <summary>
            Options
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPTypeE.OptionBit">
            <summary>
            Options.Bit
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Laser.IPGYLPTypeE.DeviceExtendedStatus">
            <summary>
            DeviceExtendedStatus
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPTypeE.ExtendedStatus">
            <summary>
            Device Extended Status 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPTypeE.ExtendedStatusBit">
            <summary>
            DeviceExtendedStatus.Bit
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Laser.IPGYLPTypeE.DeviceDigitalInterface">
            <summary>
            DeviceDigitalInterface
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPTypeE.DigitalInterfaceBits">
            <summary>
            DeviceDigitalInterface.Bit
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPTypeE.DeviceId">
            <summary>
            Device ID
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPTypeE.DeviceSN">
            <summary>
            Serial No
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPTypeE.FirmwareRev">
            <summary>
            Firware revision
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPTypeE.Vendor">
            <summary>
            Vendor code
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPTypeE.DeviceTemperature">
            <summary>
            Device temperature
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPTypeE.PulseRepRateMin">
            <summary>
            Frequency Min (KHz
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPTypeE.PulseRepRateMax">
            <summary>
            Frequency Max (KHz)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPTypeE.PulseRepRate">
            <summary>
            Frequency (KHz)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPTypeE.IsTimedOut">
            <summary>
            Communication timed out or not
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPTypeE.IsProtocolError">
            <summary>
            Communication protocol error or not
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPTypeE.OperatingPower">
            <summary>
            Operating Power (%)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPTypeE.OperatingPowerWatt">
            <summary>
            Operating Power (W)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPTypeE.IsGuideOn">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPTypeE.ComPort">
            <summary>
            COM port no
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.IPGYLPTypeE.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.IPGYLPTypeE.#ctor(System.Int32,System.String,System.Int32,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="index">Identifier</param>
            <param name="name">Name</param>
            <param name="comPort">COM port</param>
            <param name="maxPowerWatt">Max power (W)</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.IPGYLPTypeE.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.IPGYLPTypeE.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.IPGYLPTypeE.Initialize">
            <inheritdoc/>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPTypeE.PREAMBLE">
            <summary>
            Preamble
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPTypeE.CR">
            <summary>
            Terminator
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Laser.IPGYLPTypeE.Queries">
            <summary>
            Queries
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPTypeE.Queries.Device_Status">
            <summary>
            32 bit
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPTypeE.Queries.Device_Temp">
            <summary>
            C
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPTypeE.Queries.Digital_Interface_Status">
            <summary>
            32 bit
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPTypeE.Queries.Extended_Status">
            <summary>
            32 bit
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPTypeE.Queries.BR_Counter">
            <summary>
            read back reflection counter 
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPTypeE.Queries.Session_BR_Counter">
            <summary>
            read back reflection counter for the current session. the session starts with supplying voltage to the laser module
            32 bit
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPTypeE.Queries.Nominal_Average_Power">
            <summary>
            read nomina average power of the laser in [W]. return value is double in [W]
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPTypeE.Queries.Nominal_Pulse_Duration">
            <summary>
            read nominal pulse duration of the laser [ns]
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPTypeE.Queries.Nominal_Pulse_Energy">
            <summary>
            read nominal pulse energy of the laser [mJ]
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPTypeE.Queries.Nominal_Peak_Power">
            <summary>
            read nominal peak power of the laser in [kW]
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPTypeE.Queries.Pulse_Repetion_Rate_Range">
            <summary>
            read pulse repetition rates range. return value is two doubles separated by a semicolon. min and max in [KHz]
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPTypeE.Queries.Head_Temp">
            <summary>
            C
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPTypeE.Queries.Main_24V_Supply">
            <summary>
            V
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPTypeE.Queries.HouseKeeping_24V_Supply">
            <summary>
            V
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPTypeE.Queries.Operating_Mode">
            <summary>
            16 bit
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPTypeE.Queries.Installed_Options">
            <summary>
            16 bit
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPTypeE.Queries.Start_Opertating_Mode">
            <summary>
            16 bit
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPTypeE.Queries.Pulse_Repetion_Rate">
            <summary>
            KHz
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPTypeE.Queries.Operating_Power_Watt">
            <summary>
            W
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPTypeE.Queries.Operating_Power_Percentage">
            <summary>
            %
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPTypeE.Queries.Operating_Pulse_Energy">
            <summary>
            mJ
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPTypeE.Queries.Pulse_Repetion_Rate_Monitor">
            <summary>
            KHz
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Laser.IPGYLPTypeE.Commands">
            <summary>
            Commands
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPTypeE.Commands.Operating_Mode">
            <summary>
            /16 bit. set active control interface operating mode
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPTypeE.Commands.Start_Operating_Mode">
            <summary>
            16 bit
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPTypeE.Commands.Pulse_Repetion_Rate">
            <summary>
            set operating pulse repetition rate in [KHz]
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPTypeE.Commands.Laser_Emission_On">
            <summary>
            switch ON laser emission
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPTypeE.Commands.Laser_Emission_Off">
            <summary>
            switch OFF laser emission
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPTypeE.Commands.Operating_Power">
            <summary>
            set operating power in [%]. 0~100 (resolution 255 levels)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPTypeE.Commands.Guide_Laser_On">
            <summary>
            switch ON guide laser
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPTypeE.Commands.Guide_Laser_Off">
            <summary>
            switch OFF guide laser
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPTypeE.Commands.Reset_Alarms">
            <summary>
            reset alarms
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPTypeE.step">
            <summary>
            Cycle step counts within worker thread
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.IPGYLPTypeE.OnThread">
            <summary>
            Worker thread
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.IPGYLPTypeE.Send(System.String)">
            <summary>
            Send string data by <c>SerialPort</c>
            </summary>
            <param name="data">Data</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.IPGYLPTypeE.ReceiveParse(System.IO.Ports.SerialPort,System.String@,System.String@)">
            <summary>
            Receive data from <c>SerialPort</c>
            </summary>
            <param name="serialPort"><c>SerialPort</c> instance</param>
            <param name="data1">1st return and converted integer data</param>
            <param name="data2">2nd return and converted integer data</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.IPGYLPTypeE.QueryUser">
            <summary>
            Query by user override or implemented function
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.IPGYLPTypeE.CmdUser">
            <summary>
            User can override and implement this function for addition communication
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.IPGYLPTypeE.CheckErrors">
            <summary>
            Check <c>IsError</c> status
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.IPGYLPTypeE.CheckReady">
            <summary>
            Check <c>IsReady</c> status
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.IPGYLPTypeE.CheckBusy">
            <summary>
            Check <c>IsBusy</c> status
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.IPGYLPTypeE.CtlAbort">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.IPGYLPTypeE.CtlReset">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.IPGYLPTypeE.CtlGuide(System.Boolean)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.IPGYLPTypeE.CtlPower(System.Double,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.IPGYLPTypeE.ListBegin">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.IPGYLPTypeE.ListEnd">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.IPGYLPTypeE.ListPower(System.Double,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiralLab.Sirius2.Laser.IPGYLPULPN">
            <summary>
            IPG YLP ULP N
            </summary>
            <remarks>
            Vary <c>SetPoint</c> value by custom(external) RS-232 communication. <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPULPN.LaserType">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPULPN.PowerMap">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPULPN.Serial">
            <summary>
            SerialPort instance
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPULPN.IsTimedOut">
            <summary>
            Communication timed out or not
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPULPN.IsProtocolError">
            <summary>
            Communication protocol error or not
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Laser.IPGYLPULPN.DeviceStatus">
            <summary>
            DeviceStatus
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPULPN.DeviceStatus.Bit.EmissionOn">
            <summary>
            0 : Emission Off
            1 : Emission On
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPULPN.DeviceStatus.Bit.ExternalTrigger">
            <summary>
            0 : Internal Trigger 
            1 : External Trigger
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPULPN.DeviceStatus.Bit.WarningUp">
            <summary>
            0 : Laser is not warm up mode
            1 : Laser is in warm up mode
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPULPN.DeviceStatus.Bit.ModuleStartUpComplete">
            <summary>
            0 : Module is in startup mode
            1 : Module startup is complete
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPULPN.DeviceStatus.Bit.EnabledBoosterPowerSupply">
            <summary>
            0 : Booster power supply is disabled
            1 : Booster power supply is enabled
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPULPN.DeviceStatus.Bit.InternalModulation">
            <summary>
            0 : External modulation
            1 : Internal modulation
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPULPN.DeviceStatus.Bit.InternalAanalogControl">
            <summary>
            0 : External analog control is selected
            1 : Internal analog control is selected
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPULPN.DeviceStatus.Bit.PowerSupply24VOutOfRange">
            <summary>
            0: OK
            1 : 24V PS Out of range
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPULPN.DeviceStatus.Bit.LaserIsOverheated">
            <summary>
            0 : laser Temp ok
            1 : laser Overheated
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPULPN.DeviceStatus.Bit.HighBackReflectionLevel">
            <summary>
            0 : backreflection level is OK
            1 : high backreflection level detected
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPULPN.DeviceStatus.Bit.HeadIsOverheated">
            <summary>
            0 : head temperature is OK
            1 : head overheated
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.IPGYLPULPN.DeviceStatus.ToString">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPULPN.StatusBit">
            <summary>
            DeviceStatus.Bit
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPULPN.FirmwareRev">
            <summary>
            Firmware Revision
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPULPN.LowerDeckTemperature">
            <summary>
            Lower Deck Temperature
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPULPN.CaseTemperature">
            <summary>
            Case Temperature
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPULPN.HeadTemperature">
            <summary>
            Head Temperature
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPULPN.BackReflection">
            <summary>
            Back Reflection Level (%)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPULPN.SetPoint">
            <summary>
            Set Point (%)
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Laser.IPGYLPULPN.TriggerModes">
            <summary>
            Trigger modes
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPULPN.TriggerModes.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPULPN.TriggerModes.External">
            <summary>
            External 
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPULPN.TriggerModes.Internal">
            <summary>
            Internal 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPULPN.TriggerMode">
            <summary>
            Trigger Mode
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPULPN.PulseRepRateInt">
            <summary>
            Frequency (Internal) (Hz
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPULPN.PulseRepRateExt">
            <summary>
            Frequency (External) (Hz)
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Laser.IPGYLPULPN.ModulationModes">
            <summary>
            Modulation modes
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPULPN.ModulationModes.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPULPN.ModulationModes.External">
            <summary>
            External 
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPULPN.ModulationModes.Internal">
            <summary>
            Internal 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPULPN.ModulationMode">
            <summary>
            Modulation mode
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Laser.IPGYLPULPN.PowerControlModes">
            <summary>
            PowerControl modes
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPULPN.PowerControlModes.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPULPN.PowerControlModes.External">
            <summary>
            External 
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPULPN.PowerControlModes.Internal">
            <summary>
            Internal 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPULPN.PowerControlMode">
            <summary>
            PowerControl mode
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Laser.IPGYLPULPN.EmissionControlModes">
            <summary>
            Emission control modes
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPULPN.EmissionControlModes.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPULPN.EmissionControlModes.External">
            <summary>
            External 
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPULPN.EmissionControlModes.Internal">
            <summary>
            Internal 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPULPN.EmissionControlMode">
            <summary>
            Emission control mode
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPULPN.IsEmissionOn">
            <summary>
            Emission On/Off
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPULPN.IsGuideOn">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.IPGYLPULPN.ComPort">
            <summary>
            COM port no
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.IPGYLPULPN.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.IPGYLPULPN.#ctor(System.Int32,System.String,System.Int32,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="index">Identifier</param>
            <param name="name">Name</param>
            <param name="comPort">COM port</param>
            <param name="maxPowerWatt">Max power (W)</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.IPGYLPULPN.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.IPGYLPULPN.Dispose(System.Boolean)">
            <summary>
            Dispose internal resource
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.IPGYLPULPN.Initialize">
            <inheritdoc/>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPULPN.CR">
            <summary>
            Terminator
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.IPGYLPULPN.step">
            <summary>
            Cycle step counts within worker thread
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.IPGYLPULPN.OnThread">
            <summary>
            Worker thread
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.IPGYLPULPN.Send(System.String)">
            <summary>
            Send string data by <c>SerialPort</c>
            </summary>
            <param name="data">Data</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.IPGYLPULPN.ReceiveParse(System.IO.Ports.SerialPort,System.String@,System.String@)">
            <summary>
            Receive data from <c>SerialPort</c>
            </summary>
            <param name="serialPort"><c>SerialPort</c> instance</param>
            <param name="data1">1st return and converted integer data</param>
            <param name="data2">2nd return and converted integer data</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.IPGYLPULPN.QueryUser">
            <summary>
            Query by user override or implemented function
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.IPGYLPULPN.CmdUser">
            <summary>
            User can override and implement this function for addition communication
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.IPGYLPULPN.CheckErrors">
            <summary>
            Check <c>IsError</c> status
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.IPGYLPULPN.CheckReady">
            <summary>
            Check <c>IsReady</c> status
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.IPGYLPULPN.CheckBusy">
            <summary>
            Check <c>IsBusy</c> status
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.IPGYLPULPN.CtlAbort">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.IPGYLPULPN.CtlReset">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.IPGYLPULPN.CtlGuide(System.Boolean)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.IPGYLPULPN.CtlPower(System.Double,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.IPGYLPULPN.ListBegin">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.IPGYLPULPN.ListEnd">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.IPGYLPULPN.ListPower(System.Double,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiralLab.Sirius2.Laser.JPTTypeE">
            <summary>
            JPT Type E 
            </summary>
            <remarks>
            Vary <c>OperatingPower</c> value by custom(external) RS-232 communication. <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.JPTTypeE.LaserType">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.JPTTypeE.PowerMap">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.JPTTypeE.Serial">
            <summary>
            SerialPort instance
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.JPTTypeE.OperatingPower">
            <summary>
            Operating Power (%)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.JPTTypeE.PulseRepRate">
            <summary>
            Frequency (KHz)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.JPTTypeE.Simmer">
            <summary>
            Simmer (%)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.JPTTypeE.IsGUIPAEnable">
            <summary>
            GUI PA Enable/Disable
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.JPTTypeE.IsGUIMOEnable">
            <summary>
            GUI MO Enable/Disable
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.JPTTypeE.IsGuideOn">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.JPTTypeE.IsTimedOut">
            <summary>
            Communication timed out or not
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.JPTTypeE.IsProtocolError">
            <summary>
            Communication protocol error or not
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Laser.JPTTypeE.JPTStatus">
            <summary>
            JPTStatus
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.JPTTypeE.JPTStatus.ToString">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.JPTTypeE.StatusBit">
            <summary>
            JPTStatus.Bit
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Laser.JPTTypeE.JPTControlMode">
            <summary>
            JPTControlMode
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.JPTTypeE.JPTControlMode.ToString">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.JPTTypeE.ControlModeBit">
            <summary>
            JPTControlMode.Bit
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.JPTTypeE.CircuitTemperature">
            <summary>
            Circuit Temperature
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.JPTTypeE.LightPathTemperature">
            <summary>
            Light Path Temperature
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.JPTTypeE.SeedSourceTECTemperature">
            <summary>
            Seed Source TEC Temperature
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.JPTTypeE.ClassIICurrent">
            <summary>
            Class II current (A)
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Laser.JPTTypeE.JPTAlarm">
            <summary>
            JPTAlarm
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.JPTTypeE.JPTAlarm.ToString">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.JPTTypeE.AlarmBit">
            <summary>
            JPTAlarm.Bit
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.JPTTypeE.ComPort">
            <summary>
            COM port no
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.JPTTypeE.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.JPTTypeE.#ctor(System.Int32,System.String,System.Int32,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="index">Identifier</param>
            <param name="name">Name</param>
            <param name="comPort">COM port</param>
            <param name="maxPowerWatt">Max power (W)</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.JPTTypeE.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.JPTTypeE.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.JPTTypeE.Initialize">
            <inheritdoc/>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.JPTTypeE.PREAMBLE">
            <summary>
            Preamble
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.JPTTypeE.POSTAMBLE">
            <summary>
            PostAmble
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Laser.JPTTypeE.Queries">
            <summary>
            Queries
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Laser.JPTTypeE.Commands">
            <summary>
            Commands
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.JPTTypeE.step">
            <summary>
            Cycle step counts within worker thread
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.JPTTypeE.OnThread">
            <summary>
            Worker thread
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.JPTTypeE.Send(System.Byte[])">
            <summary>
            Send string data by <c>SerialPort</c>
            </summary>
            <param name="data">Array of bytes</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.JPTTypeE.QueryUser">
            <summary>
            Query by user override or implemented function
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.JPTTypeE.CmdUser">
            <summary>
            User can override and implement this function for addition communication
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.JPTTypeE.CheckErrors">
            <summary>
            Check <c>IsError</c> status
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.JPTTypeE.CheckReady">
            <summary>
            Check <c>IsReady</c> status
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.JPTTypeE.CheckBusy">
            <summary>
            Check <c>IsBusy</c> status
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.JPTTypeE.CtlAbort">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.JPTTypeE.CtlReset">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.JPTTypeE.CtlGuide(System.Boolean)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.JPTTypeE.CtlPower(System.Double,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.JPTTypeE.ListBegin">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.JPTTypeE.ListEnd">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.JPTTypeE.ListPower(System.Double,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiralLab.Sirius2.Laser.LaserBase">
            <summary>
            LaserBase
            </summary>
            <remarks>
            Inherited from <c>ILaser</c> &lt;- <c>LaserBase</c> <br/>
            </remarks>
        </member>
        <member name="E:SpiralLab.Sirius2.Laser.LaserBase.PropertyChanged">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.LaserBase.NotifyPropertyChanged(System.String)">
            <summary>
            Notify property value has changed
            </summary>
            <param name="propertyName">Property name</param>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.LaserBase.SyncRoot">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.LaserBase.Index">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.LaserBase.Name">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.LaserBase.LaserType">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.LaserBase.IsReady">
            <inheritdoc/>  
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.LaserBase.isReady">
            <summary>
            Ready status
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.LaserBase.IsBusy">
            <inheritdoc/>  
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.LaserBase.isBusy">
            <summary>
            Busy status
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.LaserBase.IsError">
            <inheritdoc/>  
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.LaserBase.isError">
            <summary>
            Error status
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.LaserBase.MaxPowerWatt">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.LaserBase.LastPowerWatt">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.LaserBase.IsPowerControl">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.LaserBase.PowerControlMethod">
            <inheritdoc/>  
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.LaserBase.powerControlMethod">
            <summary>
            Laser power control method: <c>PowerControlMethod</c> if <c>IsPowerControl</c> is <c>True</c>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.LaserBase.PowerControlDelayTime">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.LaserBase.IsGuideControl">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.LaserBase.Scanner">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.LaserBase.Tag">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.LaserBase.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.LaserBase.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.LaserBase.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.LaserBase.Dispose(System.Boolean)">
            <summary>
            Dispose internal resources
            </summary>
            <param name="disposing">Explicit dispose or not</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.LaserBase.Initialize">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.LaserBase.CtlAbort">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.LaserBase.CtlReset">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.LaserBase.ListBegin">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.LaserBase.ListEnd">
            <inheritdoc/>  
        </member>
        <member name="T:SpiralLab.Sirius2.Laser.LaserVirtual">
            <summary>
            Laser Virtual
            </summary>
            <remarks>
            Select <see cref="T:SpiralLab.Sirius2.Laser.PowerControlMethods">PowerControlMethods</see> to vary output laser power. <br/>
            Inherited from <c>ILaser</c> &lt;- <c>LaserBase</c> &lt;- <c>LaserVirtual</c> <br/>
            Inherited from <c>ILaserPowerControl</c> &lt;- <c>LaserVirtual</c> <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.LaserVirtual.LaserType">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.LaserVirtual.PowerMap">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.LaserVirtual.IsGuideOn">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.LaserVirtual.CustomNothing">
            <summary>
            Custom
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.LaserVirtual.MinFrequency">
            <summary>
            Min Frequency (Hz)
            <para>Default: 0</para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.LaserVirtual.MaxFrequency">
            <summary>
            Max Frequency (Hz)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.LaserVirtual.MinDutyCycle">
            <summary>
            Min Duty Cycle Duty (%)
            <para>Default: 1</para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.LaserVirtual.MaxDutyCycle">
            <summary>
            Max Duty Cycle Duty (%)
            <para>Default: 99</para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.LaserVirtual.MinVoltage">
            <summary>
            Min Analog Voltage (V)
            <para>Default: 0</para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.LaserVirtual.MaxVoltage">
            <summary>
            Max Analog Voltage (V)
            <para>Default: 10</para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.LaserVirtual.AnalogPortNo">
            <summary>
            Port for Analog 
            <para>Default: 1</para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.LaserVirtual.DigitalBitsPortNo">
            <summary>
            EXTENSION Port for DigitalBits
            <para>Default: 2(8bits) (1: 16bits)</para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.LaserVirtual.DigitalBitMinValue">
            <summary>
            Min bit value for DigitalBits
            <para>Default: 0</para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.LaserVirtual.DigitalBitMaxValue">
            <summary>
            Max bit value for DigitalBits
            <para>Default: 255(or 65535)</para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.LaserVirtual.Rs232StringFormat">
            <summary>
            Data format for RS-232 communication
            <para>string.Format</para>
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.LaserVirtual.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.LaserVirtual.#ctor(System.Int32,System.String,System.Double,SpiralLab.Sirius2.Laser.PowerControlMethods)">
            <summary>
            Constructor
            </summary>
            <param name="index">Identifier</param>
            <param name="name">Name</param>
            <param name="maxPowerWatt">Max power (W)</param>
            <param name="powerControlMethod"><c>PowerControlMethod</c></param>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.LaserVirtual.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.LaserVirtual.Dispose(System.Boolean)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.LaserVirtual.Initialize">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.LaserVirtual.CtlAbort">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.LaserVirtual.CtlReset">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.LaserVirtual.CtlGuide(System.Boolean)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.LaserVirtual.CtlPower(System.Double,System.String)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.LaserVirtual.ListBegin">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.LaserVirtual.ListEnd">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.LaserVirtual.ListPower(System.Double,System.String)">
            <inheritdoc/>  
        </member>
        <member name="T:SpiralLab.Sirius2.Laser.PhotonicsIndustryDX">
            <summary>
            Photonics Industry DX 
            </summary>
            <remarks>
            Vary <c>PECLevel</c> value by custom(external) RS-232 communication. <br/>
            Emulated Guide On/Off by Thermal Gate On/Off <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.PhotonicsIndustryDX.LaserType">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.PhotonicsIndustryDX.PowerMap">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.PhotonicsIndustryDX.Serial">
            <summary>
            SerialPort instance
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.PhotonicsIndustryDX.IsShutterOpen">
            <summary>
            Shutter Open/Close
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.PhotonicsIndustryDX.IsLDDEnable">
            <summary>
            LDD Status
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.PhotonicsIndustryDX.SetCurrentAmp">
            <summary>
            Set Diode Current (A)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.PhotonicsIndustryDX.MaxCurrentAmp">
            <summary>
            Max Diode Current (A)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.PhotonicsIndustryDX.ActualCurrentAmp">
            <summary>
            Actual Diode Current (A)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.PhotonicsIndustryDX.DiodeVoltage">
            <summary>
            Diode Voltage (V)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.PhotonicsIndustryDX.PulseRepRate">
            <summary>
            Pulse Rep. Rate (Hz)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.PhotonicsIndustryDX.PECLevel">
            <summary>
            PEC Level (%)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.PhotonicsIndustryDX.ActualTemperature">
            <summary>
            Actual Temp (C)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.PhotonicsIndustryDX.LDDHours">
            <summary>
            LDD (Hrs)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.PhotonicsIndustryDX.PowerWatt">
            <summary>
            Power Monitoring (W)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.PhotonicsIndustryDX.IsPRFSourceExt">
            <summary>
            PRF Source 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.PhotonicsIndustryDX.IsGateSourceExt">
            <summary>
            PRF Source 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.PhotonicsIndustryDX.IsPECSourceExt">
            <summary>
            PRF Source 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.PhotonicsIndustryDX.IsGuideOn">
            <summary>
            Emulated Guide On/Off by Thermal Gate and PEC Level
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.PhotonicsIndustryDX.IsTimedOut">
            <summary>
            Communication timed out or not
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.PhotonicsIndustryDX.IsProtocolError">
            <summary>
            Communication protocol error or not
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.PhotonicsIndustryDX.ComPort">
            <summary>
            COM port no
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Laser.PhotonicsIndustryDX.PIDXStatus">
            <summary>
            PIDXStatus
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.PhotonicsIndustryDX.PIDXStatus.ToString">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.PhotonicsIndustryDX.Status1Bit">
            <summary>
            PIDXStatus.Bit1
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.PhotonicsIndustryDX.Status2Bit">
            <summary>
            PIDXStatus.Bit2
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.PhotonicsIndustryDX.Status3Bit">
            <summary>
            PIDXStatus.Bit3
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.PhotonicsIndustryDX.Status4Bit">
            <summary>
            PIDXStatus.Bit4
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.PhotonicsIndustryDX.Status5Bit">
            <summary>
            PIDXStatus.Bit5
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.PhotonicsIndustryDX.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.PhotonicsIndustryDX.#ctor(System.Int32,System.String,System.Int32,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="index">Identifier</param>
            <param name="name">Name</param>
            <param name="comPort">COM port</param>
            <param name="maxPowerWatt">Max power (W)</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.PhotonicsIndustryDX.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.PhotonicsIndustryDX.Dispose(System.Boolean)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.PhotonicsIndustryDX.Initialize">
            <inheritdoc/>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.PhotonicsIndustryDX.CR">
            <summary>
            Terminator
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Laser.PhotonicsIndustryDX.Queries">
            <summary>
            Queries
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Laser.PhotonicsIndustryDX.Commands">
            <summary>
            Commands
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.PhotonicsIndustryDX.step">
            <summary>
            Cycle step counts within worker thread
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.PhotonicsIndustryDX.OnThread">
            <summary>
            Worker thread
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.PhotonicsIndustryDX.Send(System.Byte[])">
            <summary>
            Send string data by <c>SerialPort</c>
            </summary>
            <param name="data">Array of bytes</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.PhotonicsIndustryDX.ReceiveParse(System.IO.Ports.SerialPort,System.Byte[]@)">
            <summary>
            Receive data from  <c>SerialPort</c>
            </summary>
            <param name="serialPort"><c>SerialPort</c> instance</param>
            <param name="bytes">Returned array of bytes</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.PhotonicsIndustryDX.QueryUser">
            <summary>
            Query by user override or implemented function
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.PhotonicsIndustryDX.CmdUser">
            <summary>
            User can override and implement this function for addition communication
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.PhotonicsIndustryDX.CheckErrors">
            <summary>
            Check <c>IsError</c> status
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.PhotonicsIndustryDX.CheckReady">
            <summary>
            Check <c>IsReady</c> status
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.PhotonicsIndustryDX.CheckBusy">
            <summary>
            Check <c>IsBusy</c> status
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.PhotonicsIndustryDX.CtlAbort">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.PhotonicsIndustryDX.CtlReset">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.PhotonicsIndustryDX.CtlGuide(System.Boolean)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.PhotonicsIndustryDX.CtlPower(System.Double,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.PhotonicsIndustryDX.ListBegin">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.PhotonicsIndustryDX.ListEnd">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.PhotonicsIndustryDX.ListPower(System.Double,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiralLab.Sirius2.Laser.PhotonicsIndustryRGHAIO">
            <summary>
            Photonics Industry RGH AIO
             <para>Vary <c>PECLevel</c> value by custom(external) RS-232 communication</para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.PhotonicsIndustryRGHAIO.LaserType">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.PhotonicsIndustryRGHAIO.PowerMap">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.PhotonicsIndustryRGHAIO.Serial">
            <summary>
            SerialPort instance
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.PhotonicsIndustryRGHAIO.IsSeedShutterOpen">
            <summary>
            Shutter Open/Close (Seed)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.PhotonicsIndustryRGHAIO.IsAmp1ShutterOpen">
            <summary>
            Shutter Open/Close (Amp1)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.PhotonicsIndustryRGHAIO.IsSeedLDDEnable">
            <summary>
            Seed LDD Enable
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.PhotonicsIndustryRGHAIO.IsAmp1LDDEnable">
            <summary>
            Amp1 LDD Enable 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.PhotonicsIndustryRGHAIO.IsPODControlEnable">
            <summary>
            POD Control Enable
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.PhotonicsIndustryRGHAIO.PODCount">
            <summary>
            Pulse On Demand Count
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.PhotonicsIndustryRGHAIO.PODRate">
            <summary>
            Pulse On Demand Rate 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.PhotonicsIndustryRGHAIO.PODCycle">
            <summary>
            Pulse On Demand Cycle 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.PhotonicsIndustryRGHAIO.IsRGHBurstEnable">
            <summary>
            RGH Burst Enable
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.PhotonicsIndustryRGHAIO.RGHBurstPulsesA">
            <summary>
            RGH Burst Pulses Count (Group A)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.PhotonicsIndustryRGHAIO.RGHBurstPulsesB">
            <summary>
            RGH Burst Pulses Count (Group B)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.PhotonicsIndustryRGHAIO.RGHBurstDelay">
            <summary>
            RGH Burst Delay Time (ns)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.PhotonicsIndustryRGHAIO.RGHPCDelay">
            <summary>
            RGH PC Delay Time (ns)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.PhotonicsIndustryRGHAIO.IsAutoStartEnable">
            <summary>
            Auto Start Enable
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.PhotonicsIndustryRGHAIO.IsAutoShutDownEnable">
            <summary>
            Auto ShutDown Enable
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.PhotonicsIndustryRGHAIO.IsPCPulseEnable">
            <summary>
            PC Pulse Enable 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.PhotonicsIndustryRGHAIO.IsAOMPulseEnable">
            <summary>
            AOM Pulse Enable 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.PhotonicsIndustryRGHAIO.IsPODFiringMode">
            <summary>
            Pulse On Demand Firing Mode
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.PhotonicsIndustryRGHAIO.IsPODTriggerSource">
            <summary>
            POD Trigger Source
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.PhotonicsIndustryRGHAIO.SetSeedCurrent">
            <summary>
            Seed Diode Set Current (A)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.PhotonicsIndustryRGHAIO.SetAmp1Current">
            <summary>
            Amp1 Diode Set Current (A)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.PhotonicsIndustryRGHAIO.MaxSeedCurrent">
            <summary>
            Seed Max Diode Current (A)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.PhotonicsIndustryRGHAIO.MaxAmp1Current">
            <summary>
            Amp1 Max Diode Current (A)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.PhotonicsIndustryRGHAIO.ActualSeedCurrent">
            <summary>
            Seed Actual Diode Current (A)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.PhotonicsIndustryRGHAIO.ActualAmp1Current">
            <summary>
            Amp1 Actual Diode Current (A)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.PhotonicsIndustryRGHAIO.SeedDiodeVoltage">
            <summary>
            Seed Diode Voltage (V)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.PhotonicsIndustryRGHAIO.Amp1DiodeVoltage">
            <summary>
            Amp1 Diode Voltage (V)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.PhotonicsIndustryRGHAIO.PulseRepRate">
            <summary>
            Pulse Rep. Rate (Hz)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.PhotonicsIndustryRGHAIO.PECLevel">
            <summary>
            PEC Level (%)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.PhotonicsIndustryRGHAIO.SeedDiodeActualTemperature">
            <summary>
            Seed Diode TEC (C)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.PhotonicsIndustryRGHAIO.AmpDiodeActualTemperature">
            <summary>
            Amp Diode (C)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.PhotonicsIndustryRGHAIO.SeedLDDHours">
            <summary>
            Seed LDD (Hrs)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.PhotonicsIndustryRGHAIO.Amp1LDDHours">
            <summary>
            Amp1 LDD (Hrs)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.PhotonicsIndustryRGHAIO.PowerWatt">
            <summary>
            Monitoring Power (W)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.PhotonicsIndustryRGHAIO.Flow">
            <summary>
            Flow (L/min)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.PhotonicsIndustryRGHAIO.IsSESAMMotorMoving">
            <summary>
            SESAM Motor Status
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.PhotonicsIndustryRGHAIO.SESAMMotorIndexPosition">
            <summary>
            SESAM Motor Index Position
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.PhotonicsIndustryRGHAIO.SESAMPositionHours">
            <summary>
            SESAM Position Hours
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.PhotonicsIndustryRGHAIO.IsPRFSourceExt">
            <summary>
            PRF Source 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.PhotonicsIndustryRGHAIO.IsGateSourceExt">
            <summary>
            PRF Source 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.PhotonicsIndustryRGHAIO.IsPECSourceExt">
            <summary>
            PRF Source 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.PhotonicsIndustryRGHAIO.IsGuideOn">
            <summary>
            Emulated Guide On/Off by Gate Source INT/EXT
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.PhotonicsIndustryRGHAIO.IsTimedOut">
            <summary>
            Communication timed out or not
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.PhotonicsIndustryRGHAIO.IsProtocolError">
            <summary>
            Communication protocol error or not
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.PhotonicsIndustryRGHAIO.ComPort">
            <summary>
            COM port no
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Laser.PhotonicsIndustryRGHAIO.PIRGHAIOSoftFault">
            <summary>
            PIRGHAIOSoftFault
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.PhotonicsIndustryRGHAIO.PIRGHAIOSoftFault.ToString">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.PhotonicsIndustryRGHAIO.SoftFaultBit2">
            <summary>
            PIRGHAIOSoftFault.Bit2
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Laser.PhotonicsIndustryRGHAIO.PIRGHAIOBoardFault">
            <summary>
            PIRGHAIOBoardFault
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.PhotonicsIndustryRGHAIO.PIRGHAIOBoardFault.ToString">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.PhotonicsIndustryRGHAIO.BoardFaultBit2">
            <summary>
            PIRGHAIOBoardFault.Bit2
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Laser.PhotonicsIndustryRGHAIO.PIRGHAIOStatus">
            <summary>
            PIRGHAIOStatus
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.PhotonicsIndustryRGHAIO.PIRGHAIOStatus.ToString">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.PhotonicsIndustryRGHAIO.Status1Bit">
            <summary>
            PIRGHAIOStatus.Bit1
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.PhotonicsIndustryRGHAIO.Status2Bit">
            <summary>
            PIRGHAIOStatus.Bit2
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.PhotonicsIndustryRGHAIO.Status3Bit">
            <summary>
            PIRGHAIOStatus.Bit3
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.PhotonicsIndustryRGHAIO.Status4Bit">
            <summary>
            PIRGHAIOStatus.Bit4
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.PhotonicsIndustryRGHAIO.Status5Bit">
            <summary>
            PIRGHAIOStatus.Bit5
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.PhotonicsIndustryRGHAIO.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.PhotonicsIndustryRGHAIO.#ctor(System.Int32,System.String,System.Int32,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="index">Identifier</param>
            <param name="name">Name</param>
            <param name="comPort">COM port</param>
            <param name="maxPowerWatt">Max power (W)</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.PhotonicsIndustryRGHAIO.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.PhotonicsIndustryRGHAIO.Dispose(System.Boolean)">
            <summary>
            Dispose internal resource
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.PhotonicsIndustryRGHAIO.Initialize">
            <inheritdoc/>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.PhotonicsIndustryRGHAIO.CR">
            <summary>
            Terminator
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Laser.PhotonicsIndustryRGHAIO.Queries">
            <summary>
            Queries
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Laser.PhotonicsIndustryRGHAIO.Commands">
            <summary>
            Commands
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.PhotonicsIndustryRGHAIO.step">
            <summary>
            Cycle step counts within worker thread
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.PhotonicsIndustryRGHAIO.OnThread">
            <summary>
            Worker thread
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.PhotonicsIndustryRGHAIO.Send(System.Byte[])">
            <summary>
            Send string data by <c>SerialPort</c>
            </summary>
            <param name="data">Array of bytes</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.PhotonicsIndustryRGHAIO.ReceiveParse(System.IO.Ports.SerialPort,System.Byte[]@)">
            <summary>
            Receive data from  <c>SerialPort</c>
            </summary>
            <param name="serialPort"><c>SerialPort</c> instance</param>
            <param name="bytes">Returned array of bytes</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.PhotonicsIndustryRGHAIO.QueryUser">
            <summary>
            Query by user override or implemented function
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.PhotonicsIndustryRGHAIO.CmdUser">
            <summary>
            User can override and implement this function for addition communication
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.PhotonicsIndustryRGHAIO.CheckErrors">
            <summary>
            Check <c>IsError</c> status
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.PhotonicsIndustryRGHAIO.CheckReady">
            <summary>
             Check <c>IsReady</c> status
             </summary>
             <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.PhotonicsIndustryRGHAIO.CheckBusy">
            <summary>
            Check <c>IsBusy</c> status
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.PhotonicsIndustryRGHAIO.CtlAbort">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.PhotonicsIndustryRGHAIO.CtlReset">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.PhotonicsIndustryRGHAIO.CtlGuide(System.Boolean)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.PhotonicsIndustryRGHAIO.CtlPower(System.Double,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.PhotonicsIndustryRGHAIO.ListBegin">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.PhotonicsIndustryRGHAIO.ListEnd">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.PhotonicsIndustryRGHAIO.ListPower(System.Double,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiralLab.Sirius2.Laser.SpectraPhysicsHippo">
            <summary>
            SpectraPhysics Hippo
            </summary>
            <remarks>
            Vary <c>Diode1Current</c> and <c>Diode2Current</c> value by custom(external) RS-232 communication. <br/> 
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.SpectraPhysicsHippo.LaserType">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.SpectraPhysicsHippo.PowerMap">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.SpectraPhysicsHippo.Serial">
            <summary>
            SerialPort instance
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.SpectraPhysicsHippo.StatusMessage">
            <summary>
            Status Message
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.SpectraPhysicsHippo.StatusCode">
            <summary>
            Status Code
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.SpectraPhysicsHippo.StatusCodes">
            <summary>
             Status Codes History
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.SpectraPhysicsHippo.MinVoltage">
            <summary>
            Min Analog Voltage (V)
            <para>Default: 0</para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.SpectraPhysicsHippo.MaxVoltage">
            <summary>
            Max Analog Voltage (V)
            <para>Default: 10</para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.SpectraPhysicsHippo.AnalogPortNo">
            <summary>
            Port for Analog 
            <para>Default: 1</para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.SpectraPhysicsHippo.PowerFactor">
            <summary>
            Power Factor (%)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.SpectraPhysicsHippo.Diode1Current">
            <summary>
            Diode 1 Current (A)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.SpectraPhysicsHippo.Diode2Current">
            <summary>
            Diode 2 Current (A)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.SpectraPhysicsHippo.Diode1CurrentLimit">
            <summary>
            Diode 1 Current Limit (A)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.SpectraPhysicsHippo.Diode2CurrentLimit">
            <summary>
            Diode 2 Current Limit (A)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.SpectraPhysicsHippo.InitialDiode1Current">
            <summary>
            Initial Diode 1 Current (A)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.SpectraPhysicsHippo.InitialDiode2Current">
            <summary>
            Initial Diode 2 Current (A)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.SpectraPhysicsHippo.IsGateOn">
            <summary>
            Gate On/Off Control
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.SpectraPhysicsHippo.IsEmissionOn">
            <summary>
            Emission On/Off Control
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.SpectraPhysicsHippo.IRPower">
            <summary>
            IR Power (W)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.SpectraPhysicsHippo.IsShutterOpen">
            <summary>
            Shutter open/close
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.SpectraPhysicsHippo.Frequency">
            <summary>
            Frequency (Hz)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.SpectraPhysicsHippo.FrequencyMin">
            <summary>
            Min Frequency (Hz)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.SpectraPhysicsHippo.FHGOvenTempeartureBit">
            <summary>
            FGH Over Temp (C)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.SpectraPhysicsHippo.UVPowerSetPoint">
            <summary>
            UV Set Power (W)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.SpectraPhysicsHippo.SHGOvenTempeartureBit">
            <summary>
            SHG Over Temp (C)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.SpectraPhysicsHippo.FPSTime">
            <summary>
            FPS time (usec)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.SpectraPhysicsHippo.SoftwareVersion">
            <summary>
            Software Version
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.SpectraPhysicsHippo.Diode1Hrs">
            <summary>
            Diode 1 Hrs
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.SpectraPhysicsHippo.Diode2Hrs">
            <summary>
            Diode 2 Hrs
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.SpectraPhysicsHippo.HeadHrs">
            <summary>
            Head Hrs
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.SpectraPhysicsHippo.Diode1Temperature">
            <summary>
            Diode 1 Temp (C)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.SpectraPhysicsHippo.Diode2Temperature">
            <summary>
            Diode 2 Temp (C)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.SpectraPhysicsHippo.SHGActualTemperature">
            <summary>
            SHG Acutal Temp (C)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.SpectraPhysicsHippo.IsTimedOut">
            <summary>
            Communication timed out or not
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.SpectraPhysicsHippo.IsProtocolError">
            <summary>
            Communication protocol error or not
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.SpectraPhysicsHippo.ComPort">
            <summary>
            COM port no
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.SpectraPhysicsHippo.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.SpectraPhysicsHippo.#ctor(System.Int32,System.String,System.Int32,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="index">Identifier</param>
            <param name="name">Name</param>
            <param name="comPort">COM port</param>
            <param name="maxPowerWatt">Max power (W)</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.SpectraPhysicsHippo.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.SpectraPhysicsHippo.Dispose(System.Boolean)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.SpectraPhysicsHippo.Initialize">
            <inheritdoc/>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.SpectraPhysicsHippo.CR">
            <summary>
            Terminator (send)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.SpectraPhysicsHippo.CRLF">
            <summary>
            Terminator (receive)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.SpectraPhysicsHippo.step">
            <summary>
            Cycle step counts within worker thread
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.SpectraPhysicsHippo.OnThread">
            <summary>
            Worker thread
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.SpectraPhysicsHippo.Send(System.String)">
            <summary>
            Send string data by <c>SerialPort</c>
            </summary>
            <param name="data">Data</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.SpectraPhysicsHippo.ReceiveParse(System.IO.Ports.SerialPort,System.String@)">
            <summary>
            Receive data from  <c>SerialPort</c>
            </summary>
            <param name="serialPort"><c>SerialPort</c> instance</param>
            <param name="data">Returned string data</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.SpectraPhysicsHippo.QueryUser">
            <summary>
            Query by user override or implemented function
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.SpectraPhysicsHippo.CmdUser">
            <summary>
            User can override and implement this function for addition communication
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.SpectraPhysicsHippo.CheckErrors">
            <summary>
            Check <c>IsError</c> status
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.SpectraPhysicsHippo.CheckReady">
            <summary>
            Check <c>IsReady</c> status
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.SpectraPhysicsHippo.CheckBusy">
            <summary>
            Check <c>IsBusy</c> status
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.SpectraPhysicsHippo.CtlAbort">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.SpectraPhysicsHippo.CtlReset">
            <inheritdoc/>  
        </member>
        <member name="T:SpiralLab.Sirius2.Laser.SpectraPhysicsHippo.EventCodes">
            <summary>
            EventCodes
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.SpectraPhysicsHippo.CtlPower(System.Double,System.String)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.SpectraPhysicsHippo.ListBegin">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.SpectraPhysicsHippo.ListEnd">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.SpectraPhysicsHippo.ListPower(System.Double,System.String)">
            <inheritdoc/>  
        </member>
        <member name="T:SpiralLab.Sirius2.Laser.SPIG4">
            <summary>
            SPI G4(or G3)
            <para>Vary <c>Analog1</c> and <c>Analog2</c> voltage output at RTC</para>
            <para>Fixed. RTC <c>ANALOG1</c> port: Actual current</para>
            <para>Fixed. RTC <c>ANALOG2</c> port: Simmer currrent</para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.SPIG4.LaserType">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.SPIG4.PowerMap">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.SPIG4.Serial">
            <summary>
            SerialPort instance
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.SPIG4.SimmerPowerWatt">
            <summary>
            Simmer Power (W) 
            <para>Write analog data into <c>Analog2</c> port at RTC</para>
            <code>
                                          Simmer power (W)
            Simper power voltage (V) = --------------------- X 10
                                            Max power (W)
                                                  
            </code>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.SPIG4.Temperature">
            <summary>
            Device Temp
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.SPIG4.OperationHrs">
            <summary>
            Operation Hours
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.SPIG4.ComPort">
            <summary>
            COM port no
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Laser.SPIG4.SPIStatus">
            <summary>
            SPI Status
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.SPIG4.SPIStatus.ToString">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.SPIG4.Status">
            <summary>
            Status Code
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.SPIG4.StatusBit">
            <summary>
            Status.Bit
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.SPIG4.IsTimedOut">
            <summary>
            Communication timed out or not
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.SPIG4.IsProtocolError">
            <summary>
            Communication protocol error or not
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.SPIG4.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.SPIG4.#ctor(System.Int32,System.String,System.Int32,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="index">Identifier</param>
            <param name="name">Name</param>
            <param name="comPort">COM port</param>
            <param name="maxPowerWatt">Max power (W)</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.SPIG4.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.SPIG4.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.SPIG4.Initialize">
            <inheritdoc/>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.SPIG4.step">
            <summary>
            Cycle step counts within worker thread
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.SPIG4.OnThread">
            <summary>
            Worker thread
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.SPIG4.LF">
            <summary>
            Terminator (receive)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.SPIG4.CRLF">
            <summary>
            Terminator (query)
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.SPIG4.Send(System.String)">
            <summary>
            Send string data by <c>SerialPort</c>
            </summary>
            <param name="data">Data</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.SPIG4.ReceiveParse(System.IO.Ports.SerialPort,System.String@)">
            <summary>
            Receive data from  <c>SerialPort</c>
            </summary>
            <param name="serialPort"><c>SerialPort</c> instance</param>
            <param name="data">Returned string data</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.SPIG4.QueryUser">
            <summary>
            Query by user override or implemented function
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.SPIG4.CmdUser">
            <summary>
            User can override and implement this function for addition communication
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.SPIG4.CheckErrors">
            <summary>
            Check <c>IsError</c> status
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.SPIG4.CheckReady">
            <summary>
            Check <c>IsReady</c> status
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.SPIG4.CheckBusy">
            <summary>
            Check <c>IsBusy</c> status
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.SPIG4.CtlAbort">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.SPIG4.CtlReset">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.SPIG4.GetAlarms">
            <summary>
            Get alarms
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.SPIG4.GetAlarmText(System.Int32)">
            <summary>
            Get alarm message by code
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.SPIG4.CtlPower(System.Double,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.SPIG4.ListBegin">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.SPIG4.ListEnd">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.SPIG4.ListPower(System.Double,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiralLab.Sirius2.Laser.SpectraPhysicsTalon">
            <summary>
            SpectraPhysics Talon
            </summary>
            <remarks>
            Vary <c>DiodeCurrent</c> value by custom(external) RS-232 communication. <br/> 
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.SpectraPhysicsTalon.LaserType">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.SpectraPhysicsTalon.PowerMap">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.SpectraPhysicsTalon.Serial">
            <summary>
            SerialPort instance
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.SpectraPhysicsTalon.Manufacturer">
            <summary>
            Manufacturer
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.SpectraPhysicsTalon.Model">
            <summary>
            Model
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.SpectraPhysicsTalon.SerialNo">
            <summary>
            Serial Number
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.SpectraPhysicsTalon.FirmwareVer">
            <summary>
            Firmware Version
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.SpectraPhysicsTalon.FPGAVer">
            <summary>
            FPGA Version
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.SpectraPhysicsTalon.IsShutterOpen">
            <summary>
            Shutter open/close
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.SpectraPhysicsTalon.DiodeCurrent">
            <summary>
            Diode Current (A)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.SpectraPhysicsTalon.DiodeCurrentLimit">
            <summary>
            Diode Current Limit (A)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.SpectraPhysicsTalon.IsDiodeOn">
            <summary>
            Diode On/Off
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.SpectraPhysicsTalon.IsGateOn">
            <summary>
            Gate On/Off
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.SpectraPhysicsTalon.IsExtGateEnableSignalHigh">
            <summary>
            Gate Enable Signal(PIN7) Level is HIGH
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.SpectraPhysicsTalon.IsExtGateEnable">
            <summary>
            External Gate Enable
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.SpectraPhysicsTalon.IsAnalogControlEnable">
            <summary>
            Analog Current Control Enable
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Laser.SpectraPhysicsTalon.Pin6Modes">
            <summary>
            PIN6 modes
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.SpectraPhysicsTalon.Pin6Mode">
            <summary>
            PIN6 mode
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Laser.SpectraPhysicsTalon.TriggerEdges">
            <summary>
            Trigger edges
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.SpectraPhysicsTalon.TriggerEdge">
            <summary>
            Trigger edge
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.SpectraPhysicsTalon.IsEmissionOn">
            <summary>
            Emission on/off
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.SpectraPhysicsTalon.Frequency">
            <summary>
            Frequency (Hz)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.SpectraPhysicsTalon.EPRF">
            <summary>
            EPRF
            <para>
            For example, if the energy at 100 kHz is 100 μJ per pulse and EPRF is chosen to be 100 kHz, 
            then at any triggering rate below EPRF the energy per pulse is fixed at 100 μJ.
            As an example, if EPRF is set to 100 kHz and Q is set to 50 kHz, 
            the pulses emitted by the laser have a repetition rate of 50 kHz, but a pulse width, energy, 
            and stability equivalent to the 100 kHz operation of the laser.
            </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.SpectraPhysicsTalon.THGPos">
            <summary>
            THG Position
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.SpectraPhysicsTalon.IsSHGAutoTune">
            <summary>
            SHG Autotune
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.SpectraPhysicsTalon.IsTHGAutoTune">
            <summary>
            THG Autotune
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.SpectraPhysicsTalon.QSwitchOpMode">
            <summary>
            QMode
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Laser.SpectraPhysicsTalon.TalonStatus">
            <summary>
            TalonStatus
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.SpectraPhysicsTalon.TalonStatus.ToString">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.SpectraPhysicsTalon.StatusBit">
            <summary>
            TalonStatus.Bit
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.SpectraPhysicsTalon.DiodeTemperature">
            <summary>
            Diode Temperature
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.SpectraPhysicsTalon.SHGActualTemperature">
            <summary>
            SHG Acutal Temperature
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.SpectraPhysicsTalon.THGActualTemperature">
            <summary>
            THG Acutal Temperature
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.SpectraPhysicsTalon.DiodeOperationHrs">
            <summary>
            Diode Operation (Hrs)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.SpectraPhysicsTalon.THGOperationHrs">
            <summary>
            THG Operation (Hrs)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.SpectraPhysicsTalon.THGAccumulatedHrs">
            <summary>
            Accumulated THG (Hrs)
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Laser.SpectraPhysicsTalon.AlarmCodes">
            <summary>
            AlarmCodes
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.SpectraPhysicsTalon.AlarmCode">
            <summary>
            Alarm codes
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.SpectraPhysicsTalon.IsTimedOut">
            <summary>
            Communication timed out or not
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.SpectraPhysicsTalon.IsProtocolError">
            <summary>
            Communication protocol error or not
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.SpectraPhysicsTalon.IsGuideOn">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.SpectraPhysicsTalon.ComPort">
            <summary>
            COM port no
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.SpectraPhysicsTalon.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.SpectraPhysicsTalon.#ctor(System.Int32,System.String,System.Int32,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="index">Identifier</param>
            <param name="name">Name</param>
            <param name="comPort">COM port</param>
            <param name="maxPowerWatt">Max power (W)</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.SpectraPhysicsTalon.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.SpectraPhysicsTalon.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.SpectraPhysicsTalon.Initialize">
            <inheritdoc/>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.SpectraPhysicsTalon.step">
            <summary>
            Cycle step counts within worker thread
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.SpectraPhysicsTalon.OnThread">
            <summary>
            Worker thread
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.SpectraPhysicsTalon.CR">
            <summary>
            Terminator (receive)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.SpectraPhysicsTalon.CRLF">
            <summary>
            Terminator (query)
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.SpectraPhysicsTalon.Send(System.String)">
            <summary>
            Send string data by <c>SerialPort</c>
            </summary>
            <param name="data">Data</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.SpectraPhysicsTalon.ReceiveParse(System.IO.Ports.SerialPort,System.String@)">
            <summary>
            Receive data from  <c>SerialPort</c>
            </summary>
            <param name="serialPort"><c>SerialPort</c> instance</param>
            <param name="data">Returned string data</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.SpectraPhysicsTalon.QueryUser">
            <summary>
            Query by user override or implemented function
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.SpectraPhysicsTalon.CmdUser">
            <summary>
            User can override and implement this function for addition communication
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.SpectraPhysicsTalon.CheckErrors">
            <summary>
            Check <c>IsError</c> status
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.SpectraPhysicsTalon.CheckReady">
            <summary>
            Check <c>IsReady</c> status
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.SpectraPhysicsTalon.CheckBusy">
            <summary>
            Check <c>IsBusy</c> status
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.SpectraPhysicsTalon.CtlAbort">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.SpectraPhysicsTalon.CtlReset">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.SpectraPhysicsTalon.CtlGuide(System.Boolean)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.SpectraPhysicsTalon.CtlPower(System.Double,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.SpectraPhysicsTalon.ListBegin">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.SpectraPhysicsTalon.ListEnd">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.SpectraPhysicsTalon.ListPower(System.Double,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SpiralLab.Sirius2.Laser.LaserTypes">
            <summary>
            Laser types
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.LaserTypes.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.LaserTypes.Virtual">
            <summary>
            Virtual
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.LaserTypes.AdvancedOptoWaveAOPico">
            <summary>
            Advanced OptoWave AOPico
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.LaserTypes.AdvancedOptoWaveAOPicoPrecision">
            <summary>
            Advanced OptoWave AOPico Precision
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.LaserTypes.AdvancedOptoWaveFotia">
            <summary>
            Advanced OptoWave Fotia
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.LaserTypes.CoherentAviaLX">
            <summary>
            Coherent AVIA LX
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.LaserTypes.CoherentDiamondCSeries">
            <summary>
            Coherent Diamonc C-Series
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.LaserTypes.IPGYLPTypeD">
            <summary>
            IPG YLP Type D
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.LaserTypes.IPGYLPTypeE">
            <summary>
            IPG YLP Type E
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.LaserTypes.IPGYLPULPN">
            <summary>
            IPG YLP ULP N
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.LaserTypes.IPGYLPN">
            <summary>
            IPG YLP N
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.LaserTypes.JPTTypeE">
            <summary>
            JPT Type E
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.LaserTypes.PhotonicsIndustryDX">
            <summary>
            Photonics Industry DX
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.LaserTypes.PhotonicsIndustryRGHAIO">
            <summary>
            Photonics Industry RGH AIO
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.LaserTypes.SpectraPhysicsHippo">
            <summary>
            Spectra Physics Hippo
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.LaserTypes.SpectraPhysicsTalon">
            <summary>
            Spectra Physics Talon
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.LaserTypes.SPIG4">
            <summary>
            SPI G3/G4 Fiber 
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.LaserTypes.UserDefined1">
            <summary>
            User defined1 laser
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.LaserTypes.UserDefined2">
            <summary>
            User defined2 laser
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.LaserTypes.UserDefined3">
            <summary>
            User defined3 laser
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.LaserTypes.UserDefined4">
            <summary>
            User defined4 laser
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.LaserTypes.UserDefined5">
            <summary>
            User defined5 laser
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.LaserTypes.UserDefined6">
            <summary>
            User defined6 laser
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.LaserTypes.UserDefined7">
            <summary>
            User defined7 laser
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.LaserTypes.UserDefined8">
            <summary>
            User defined8 laser
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.LaserTypes.UserDefined9">
            <summary>
            User defined9 laser
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.LaserTypes.UserDefined10">
            <summary>
            User defined10 laser
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Laser.ILaser">
            <summary>
            ILaser interface
            </summary>
            <remarks>
            Abstracted laser sources
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.ILaser.SyncRoot">
            <summary>
            Synchronization object
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.ILaser.Index">
            <summary>
            Identifier
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.ILaser.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.ILaser.LaserType">
            <summary>
            Laser type
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.ILaser.MaxPowerWatt">
            <summary>
            Max power (W)
            <code>
                                        Target power (W)
            Output power ratio (%) = --------------------- X 100
                                        <see cref="P:SpiralLab.Sirius2.Laser.ILaser.MaxPowerWatt">MaxPowerWatt</see> (W)
            </code>
            <remarks>
            Actual output laser power(W) but theorical. <br/> 
            Recommended by measure output laser max power by powermeter and use it. <br/>
            </remarks>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.ILaser.LastPowerWatt">
            <summary>
            Last commanded target power (W)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.ILaser.IsReady">
            <summary>
            Ready status
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.ILaser.IsBusy">
            <summary>
            Busy status
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.ILaser.IsError">
            <summary>
            Error status
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.ILaser.Scanner">
            <summary>
            <see cref="T:SpiralLab.Sirius2.Scanner.IScanner">Scanner</see> interface
            </summary>
            <remarks>
            External scanner controller (like as RTC cards). <br/>
            User can cast this reference value to like as <see cref="T:SpiralLab.Sirius2.Scanner.Rtc.IRtc">IRtc</see>, <see cref="T:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.IRtcSyncAxis">IRtcSyncAxis</see> <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.ILaser.IsPowerControl">
            <summary>
            Enabled <see cref="T:SpiralLab.Sirius2.Laser.ILaserPowerControl">ILaserPowerControl</see> or not
            </summary>
            <remarks>
            Also, meaning with inherited from <see cref="T:SpiralLab.Sirius2.Laser.ILaserPowerControl">ILaserPowerControl</see> or not. <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.ILaser.PowerControlMethod">
            <summary>
            Laser power control method
            </summary>
            <remarks>
            Configure valid <see cref="T:SpiralLab.Sirius2.Laser.PowerControlMethods">PowerControlMethods</see> if <see cref="P:SpiralLab.Sirius2.Laser.ILaser.IsPowerControl">IsPowerControl</see> is <c>True</c> <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.ILaser.PowerControlDelayTime">
            <summary>
            Delay time (msec) for vary output power
            </summary>
            <remarks>
            Used if <see cref="P:SpiralLab.Sirius2.Laser.ILaser.IsPowerControl">IsPowerControl</see> is <c>True</c> and valid <see cref="T:SpiralLab.Sirius2.Laser.PowerControlMethods">PowerControlMethods</see> has configured. <br/>
            Would be insert delay time every <see cref="M:SpiralLab.Sirius2.Laser.ILaserPowerControl.CtlPower(System.Double,System.String)">ILaserPowerControl.CtlPower</see> and <see cref="M:SpiralLab.Sirius2.Laser.ILaserPowerControl.ListPower(System.Double,System.String)">ILaserPowerControl.ListPower</see> has called. <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.ILaser.IsGuideControl">
            <summary>
            Enabled <c>ILaserGuideControl</c> or not
            </summary>
            <remarks>
            Also, meaning with inherited from <see cref="T:SpiralLab.Sirius2.Laser.ILaserGuideControl">ILaserGuideControl</see> or not. <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.ILaser.Tag">
            <summary>
            User data
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.ILaser.Initialize">
            <summary>
            Initialize
            <code>
            bool success = true;
            double maxWatt = 20;
            int analogCh = 1; //or 2
            var laser = LaserFactory.CreateVirtualAnalog(0, maxWatt, analogCh);
            laser.Rtc = rtc;
            success &amp;=laser.Initialize();
            if (laser is ILaserPowerControl powerControl)
                success &amp;= powerControl.CtlPower(laser.MaxPowerWatt * 0.1); // 10% (= 1V)
            if (laser is ILaserGuideControl guideControl)
                success &amp;= guideControl.CtlGuide(true); // To turn guide laser beam on
            Debug.Assert(success);
            </code>
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.ILaser.CtlAbort">
            <summary>
            Abort
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.ILaser.CtlReset">
            <summary>
            Reset
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.ILaser.ListBegin">
            <summary>
            List begin
            <code>
            bool success = true;
            success &amp;= rtc.ListBegin();
            success &amp;= laser.ListBegin();
            success &amp;= laser.ListPower(5); // output power to 5W
            success &amp;= rtc.ListJumpTo(new Vector2(radius, 0));
            success &amp;= rtc.ListArcTo(Vector2.Zero, 360); // 1st circle
            success &amp;= laser.ListPower(10); // output power to 10W
            success &amp;= rtc.ListJumpTo(new Vector2(-radius, 0)); // 2nd circle
            success &amp;= rtc.ListArcTo(Vector2.Zero, 360);
            success &amp;= rtc.ListJumpTo(Vector2.Zero);
            success &amp;= laser.ListEnd();
            success &amp;= rtc.ListEnd();
            if (success)
                success &amp;= rtc.ListExecute(true);
            </code>
            </summary>
            <remarks>
            Consider as its working within async threads. <br/>
            </remarks>
            <returns>Success or failed<br/>If return failed, marker would be stopped(or aborted) immediately. <br/></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.ILaser.ListEnd">
            <summary>
            List end
            <code>
            bool success = true;
            success &amp;= rtc.ListBegin();
            success &amp;= laser.ListBegin();
            success &amp;= laser.ListPower(5); // output power to 5W
            success &amp;= rtc.ListJumpTo(new Vector2(radius, 0));
            success &amp;= rtc.ListArcTo(Vector2.Zero, 360); // 1st circle
            success &amp;= laser.ListPower(10); // output power to 10W
            success &amp;= rtc.ListJumpTo(new Vector2(-radius, 0)); // 2nd circle
            success &amp;= rtc.ListArcTo(Vector2.Zero, 360);
            success &amp;= rtc.ListJumpTo(Vector2.Zero);
            success &amp;= laser.ListEnd();
            success &amp;= rtc.ListEnd();
            if (success)
                success &amp;= rtc.ListExecute(true);
            </code>
            </summary>
            <remarks>
            Consider as its working within async threads. <br/>
            </remarks>
            <returns>Success or failed<br/>If return failed, marker would be stopped(or aborted) immediately. <br/></returns>
        </member>
        <member name="T:SpiralLab.Sirius2.Laser.ILaserGuideControl">
            <summary>
            ILaserGuideControl interface
            </summary>
            <remarks>
            Used with guide(or pilot) laser within laser source <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.ILaserGuideControl.IsGuideOn">
            <summary>
            Status of guided laser beam is on or not
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.ILaserGuideControl.CtlGuide(System.Boolean)">
            <summary>
            Enable(or disable) guided laser beam
            </summary>
            <remarks>
            User should be implement its own codes to control guide(or pilot) laser beam. <br/>
            If <c>False</c>, also <see cref="M:SpiralLab.Sirius2.Scanner.Rtc.IRtc.CtlLaserSignal(System.Boolean)">IRtc.CtlLaserSignal(False)</see> would be called by automatically. <br/>
            If <c>True</c>, also <see cref="M:SpiralLab.Sirius2.Scanner.Rtc.IRtc.CtlLaserSignal(System.Boolean)">IRtc.CtlLaserSignal(True)</see> would be called by automatically. <br/>
            </remarks>
            <param name="onOff">On(or off)</param>
            <returns>Success or failed</returns>
        </member>
        <member name="T:SpiralLab.Sirius2.Laser.PowerControlMethods">
            <summary>
            Laser power control methods
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.PowerControlMethods.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.PowerControlMethods.Custom">
            <summary>
            Control by user-defined method 
            </summary>
            <remarks>
            User should be implement customized program. <br/>
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.PowerControlMethods.Frequency">
            <summary>
            Control by frequency modulation
            </summary>
            <remarks>
            User should be set values <c>MinFrequency</c> and <c>MaxFrequency</c>. <br/>
            <c>IRtc.Frequency</c> value is ignored. <br/>
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.PowerControlMethods.DutyCycle">
            <summary>
            Control by duty cycle modulation 
            </summary>
            <remarks>
            User should be set values <c>MinDutyCycle</c>, <c>MaxDutyCycle</c>. <br/>
            <c>IRtc.PulseWidth</c> value is ignored. <br/> 
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.PowerControlMethods.Analog">
            <summary>
            Control by analog voltage output
            </summary>
            <remarks>
            User should be set values <c>MinVoltage</c> ~ <c>MaxVoltage</c>. <br/>
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.PowerControlMethods.DigitalBits">
            <summary>
            Control by digital outputs
            </summary>
            <remarks>
            If 8bits, DO value/255 * 100 or If 16 bits DO value/65535 * 100 ratio are outputted. <br/>
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Laser.PowerControlMethods.Rs232">
            <summary>
            Control by specific protocol commands (RS-232)
            </summary>
            <remarks>
            User should be set values <c>Rs232StringFormat</c>. <br/>
            Output: string.Format(Rs232StringFormat, percentage). <br/>
            (Warning) Internal RTC's RS-232 port is used. <br/>
            </remarks>
        </member>
        <member name="T:SpiralLab.Sirius2.Laser.ILaserPowerControl">
            <summary>
            ILaserPowerControl interface
            </summary>
            <remarks>
            Used with control output laser power within laser source
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Laser.ILaserPowerControl.PowerMap">
            <summary>
            Assigned <see cref="T:SpiralLab.Sirius2.PowerMap.IPowerMap">IPowerMap</see> for calculate(or compensate) output power
            </summary>
            <remarks>
            If <see cref="P:SpiralLab.Sirius2.Laser.ILaserPowerControl.PowerMap">PowerMap</see> is not <c>null</c>, output power value would be compensated by power map table. <br/>
            If <see cref="P:SpiralLab.Sirius2.PowerMap.IPowerMap.IsEnableLookUp">IPowerMap.IsEnableLookUp</see> is <c>True</c>, every output power values (W) by <see cref="M:SpiralLab.Sirius2.Laser.ILaserPowerControl.CtlPower(System.Double,System.String)">CtlPower</see>, <see cref="M:SpiralLab.Sirius2.Laser.ILaserPowerControl.ListPower(System.Double,System.String)">ListPower</see> are affected(or compensated). <br/>
            To disable <see cref="T:SpiralLab.Sirius2.PowerMap.IPowerMap">PowerMap</see> function, configure it as <c>null</c>. <br/>
            </remarks>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.ILaserPowerControl.CtlPower(System.Double,System.String)">
            <summary>
            Vary output laser power at immediately
            <code>
            var laser = LaserFactory.Create...
            laser.Initialize();
            ...
            var powerMap = PowerMapFactory.CreateMapDefault...
            powerMap.Update("50000", 2, 1);
            powerMap.Update("50000", 4, 3.1);
            powerMap.Update("50000", 6, 5.2);
            powerMap.Update("50000", 8, 7.4);
            powerMap.Update("50000", 10, 9.5);
            //or PowerMapSerializer.Open("filename", powerMap);
            powerMap.IsEnableLookUp = true;
            ...
            laser.PowerMap = powerMap;
            laser.CtlPower(xWatt, "50000");
            </code>
            </summary>
            <param name="targetWatt">Target x watt (W)</param>
            <param name="category">Target category name for look up.<br/>Used with <see cref="T:SpiralLab.Sirius2.PowerMap.IPowerMap">IPowerMap</see> to look up output y value if <see cref="P:SpiralLab.Sirius2.PowerMap.IPowerMap.IsEnableLookUp">IPowerMap.IsEnableLookUp</see> is <c>True</c> only.<br/></param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Laser.ILaserPowerControl.ListPower(System.Double,System.String)">
            <summary>
            List vary output laser power
            <code>
            var laser = LaserFactory.Create...
            laser.Initialize();
            ...
            var powerMap = PowerMapFactory.CreateMapDefault...
            powerMap.Update("50000", 2, 1);
            powerMap.Update("50000", 4, 3.1);
            powerMap.Update("50000", 6, 5.2);
            powerMap.Update("50000", 8, 7.4);
            powerMap.Update("50000", 10, 9.5);
            //or PowerMapSerializer.Open("filename", powerMap);
            powerMap.IsEnableLookUp = true;
            ...
            laser.PowerMap = powerMap;
            laser.ListPower(xWatt, "50000");
            </code>
            <code>
            bool success = true;
            success &amp;= rtc.ListBegin();
            success &amp;= laser.ListBegin();
            success &amp;= laser.ListPower(5); // output power to 5W
            success &amp;= rtc.ListJumpTo(new Vector2(radius, 0));
            success &amp;= rtc.ListArcTo(Vector2.Zero, 360); // 1st circle
            success &amp;= laser.ListPower(10); // output power to 10W
            success &amp;= rtc.ListJumpTo(new Vector2(-radius, 0)); // 2nd circle
            success &amp;= rtc.ListArcTo(Vector2.Zero, 360);
            success &amp;= rtc.ListJumpTo(Vector2.Zero);
            success &amp;= laser.ListEnd();
            success &amp;= rtc.ListEnd();
            if (success)
                success &amp;= rtc.ListExecute(true);
            </code>
            </summary>
            <remarks>
            Consider as its working within async threads. <br/>
            </remarks>
            <param name="targetWatt">Target x watt (W)</param>
            <param name="category">Target category name for look up.<br/>Used with <see cref="T:SpiralLab.Sirius2.PowerMap.IPowerMap">IPowerMap</see> to look up output y value if <see cref="P:SpiralLab.Sirius2.PowerMap.IPowerMap.IsEnableLookUp">IPowerMap.IsEnableLookUp</see> is <c>True</c> only.<br/></param>
            <returns>Success or failed<br/>If return failed, marker would be stopped(or aborted) immediately. <br/></returns>
        </member>
        <member name="T:SpiralLab.Sirius2.src.laser.impl.laserbase">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.src.laser.impl.laserbase.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.src.laser.impl.laserbase.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.src.laser.impl.laserbase.Basic_C">
            <summary>
              Looks up a localized string similar to Basic.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.src.laser.impl.laserbase.Busy_DESC">
            <summary>
              Looks up a localized string similar to Busy Status.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.src.laser.impl.laserbase.Busy_DISP">
            <summary>
              Looks up a localized string similar to Busy.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.src.laser.impl.laserbase.Data_C">
            <summary>
              Looks up a localized string similar to Data.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.src.laser.impl.laserbase.Delay_DESC">
            <summary>
              Looks up a localized string similar to Power Control Delay Time (msec).
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.src.laser.impl.laserbase.Delay_DISP">
            <summary>
              Looks up a localized string similar to Delay.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.src.laser.impl.laserbase.Error_DESC">
            <summary>
              Looks up a localized string similar to Error Status.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.src.laser.impl.laserbase.Error_DISP">
            <summary>
              Looks up a localized string similar to Error.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.src.laser.impl.laserbase.Index_DESC">
            <summary>
              Looks up a localized string similar to Identifier.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.src.laser.impl.laserbase.Index_DISP">
            <summary>
              Looks up a localized string similar to Index.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.src.laser.impl.laserbase.IsPowerControl_DESC">
            <summary>
              Looks up a localized string similar to Enable(or Disable) Laser Power Control.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.src.laser.impl.laserbase.IsPowerControl_DISP">
            <summary>
              Looks up a localized string similar to Enable.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.src.laser.impl.laserbase.Method_DESC">
            <summary>
              Looks up a localized string similar to Laser Power Control Method.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.src.laser.impl.laserbase.Method_DISP">
            <summary>
              Looks up a localized string similar to Method.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.src.laser.impl.laserbase.Name_DESC">
            <summary>
              Looks up a localized string similar to Name.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.src.laser.impl.laserbase.Name_DISP">
            <summary>
              Looks up a localized string similar to Name.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.src.laser.impl.laserbase.Power_Last__DESC">
            <summary>
              Looks up a localized string similar to Last Commanded Power (W).
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.src.laser.impl.laserbase.Power_Last__DISP">
            <summary>
              Looks up a localized string similar to Power (Last).
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.src.laser.impl.laserbase.Power_Max__DESC">
            <summary>
              Looks up a localized string similar to Max Power (W).
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.src.laser.impl.laserbase.Power_Max__DISP">
            <summary>
              Looks up a localized string similar to Power (Max).
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.src.laser.impl.laserbase.PowerControl_C">
            <summary>
              Looks up a localized string similar to Power Control.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.src.laser.impl.laserbase.Ready_DESC">
            <summary>
              Looks up a localized string similar to Reasy Status.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.src.laser.impl.laserbase.Ready_DISP">
            <summary>
              Looks up a localized string similar to Ready.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.src.laser.impl.laserbase.Status_C">
            <summary>
              Looks up a localized string similar to Status.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.src.laser.impl.laserbase.Type_DESC">
            <summary>
              Looks up a localized string similar to Type.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.src.laser.impl.laserbase.Type_DISP">
            <summary>
              Looks up a localized string similar to Type.
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.LicenseInfo">
            <summary>
            LicenseInfo for <c>SpiralLab.Sirius2</c> library
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.LicenseInfo.SerialNo">
            <summary>
            Serial no
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.LicenseInfo.IsRtcLicensed">
            <summary>
            License for RTC or not
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.LicenseInfo.RtcLicenseMax">
            <summary>
            Max counts of RTC license
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.LicenseInfo.IsRtcSyncAxisLicensed">
            <summary>
            License for syncAXIS or not
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.LicenseInfo.RtcSyncAxisLicenseMax">
            <summary>
            Max counts of syncAXIS license
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.LicenseInfo.IsMoFLicensed">
            <summary>
            Option for MoF or not
            </summary>
            <remarks>
            Used with <see cref="T:SpiralLab.Sirius2.Scanner.Rtc.IRtcMoF">IRtcMoF</see> <br/>
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.LicenseInfo.Is3DLicensed">
            <summary>
            Option for 3D or not
            </summary>
            <remarks>
            Used with <see cref="T:SpiralLab.Sirius2.Scanner.Rtc.RtcCalibrationLibrary">RtcCalibrationLibrary</see> <br/>
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.LicenseInfo.ExtendedLicense">
            <summary>
            Option for Extended feature
            </summary>
            <remarks>
            Used for customer specific functions. <br/>
            </remarks>
        </member>
        <member name="M:SpiralLab.Sirius2.LicenseInfo.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.LicenseInfo.Empty">
            <summary>
            Create empty <c>LicenseInfo</c> instance
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.LicenseInfo.ToString">
            <summary>
            Represent for <see cref="T:SpiralLab.Sirius2.LicenseInfo">LicenseInfo</see>
            </summary>
            <returns>Description for <c>LicenseInfo</c></returns>
        </member>
        <member name="T:SpiralLab.Sirius2.Logger">
            <summary>
            Logger for <c>SpiralLab.Sirius2</c> library
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Logger.Types">
            <summary>
            Log types
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Logger.Types.Trace">
            <summary>
            Most verbose level. Used for development and seldom enabled in production.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Logger.Types.Debug">
            <summary>
            Debugging the application behavior from internal events of interest.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Logger.Types.Info">
            <summary>
            Information that highlights progress or application lifetime events.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Logger.Types.Warn">
            <summary>
            Warnings about validation issues or temporary failures that can be recovered.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Logger.Types.Error">
            <summary>
            Errors where functionality has failed or Exception have been caught.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Logger.Types.Fatal">
            <summary>
            Most critical level. Application is about to abort.
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Logger.Log(SpiralLab.Sirius2.Logger.Types,System.String)">
            <summary>
            Write log message
            </summary>
            <remarks>
            Notify <see cref="E:SpiralLab.Sirius2.Config.OnLogged">Config.OnLogged</see> event. <br/>
            </remarks>
            <param name="type"><see cref="T:SpiralLab.Sirius2.Logger.Types">Log types</see></param>
            <param name="message">Log message</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Logger.Log(SpiralLab.Sirius2.Logger.Types,System.String,System.Object)">
            <summary>
            Write log message
            </summary>
            <remarks>
            Notify <see cref="E:SpiralLab.Sirius2.Config.OnLogged">Config.OnLogged</see> event. <br/>
            </remarks>
            <param name="type"><see cref="T:SpiralLab.Sirius2.Logger.Types">Log types</see></param>
            <param name="format">String format</param>
            <param name="arg0">Argument</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Logger.Log(SpiralLab.Sirius2.Logger.Types,System.String,System.Object,System.Object)">
            <summary>
            Write log message
            </summary>
            <remarks>
            Notify <see cref="E:SpiralLab.Sirius2.Config.OnLogged">Config.OnLogged</see> event. <br/>
            </remarks>
            <param name="type"><see cref="T:SpiralLab.Sirius2.Logger.Types">Log types</see></param>
            <param name="format">Format</param>
            <param name="arg0">Argument</param>
            <param name="arg1">Argument</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Logger.Log(SpiralLab.Sirius2.Logger.Types,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Write log message
            </summary>
            <remarks>
            Notify <see cref="E:SpiralLab.Sirius2.Config.OnLogged">Config.OnLogged</see> event. <br/>
            </remarks>
            <param name="type"><see cref="T:SpiralLab.Sirius2.Logger.Types">Log types</see></param>
            <param name="format">Format</param>
            <param name="arg0">Argument</param>
            <param name="arg1">Argument</param>
            <param name="arg2">Argument</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Logger.Log(SpiralLab.Sirius2.Logger.Types,System.String,System.Object[])">
            <summary>
            Write log message
            </summary>
            <remarks>
            Notify <see cref="E:SpiralLab.Sirius2.Config.OnLogged">Config.OnLogged</see> event. <br/>
            </remarks>
            <param name="type"><see cref="T:SpiralLab.Sirius2.Logger.Types">Log types</see></param>
            <param name="format">Format</param>
            <param name="args">Argument array</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Logger.Log(SpiralLab.Sirius2.Logger.Types,System.Exception)">
            <summary>
            Write log message
            </summary>
            <remarks>
            Notify <see cref="E:SpiralLab.Sirius2.Config.OnLogged">Config.OnLogged</see> event. <br/>
            </remarks>
            <param name="type"><see cref="T:SpiralLab.Sirius2.Logger.Types">Log types</see></param>
            <param name="ex"><see cref="T:System.Exception">Exception</see></param>
        </member>
        <member name="M:SpiralLab.Sirius2.Logger.Log(SpiralLab.Sirius2.Logger.Types,System.Exception,System.String)">
            <summary>
            Write log message
            </summary>
            <remarks>
            Notify <see cref="E:SpiralLab.Sirius2.Config.OnLogged">Config.OnLogged</see> event. <br/>
            </remarks>
            <param name="type"><see cref="T:SpiralLab.Sirius2.Logger.Types">Log types</see></param>
            <param name="ex"><see cref="T:System.Exception">Exception</see></param>
            <param name="message">Message</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Logger.ExceptionToString(System.Exception)">
            <summary>
            Additional exception data 
            </summary>
            <param name="ex">Exception</param>
            <returns>Converted string</returns>
        </member>
        <member name="T:SpiralLab.Sirius2.Mathematics.MatrixStack4">
            <summary>
            4x4 matrix stack
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Mathematics.MatrixStack4.ToResult">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Mathematics.MatrixStack4.BaseMatrix">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Mathematics.MatrixStack4.ToString">
            <inheritdoc/>
        </member>
        <member name="F:SpiralLab.Sirius2.Mathematics.MatrixStack4.stack">
            <summary>
            Stack container
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Mathematics.MatrixStack4.matrixResult">
            <summary>
            Matrix result
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Mathematics.MatrixStack4.isModified">
            <summary>
            To increase performance
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Mathematics.MatrixStack4.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Mathematics.MatrixStack4.#ctor(System.Numerics.Matrix4x4)">
            <summary>
            Constructor
            </summary>
            <param name="baseMatrix">Base matrix (like as rotate, ...)</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Mathematics.MatrixStack4.#ctor(SpiralLab.Sirius2.Mathematics.MatrixStack4)">
            <summary>
            Copy constructor
            </summary>
            <param name="other">other</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Mathematics.MatrixStack4.Clone">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Mathematics.MatrixStack4.Identity">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Mathematics.MatrixStack4.Push(System.Numerics.Matrix4x4)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Mathematics.MatrixStack4.Pop(System.Numerics.Matrix4x4@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Mathematics.MatrixStack4.Pop">
            <inheritdoc/>  
        </member>
        <member name="T:SpiralLab.Sirius2.Mathematics.MathHelper">
            <summary>
            MathHelper
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Mathematics.MathHelper.DegToRad(System.Double)">
            <summary>
            Convert degree to radian
            </summary>
            <param name="deg">Degree</param>
            <returns>Radian</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Mathematics.MathHelper.RadToDeg(System.Double)">
            <summary>
            Convert radian to degree
            </summary>
            <param name="radian">Radian</param>
            <returns>Degree</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Mathematics.MathHelper.IsZero(System.Double)">
            <summary>
            Zero check for float-point value by epsilon
            </summary>
            <param name="number">Value</param>
            <returns>True(Zero), False(Not zero)</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Mathematics.MathHelper.IsZero(System.Double,System.Double)">
            <summary>
            Zero check for float-point value by threshold
            </summary>
            <param name="number">Value</param>
            <param name="threshold">Threshold</param>
            <returns>True(Zero), False(Not zero)</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Mathematics.MathHelper.IsEqual(System.Double,System.Double)">
            <summary>
            Equality of float-point value with epsilon
            </summary>
            <param name="a">Value</param>
            <param name="b">Value</param>
            <returns>True(Equal), False(Not equal)</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Mathematics.MathHelper.IsEqual(System.Double,System.Double,System.Double)">
            <summary>
            Equality of float-point value by threshold
            </summary>
            <param name="a">Value</param>
            <param name="b">Value</param>
            <param name="threshold">threshold</param>
            <returns>True(Equal), False(Not equal)</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Mathematics.MathHelper.IsEqual(System.Numerics.Vector2,System.Numerics.Vector2,System.Double)">
            <summary>
            Equality of <c>System.Numerics.Vector2</c> by threshold
            </summary>
            <param name="a"><c>System.Numerics.Vector2</c></param>
            <param name="b"><c>System.Numerics.Vector2</c></param>
            <param name="threshold">Threshold</param>
            <returns>True(Equal), False(Not equal)</returns>
        </member>
        <member name="P:SpiralLab.Sirius2.Mathematics.MathHelper.Epsilon">
            <summary>
            Default floating point threshold 
            </summary>
            <remarks>
            Default: 1e-6
            </remarks>
            <returns>Threshold value</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Mathematics.MathHelper.NormalizeEulerAngle(System.Double)">
            <summary>
            Normalize angle
            </summary>
            <param name="angle">Degree</param>
            <returns>Normalized degree</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Mathematics.MathHelper.IsInRange(System.Double,System.Double,System.Double)">
            <summary>
            Range check
            </summary>
            <param name="a">Value</param>
            <param name="lower">Lower</param>
            <param name="upper">Upper</param>
            <returns>True (In range), False (Out of range)</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Mathematics.MathHelper.Max(System.Double,System.Double)">
            <summary>
            Max
            </summary>
            <param name="x">X</param>
            <param name="y">Y</param>
            <returns>Max value</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Mathematics.MathHelper.Max(System.Double,System.Double,System.Double)">
            <summary>
            Max
            </summary>
            <param name="x">X</param>
            <param name="y">Y</param>
            <param name="z">Z</param>
            <returns>Max value</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Mathematics.MathHelper.Max(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Max
            </summary>
            <param name="w">W</param>
            <param name="x">X</param>
            <param name="y">Y</param>
            <param name="z">Z</param>
            <returns>Max value</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Mathematics.MathHelper.Max(System.Double[])">
            <summary>
            Max
            </summary>
            <param name="values">Array of value</param>
            <returns>Max value</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Mathematics.MathHelper.Min(System.Double,System.Double)">
            <summary>
            Min
            </summary>
            <param name="x">X</param>
            <param name="y">Y</param>
            <returns>Min value</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Mathematics.MathHelper.Min(System.Double,System.Double,System.Double)">
            <summary>
            Min
            </summary>
            <param name="x">X</param>
            <param name="y">Y</param>
            <param name="z">Z</param>
            <returns>Min value</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Mathematics.MathHelper.Min(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Min
            </summary>
            <param name="w">W</param>
            <param name="x">X</param>
            <param name="y">Y</param>
            <param name="z">Z</param>
            <returns>Min value</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Mathematics.MathHelper.Min(System.Double[])">
            <summary>
            Min
            </summary>
            <param name="values">Array of value</param>
            <returns>Min value</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Mathematics.MathHelper.CreateFromYawPitchRoll(System.Single,System.Single,System.Single)">
            <summary>
            Create Quaternion by yaw, pitch and roll
            </summary>
            <param name="yaw"></param>
            <param name="pitch"></param>
            <param name="roll"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Mathematics.MathHelper.ToEulerAngles(System.Numerics.Quaternion)">
            <summary>
            Quaternion to Vector3
            </summary>
            <param name="q"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Mathematics.MathHelper.GetDecimalPlaces(System.Decimal)">
            <summary>
            Decimal place (or counts)
            </summary>
            <param name="n">Decimal value</param>
            <returns>Place</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Mathematics.MathHelper.GetDecimalPlaces(System.Double)">
            <summary>
            Decimal place (or counts)
            </summary>
            <param name="n">Double value</param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius2.Mathematics.IMatrixStack`1">
            <summary>
            IMatrixStack interface 
            </summary>
            <remarks>
            Used with 4x4 matrix
            </remarks>
            <typeparam name="T">Used with <see cref="T:System.Numerics.Matrix4x4">System.Numerics.Matrix4x4</see></typeparam>
        </member>
        <member name="P:SpiralLab.Sirius2.Mathematics.IMatrixStack`1.BaseMatrix">
            <summary>
            Base matrix
            </summary>
            <remarks>
            User configurable base matrix. (like as rotate, translate, ...) <br/>
            Result = matries at stack * <c>BaseMatrix</c>.<br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Mathematics.IMatrixStack`1.ToResult">
            <summary>
            Result matrix
            </summary>
            <remarks>
            Calculate whole matries at stack. <br/>
            Result = matries at stack * <c>BaseMatrix</c>. <br/>
            </remarks>
        </member>
        <member name="M:SpiralLab.Sirius2.Mathematics.IMatrixStack`1.Identity">
            <summary>
            Clear (or reset) as identity matrix 
            </summary>
            <remarks>
            <c>BaseMatrix</c> is not modified. <br/>
            </remarks>
        </member>
        <member name="M:SpiralLab.Sirius2.Mathematics.IMatrixStack`1.Push(`0)">
            <summary>
            Push matrix into stack at top
            <code>
            float radius = 10;
            float width = 10;
            float height = 5;
            rtc.ListBegin();
            for (float angle = 0; angle &lt; 360; angle += 10)
            {
                var radian = angle * Math.PI / 180.0;
                rtc.MatrixStack.Push(Matrix4x4.CreateTranslation(radius, 0, 0)); // 2. translate
                rtc.MatrixStack.Push(Matrix4x4.CreateRotationZ((float) radian)); // 1. rotate
                rtc.ListJumpTo(new Vector2(-width / 2, height / 2));
                rtc.ListMarkTo(new Vector2(width / 2, height / 2));
                rtc.ListMarkTo(new Vector2(width / 2, -height / 2));
                rtc.ListMarkTo(new Vector2(-width / 2, -height / 2));
                rtc.ListMarkTo(new Vector2(-width / 2, height / 2));
                rtc.MatrixStack.Pop(); // 1. rotate
                rtc.MatrixStack.Pop(); // 2. translate
            }
            rtc.ListEnd();
            rtc.ListExecute(true);
            </code>
            </summary>
            <param name="matrix">4x4 matrix<br/>Used with <see cref="T:System.Numerics.Matrix4x4">System.Numerics.Matrix4x4</see></param>
        </member>
        <member name="M:SpiralLab.Sirius2.Mathematics.IMatrixStack`1.Pop(`0@)">
            <summary>
            Pop matrix from stack at top
            </summary>
            <param name="matrix">Popped 4x4 matrix<br/>Used with <see cref="T:System.Numerics.Matrix4x4">System.Numerics.Matrix4x4</see></param>
        </member>
        <member name="M:SpiralLab.Sirius2.Mathematics.IMatrixStack`1.Pop">
            <summary>
            Pop matrix from stack at top
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Mathematics.Offset">
            <summary>
            Offset 
            </summary>
            <remarks>
            Dx, Dy, Dz and Rotate Z Angle <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Mathematics.Offset.Dx">
            <summary>
            Translate x (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Mathematics.Offset.Dy">
            <summary>
            Translate y (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Mathematics.Offset.Dz">
            <summary>
            Translate z (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Mathematics.Offset.AngleZ">
            <summary>
            Rotate z (°)
            </summary>
            <remarks>
            Positive(+) value is CCW direction. <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Mathematics.Offset.Tag">
            <summary>
            User data
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Mathematics.Offset.ToMatrix">
            <summary>
            Calculate <c>Offset</c> to 4x4 matrix
            </summary>
            <remarks>
            Transformation order: Rotate by angle and then translate dx, dy, dz <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Mathematics.Offset.ToXyz">
            <summary>
            Get dx, dy, dz by <c>System.Numerics.Vector3</c>
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Mathematics.Offset.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <remarks>
            Transformation order: Rotate by angle and then translate dx, dy <br/>
            </remarks>
            <param name="dx">Dx (mm)</param>
            <param name="dy">Dy (mm)</param>
            <param name="angleZ">Angle Z (°).<br/>Positive(+) value is CCW direction. <br/></param>
        </member>
        <member name="M:SpiralLab.Sirius2.Mathematics.Offset.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <remarks>
            Transformation order: Rotate by angle and then translate dx, dy, dz <br/>
            </remarks>
            <param name="dx">Dx (mm)</param>
            <param name="dy">Dy (mm)</param>
            <param name="dz">Dz (mm)</param>
            <param name="angleZ">Angle Z (°).<br/>Positive(+) value is CCW direction. <br/></param>
        </member>
        <member name="M:SpiralLab.Sirius2.Mathematics.Offset.#ctor(System.Numerics.Vector2,System.Double)">
            <summary>
            Constructor
            </summary>
            <remarks>
            Offset by translate dx, dy <br/>
            Transformation order: Rotate by angle and then translate dx, dy, dz <br/>
            </remarks>
            <param name="offsetXy">Dx, Dy (mm)</param>
            <param name="angleZ">Angle Z (°).<br/>Positive(+) value is CCW direction. <br/></param>
        </member>
        <member name="M:SpiralLab.Sirius2.Mathematics.Offset.#ctor(System.Numerics.Vector3,System.Double)">
            <summary>
            Constructor
            </summary>
            <remarks>
            Offset by translate dx, dy, dz <br/>
            Transformation order: Rotate by angle and then translate dx, dy, dz <br/>
            </remarks>
            <param name="offsetXyz">Dx, Dy, Dz (mm)</param>
            <param name="angleZ">Angle Z (°).<br/>Positive(+) value is CCW direction. <br/></param>
        </member>
        <member name="M:SpiralLab.Sirius2.Mathematics.Offset.ToString">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Mathematics.Offset.Zero">
            <summary>
            Create <c>Offset</c> with zero values
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Mathematics.Offset.Equals(SpiralLab.Sirius2.Mathematics.Offset)">
            <summary>
            Returns a value that indicates whether this instance and another offset are equal
            </summary>
            <param name="other"><c>Offset</c></param>
            <returns>True(Equal), False(Not equal)</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Mathematics.Offset.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Mathematics.Offset.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Mathematics.Offset.op_Addition(SpiralLab.Sirius2.Mathematics.Offset,SpiralLab.Sirius2.Mathematics.Offset)">
            <summary>
            Operator +
            </summary>
            <param name="left"><c>Offset</c></param>
            <param name="right"><c>Offset</c></param>
            <returns><c>Offset</c></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Mathematics.Offset.op_Subtraction(SpiralLab.Sirius2.Mathematics.Offset,SpiralLab.Sirius2.Mathematics.Offset)">
            <summary>
            Operator -
            </summary>
            <param name="left"><c>Offset</c></param>
            <param name="right"><c>Offset</c></param>
            <returns><c>Offset</c></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Mathematics.Offset.op_Equality(SpiralLab.Sirius2.Mathematics.Offset,SpiralLab.Sirius2.Mathematics.Offset)">
            <summary>
            Returns a value that indicates whether each pair of elements in two specified <c>Offset</c> is equal
            </summary>
            <param name="left"><c>Offset</c></param>
            <param name="right"><c>Offset</c></param>
            <returns>True(Equal), False(Not equal)</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Mathematics.Offset.op_Inequality(SpiralLab.Sirius2.Mathematics.Offset,SpiralLab.Sirius2.Mathematics.Offset)">
            <summary>
            Returns a value that indicates whether two specified <c>Offset</c> are not equal
            </summary>
            <param name="left"><c>Offset</c></param>
            <param name="right"><c>Offset</c></param>
            <returns>True(Not equal), False(Equal)</returns>
        </member>
        <member name="T:SpiralLab.Sirius2.PowerMap.PowerMapFactory">
            <summary>
            PowerMapFactory
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMap.PowerMapFactory.CreatePowerMapDefault(System.Int32,System.String)">
            <summary>
            Create PowerMap (default version)
            </summary>
            <param name="index">Index (0,1,2,...)</param>
            <param name="name">Name</param>
            <returns><see cref="T:SpiralLab.Sirius2.PowerMap.IPowerMap">IPowerMap</see></returns>
        </member>
        <member name="T:SpiralLab.Sirius2.PowerMap.IPowerMap">
            <summary>
            IPowerMap interface
            <code>
            var rtc = ScannerFactory.CreateRtc6(0, ...);
            rtc.Initialize();
            var laser = LaserFactor.CreateVirtualAnalog(0, 10, 1);
            laser.Scanner = rtc; 
            laser.Initialize();
            var powerMeter = PowerMeterFactory.CreateOphirPhotonics(0, "SERIALNO");
            powerMeter.Initialize();
            var powerMap = PowerMapFactory.CreateMap();
            powerMap.Update("50000", 2, 1);
            powerMap.Update("50000", 4, 3.1);
            powerMap.Update("50000", 6, 5.2);
            powerMap.Update("50000", 8, 7.4);
            powerMap.Update("50000", 10, 9.5);
            //or powerMapControl.CtlMapping( new string[] { "50000" }, 0, 10, 5, 5000, 5);
            ...
            powerMap.Interpolate("50000", 5, var out xWatt);
            Laser.CtlPower(xWatt);
            ...
            </code>
            <code>
            X(input watt), Y(output or measured watt) table for power map
                |
             Y  |         __________
                |       _/ Category \_...
             P  |      /
             o  |    _/            _...
             w  |       __________/ 
             e  |      / Category
             r  |     /
            (W) |   _/
                |__________________________
                       X Power (W)
            </code>
            </summary>
            <remarks>
            Open powermap from file by <see cref="M:SpiralLab.Sirius2.PowerMap.PowerMapSerializer.Open(System.String,SpiralLab.Sirius2.PowerMap.IPowerMap)">PowerMapSerializer.Open</see> <br/>
            Save powermap into file by <see cref="M:SpiralLab.Sirius2.PowerMap.PowerMapSerializer.Save(System.String,SpiralLab.Sirius2.PowerMap.IPowerMap)">PowerMapSerializer.Save</see> <br/>
            </remarks>
        </member>
        <member name="E:SpiralLab.Sirius2.PowerMap.IPowerMap.OnOpened">
            <summary>
            Event for power mapping file has opened
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius2.PowerMap.IPowerMap.OnSaved">
            <summary>
            Event for power mapping file has saved
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius2.PowerMap.IPowerMap.OnMappingStarted">
            <summary>
            Event for power mapping has started
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius2.PowerMap.IPowerMap.OnMappingProgress">
            <summary>
            Event for power mapping is progressing
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius2.PowerMap.IPowerMap.OnMappingFailed">
            <summary>
            Event for power mapping has failed
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius2.PowerMap.IPowerMap.OnMappingFinished">
            <summary>
            Event for power mapping has finished
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius2.PowerMap.IPowerMap.OnVerifyStarted">
            <summary>
            Event for power verify has started
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius2.PowerMap.IPowerMap.OnVerifyProgress">
            <summary>
            Event for power verify is progressing
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius2.PowerMap.IPowerMap.OnVerifyFailed">
            <summary>
            Event for power verify has failed
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius2.PowerMap.IPowerMap.OnVerifyFinished">
            <summary>
            Event for power verify has finished
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius2.PowerMap.IPowerMap.OnCompensateStarted">
            <summary>
            Event for power compensate has started
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius2.PowerMap.IPowerMap.OnCompensateProgress">
            <summary>
            Event for power compensate is progressing
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius2.PowerMap.IPowerMap.OnCompensateFailed">
            <summary>
            Event for power compensate has failed
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius2.PowerMap.IPowerMap.OnCompensateFinished">
            <summary>
            Event for power compensate has finished
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.PowerMap.IPowerMap.Index">
            <summary>
            Indentifier
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.PowerMap.IPowerMap.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.PowerMap.IPowerMap.SyncRoot">
            <summary>
            Object for synchronization
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.PowerMap.IPowerMap.FileName">
            <summary>
            FileName
            </summary>
            <remarks>
            Used by internally. Do Not edit. <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.PowerMap.IPowerMap.PowerMeter">
            <summary>
            Assigned <see cref="T:SpiralLab.Sirius2.PowerMeter.IPowerMeter">IPowerMeter</see>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.PowerMap.IPowerMap.Laser">
            <summary>
            Assigned <see cref="T:SpiralLab.Sirius2.Laser.ILaser">ILaser</see>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.PowerMap.IPowerMap.Rtc">
            <summary>
            Assigned <see cref="T:SpiralLab.Sirius2.Scanner.Rtc.IRtc">IRtc</see>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.PowerMap.IPowerMap.IsReady">
            <summary>
            Ready status
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.PowerMap.IPowerMap.IsBusy">
            <summary>
            Busy (or progressing) status
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.PowerMap.IPowerMap.IsError">
            <summary>
            Error status
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.PowerMap.IPowerMap.InternalData">
            <summary>
            Internal data
            </summary>
            <remarks>
            Key: Category <br/>
            Value: (Key: X-watt, Value: Y-watt) <br/>
            <c>InternalData</c> opened by <see cref="M:SpiralLab.Sirius2.PowerMap.PowerMapSerializer.Open(System.String,SpiralLab.Sirius2.PowerMap.IPowerMap)">PowerMapSerializer.Open</see> <br/>
            <c>InternalData</c> saved by <see cref="M:SpiralLab.Sirius2.PowerMap.PowerMapSerializer.Save(System.String,SpiralLab.Sirius2.PowerMap.IPowerMap)">PowerMapSerializer.Save</see> <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.PowerMap.IPowerMap.IsEnableLookUp">
            <summary>
            Enable(or disable) lookup
            </summary>
            <remarks>
            If <see cref="P:SpiralLab.Sirius2.PowerMap.IPowerMap.IsEnableLookUp">IsEnableLookUp</see> is <c>True</c>, <see cref="M:SpiralLab.Sirius2.PowerMap.IPowerMap.LookUp(System.String,System.Double,System.Double@,System.Double@,System.Double@)">LookUp</see> woulde be calculate return value to compensate. <br/>
            If <see cref="P:SpiralLab.Sirius2.PowerMap.IPowerMap.IsEnableLookUp">IsEnableLookUp</see> is <c>False</c>, <see cref="M:SpiralLab.Sirius2.PowerMap.IPowerMap.LookUp(System.String,System.Double,System.Double@,System.Double@,System.Double@)">LookUp</see> would be do return without calcuate. <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.PowerMap.IPowerMap.Tag">
            <summary>
            User data
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMap.IPowerMap.Categories(System.String[]@)">
            <summary>
            Query categories
            </summary>
            <param name="categories">Array of categories</param>
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMap.IPowerMap.Clear(System.String)">
            <summary>
            Clear category
            </summary>
            <param name="category">Category (clear all by default)</param>
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMap.IPowerMap.Reset1to1(System.String,System.Double)">
            <summary>
            Reset category as 1:1 map table
            <code>
                |                  .
             Y  |                .
                |              .
             P  |            .
             o  |          .   
             w  |        .
             e  |      .
             r  |    .
            (W) |  .
                |._____________________
                       X Power (W)
            </code>
            </summary>
            <param name="category">Category</param>
            <param name="maxXWatt">Max x power (W)</param>
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMap.IPowerMap.Update(System.String,System.Double,System.Double)">
            <summary>
            Update lookup table data (category, x value, y (or measured) value)
            </summary>
            <param name="category">Category</param>
            <param name="xWatt">X watt (W)</param>
            <param name="yWatt">Y(or measured) power (W)</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMap.IPowerMap.Query(System.String,System.Double,System.Double@)">
            <summary>
            Query lookup table (category, x watt, y watt)
            </summary>
            <param name="category">Category</param>
            <param name="xWatt">X watt (W)</param>
            <param name="yWatt">Y(or measured) power (W)</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMap.IPowerMap.MinMaxY(System.String,System.Double@,System.Double@)">
            <summary>
            Query max y (or measured) power (W)
            </summary>
            <param name="category">Category</param>
            <param name="minYWatt">Min y(or measured) power (W)</param>
            <param name="maxYWatt">Max y(or measured) power (W)</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMap.IPowerMap.MinMaxX(System.String,System.Double@,System.Double@)">
            <summary>
            Query min, max x watt value
            </summary>
            <param name="category">Category</param>
            <param name="minXWatt">Min. x watt (W)</param>
            <param name="maxXWatt">Max. x watt (W)</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMap.IPowerMap.LookUp(System.String,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            Query lookup x value by target y value at specific category
            <code>
                |                 Category
             Y  |                    ___
                |                   /
             P  |             _____/
             o  &gt;..........._/  .  
             w  |        __/ .  .
             e  |       / .  .  .
             r  |     _/  .  .  .
            (W) |  __/    .  .  .
                |_/______Lx__v__Rx_____
                       X Power (W)
            </code>
            </summary>
            <param name="category">Category</param>
            <param name="targetYWatt">Target y watt (W)</param>
            <param name="xWatt">Compensated x watt (W)<br/>Valid range of <c>xWatt</c> is from <c>xLeftWatt</c> to <c>xRightWatt</c></param>
            <param name="xLeftWatt">Left x watt (W)</param>
            <param name="xRightWatt">Right x watt (W)</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMap.IPowerMap.CtlMapping(System.String[],System.Double[])">
            <summary>
            Start power mapping
            <code>
                |                    Category
             Y  |                    _____
                |                   /
             P  |              ____/
             o  &lt;..........._./     
             w  |        __/ .
             e  |       /    .
             r  |     _/     .
            (W) |  __/       .
                |_/__________^_____________
                       X Power (W)
            </code>
            </summary>
            <remarks>
            Do laser on by each watt (x: input) and measure output power (y: output). <br/>
            Update measured output power value(W) into <c>IPowerMap</c>. <br/>
            Used with <see cref="T:SpiralLab.Sirius2.PowerMeter.IPowerMeter">IPowerMeter</see>, <see cref="T:SpiralLab.Sirius2.Laser.ILaser">ILaser</see>, <see cref="T:SpiralLab.Sirius2.Scanner.Rtc.IRtc">IRtc</see>. Assign these values before do start. <br/>
            Used with <see cref="P:SpiralLab.Sirius2.Config.PowerMapPreHeatTimeMs">Config.PowerMapPreHeatTimeMs</see>, <see cref="P:SpiralLab.Sirius2.Config.PowerMapHoldTimeMs">Config.PowerMapHoldTimeMs</see>, <see cref="P:SpiralLab.Sirius2.Config.PowerMapInRangeThreshold">Config.PowerMapInRangeThreshold</see> values. <br/>
            Notify <see cref="E:SpiralLab.Sirius2.PowerMap.IPowerMap.OnMappingStarted">OnMappingStarted</see>, <see cref="E:SpiralLab.Sirius2.PowerMap.IPowerMap.OnMappingProgress">OnMappingProgress</see>, <see cref="E:SpiralLab.Sirius2.PowerMap.IPowerMap.OnMappingFinished">OnMappingFinished</see> event. <br/>
            Consider as its working within async threads. <br/>
            </remarks>
            <param name="categories"></param>
            <param name="xWatts">Array of x watts (W)</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMap.IPowerMap.CtlVerify(System.Collections.Generic.KeyValuePair{System.String,System.Double}[])">
            <summary>
            Start power verification
            <code>
                |                   Category
             Y  |                   _____
                |                  /
             P  |             ____/
             o  |           _/     
             w  >........__.
             e  |       /  . 
             r  |     _/   .
            (W) |  __/     . 
                |_/________v________________
                       X Power (W)
            </code>
            </summary>
            <remarks>
            Do laser on and measure output power by each category and target watt (y). <br/>
            Passed(or succeeded) if measured laser output power value(W) in range of threshold percent. <br/>
            Used with <see cref="T:SpiralLab.Sirius2.PowerMeter.IPowerMeter">IPowerMeter</see>, <see cref="T:SpiralLab.Sirius2.Laser.ILaser">ILaser</see>, <see cref="T:SpiralLab.Sirius2.Scanner.Rtc.IRtc">IRtc</see>. Assign these values before do start. <br/>
            Used with <see cref="P:SpiralLab.Sirius2.Config.PowerMapPreHeatTimeMs">Config.PowerMapPreHeatTimeMs</see>, <see cref="P:SpiralLab.Sirius2.Config.PowerMapHoldTimeMs">Config.PowerMapHoldTimeMs</see>, <see cref="P:SpiralLab.Sirius2.Config.PowerMapInRangeThreshold">Config.PowerMapInRangeThreshold</see> values. <br/>
            Notify <see cref="E:SpiralLab.Sirius2.PowerMap.IPowerMap.OnVerifyStarted">OnVerifyStarted</see>, <see cref="E:SpiralLab.Sirius2.PowerMap.IPowerMap.OnVerifyProgress">OnVerifyProgress</see>, <see cref="E:SpiralLab.Sirius2.PowerMap.IPowerMap.OnVerifyFinished">OnVerifyFinished</see> event. <br/>
            Consider as its working within async threads. <br/>
            </remarks>
            <param name="categoryAndYWatts">Array of category and target y watt(W)</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMap.IPowerMap.CtlCompensate(System.Collections.Generic.KeyValuePair{System.String,System.Double}[])">
            <summary>
            Start power compensation
            <code>
                |                   Category
             Y  |          |        _____
                |          |       /
             P  |          v  ____/
             o  |           _/     
             w  >........__.  &lt;---- Compensate 
             e  |       /  . 
             r  |     _/   .
            (W) |  __/     . 
                |_/________v________________
                       X Power (W)
            </code>
            </summary>
            <remarks>
            Do laser on and measure output power each category and watts. <br/>
            Passed(or succeeded) if measured laser output power value(W) in range of threshold percent. <br/>
            Failed(or out of range threshold percent), then retry(update <see cref="T:SpiralLab.Sirius2.PowerMap.IPowerMap">IPowerMap</see> again) 2nd run with whether in-range power or not. <br/>
            Used with <see cref="T:SpiralLab.Sirius2.PowerMeter.IPowerMeter">IPowerMeter</see>, <see cref="T:SpiralLab.Sirius2.Laser.ILaser">ILaser</see>, <see cref="T:SpiralLab.Sirius2.Scanner.Rtc.IRtc">IRtc</see>. Assign these values before do start. <br/>
            Used with <see cref="P:SpiralLab.Sirius2.Config.PowerMapPreHeatTimeMs">Config.PowerMapPreHeatTimeMs</see>, <see cref="P:SpiralLab.Sirius2.Config.PowerMapHoldTimeMs">Config.PowerMapHoldTimeMs</see>, <see cref="P:SpiralLab.Sirius2.Config.PowerMapInRangeThreshold">Config.PowerMapInRangeThreshold</see>, <see cref="P:SpiralLab.Sirius2.Config.PowerMapOutOfRangeThreshold">Config.PowerMapOutOfRangeThreshold</see> and <see cref="P:SpiralLab.Sirius2.Config.PowerMapCompensateRetryCounts">Config.PowerMapCompensateRetryCounts</see> values. <br/>
            Notify <see cref="E:SpiralLab.Sirius2.PowerMap.IPowerMap.OnCompensateStarted">OnCompensateStarted</see>, <see cref="E:SpiralLab.Sirius2.PowerMap.IPowerMap.OnCompensateProgress">OnCompensateProgress</see>, <see cref="E:SpiralLab.Sirius2.PowerMap.IPowerMap.OnCompensateFinished">OnCompensateFinished</see> event. <br/>
            Consider as its working within async threads. <br/>
            </remarks>
            <param name="categoryAndYWatts">Array of category and target y watt(W)</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMap.IPowerMap.CtlStop">
            <summary>
            Stop (power mapping/veriification/ compensation)
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMap.IPowerMap.CtlReset">
            <summary>
            Reset error status
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMap.IPowerMap.NotifyMappingOpened">
            <summary>
            Notify power mapping file has opened
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMap.IPowerMap.NotifyMappingSaved">
            <summary>
            Notify power mapping file has saved
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMap.IPowerMap.NotifyMappingStarted">
            <summary>
            Notify power mapping has started
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMap.IPowerMap.NotifyMappingProgress(System.String,System.Double)">
            <summary>
            Notify power mapping is progressing
            </summary>
            <param name="category">Target category</param>
            <param name="xWatt">Target x watt (W)</param>
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMap.IPowerMap.NotifyMappingFailed">
            <summary>
            Notify power mapping has failied
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMap.IPowerMap.NotifyMappingFinished">
            <summary>
            Notify power mapping has finished
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMap.IPowerMap.NotifyVerifyStarted">
            <summary>
            Notify power verify has started
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMap.IPowerMap.NotifyVerifyProgress(System.String,System.Double)">
            <summary>
            Notify power verify is progressing
            </summary>
            <param name="category">Target category</param>
            <param name="xWatt">Target x watt (W)</param>
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMap.IPowerMap.NotifyVerifyFailed">
            <summary>
            Notify power verify has failed
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMap.IPowerMap.NotifyVerifyFinished">
            <summary>
            Notify power verify has finished
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMap.IPowerMap.NotifyCompensateStarted">
            <summary>
            Notify power compensate has started
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMap.IPowerMap.NotifyCompensateProgress(System.String,System.Double)">
            <summary>
            Notify power compensate is progressing
            </summary>
            <param name="category">Target category</param>
            <param name="xWatt">Target x watt (W)</param>
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMap.IPowerMap.NotifyCompensateFailed">
            <summary>
            Notify power compensate has failed
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMap.IPowerMap.NotifyCompensateFinished">
            <summary>
            Notify power compensate has finished
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.PowerMap.PowerMapBase">
            <summary>
            PowerMap Base  
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius2.PowerMap.PowerMapBase.OnOpened">
            <inheritdoc/>          
        </member>
        <member name="E:SpiralLab.Sirius2.PowerMap.PowerMapBase.OnSaved">
            <inheritdoc/>          
        </member>
        <member name="E:SpiralLab.Sirius2.PowerMap.PowerMapBase.OnMappingStarted">
            <inheritdoc/>          
        </member>
        <member name="E:SpiralLab.Sirius2.PowerMap.PowerMapBase.OnMappingProgress">
            <inheritdoc/>  
        </member>
        <member name="E:SpiralLab.Sirius2.PowerMap.PowerMapBase.OnMappingFailed">
            <inheritdoc/>  
        </member>
        <member name="E:SpiralLab.Sirius2.PowerMap.PowerMapBase.OnMappingFinished">
            <inheritdoc/>  
        </member>
        <member name="E:SpiralLab.Sirius2.PowerMap.PowerMapBase.OnVerifyStarted">
            <inheritdoc/>  
        </member>
        <member name="E:SpiralLab.Sirius2.PowerMap.PowerMapBase.OnVerifyProgress">
            <inheritdoc/>  
        </member>
        <member name="E:SpiralLab.Sirius2.PowerMap.PowerMapBase.OnVerifyFailed">
            <inheritdoc/>  
        </member>
        <member name="E:SpiralLab.Sirius2.PowerMap.PowerMapBase.OnVerifyFinished">
            <inheritdoc/>  
        </member>
        <member name="E:SpiralLab.Sirius2.PowerMap.PowerMapBase.OnCompensateStarted">
            <inheritdoc/>  
        </member>
        <member name="E:SpiralLab.Sirius2.PowerMap.PowerMapBase.OnCompensateProgress">
            <inheritdoc/>  
        </member>
        <member name="E:SpiralLab.Sirius2.PowerMap.PowerMapBase.OnCompensateFailed">
            <inheritdoc/>  
        </member>
        <member name="E:SpiralLab.Sirius2.PowerMap.PowerMapBase.OnCompensateFinished">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.PowerMap.PowerMapBase.SyncRoot">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.PowerMap.PowerMapBase.Index">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.PowerMap.PowerMapBase.Name">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.PowerMap.PowerMapBase.FileName">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.PowerMap.PowerMapBase.PowerMeter">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.PowerMap.PowerMapBase.Laser">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.PowerMap.PowerMapBase.Rtc">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.PowerMap.PowerMapBase.IsReady">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.PowerMap.PowerMapBase.IsBusy">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.PowerMap.PowerMapBase.IsError">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.PowerMap.PowerMapBase.InternalData">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.PowerMap.PowerMapBase.IsEnableLookUp">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.PowerMap.PowerMapBase.Location">
            <summary>
            Scanner x,y location 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.PowerMap.PowerMapBase.Tag">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMap.PowerMapBase.ToString">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMap.PowerMapBase.#ctor(System.Int32,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="index">Index (0,1,2,...)</param>
            <param name="name">Name</param>
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMap.PowerMapBase.Categories(System.String[]@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMap.PowerMapBase.Clear(System.String)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMap.PowerMapBase.Reset1to1(System.String,System.Double)">
            <inheritdoc/> 
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMap.PowerMapBase.Update(System.String,System.Double,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMap.PowerMapBase.Query(System.String,System.Double,System.Double@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMap.PowerMapBase.MinMaxY(System.String,System.Double@,System.Double@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMap.PowerMapBase.MinMaxX(System.String,System.Double@,System.Double@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMap.PowerMapBase.LookUp(System.String,System.Double,System.Double@,System.Double@,System.Double@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMap.PowerMapBase.CtlMapping(System.String[],System.Double[])">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMap.PowerMapBase.CtlVerify(System.Collections.Generic.KeyValuePair{System.String,System.Double}[])">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMap.PowerMapBase.CtlCompensate(System.Collections.Generic.KeyValuePair{System.String,System.Double}[])">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMap.PowerMapBase.CtlStop">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMap.PowerMapBase.CtlReset">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMap.PowerMapBase.NotifyMappingOpened">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMap.PowerMapBase.NotifyMappingSaved">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMap.PowerMapBase.NotifyMappingStarted">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMap.PowerMapBase.NotifyMappingProgress(System.String,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMap.PowerMapBase.NotifyMappingFailed">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMap.PowerMapBase.NotifyMappingFinished">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMap.PowerMapBase.NotifyVerifyStarted">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMap.PowerMapBase.NotifyVerifyProgress(System.String,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMap.PowerMapBase.NotifyVerifyFailed">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMap.PowerMapBase.NotifyVerifyFinished">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMap.PowerMapBase.NotifyCompensateStarted">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMap.PowerMapBase.NotifyCompensateProgress(System.String,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMap.PowerMapBase.NotifyCompensateFailed">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMap.PowerMapBase.NotifyCompensateFinished">
            <inheritdoc/>  
        </member>
        <member name="T:SpiralLab.Sirius2.PowerMap.PowerMapDefault">
            <summary>
            PowerMapDefault  
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMap.PowerMapDefault.#ctor(System.Int32,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="index">Index (0,1,2,...)</param>
            <param name="name">Name</param>
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMap.PowerMapDefault.CtlMapping(System.String[],System.Double[])">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMap.PowerMapDefault.DoPowerMapping(System.String[],System.Double[])">
            <summary>
            Routine for power mapping
            </summary>
            <param name="categories"></param>
            <param name="xWatts">Array of x watt(W)</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMap.PowerMapDefault.CtlVerify(System.Collections.Generic.KeyValuePair{System.String,System.Double}[])">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMap.PowerMapDefault.DoPowerVerify(System.Collections.Generic.KeyValuePair{System.String,System.Double}[])">
            <summary>
            Routine for power verification
            </summary>
            <param name="categoryAndYWatts">Array of key(category) and value(target watt(W))</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMap.PowerMapDefault.CtlCompensate(System.Collections.Generic.KeyValuePair{System.String,System.Double}[])">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMap.PowerMapDefault.DoPowerCompensate(System.Collections.Generic.KeyValuePair{System.String,System.Double}[])">
            <summary>
            Routine for power compensation
            </summary>
            <param name="categoryAndYWatts">Array of key(category) and value(target watt(W))</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMap.PowerMapDefault.CtlStop">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMap.PowerMapDefault.CtlReset">
            <inheritdoc/>
        </member>
        <member name="T:SpiralLab.Sirius2.PowerMap.PowerMapSerializer">
            <summary>
            Powermap serializer
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMap.PowerMapSerializer.Open(System.String,SpiralLab.Sirius2.PowerMap.IPowerMap)">
            <summary>
            Open <see cref="P:SpiralLab.Sirius2.PowerMap.IPowerMap.InternalData">IPowerMap.InternalData</see> from file
            </summary>
            <remarks>
            Notify <see cref="E:SpiralLab.Sirius2.PowerMap.IPowerMap.OnOpened">IPowerMap.OnOpened</see> event. <br/>
            </remarks>
            <param name="mapFileName">Powermap filename</param>
            <param name="powerMap"><see cref="P:SpiralLab.Sirius2.PowerMap.IPowerMap.InternalData">IPowerMap.InternalData</see> would be opened(or replaced).</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMap.PowerMapSerializer.Save(System.String,SpiralLab.Sirius2.PowerMap.IPowerMap)">
            <summary>
            Save <see cref="P:SpiralLab.Sirius2.PowerMap.IPowerMap.InternalData">IPowerMap.InternalData</see> into file
            </summary>
            <remarks>
            Notify <see cref="E:SpiralLab.Sirius2.PowerMap.IPowerMap.OnSaved">IPowerMap.OnSaved</see> event. <br/>
            </remarks>
            <param name="mapFileName">Powermap filename</param>
            <param name="powerMap"><see cref="P:SpiralLab.Sirius2.PowerMap.IPowerMap.InternalData">IPowerMap.InternalData</see> would be saved.</param>
            <returns>Success or failed</returns>
        </member>
        <member name="T:SpiralLab.Sirius2.PowerMeter.PowerMeterFactory">
            <summary>
            PowerMeter factory
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMeter.PowerMeterFactory.CreateVirtual(System.Int32,System.Double)">
            <summary>
            Create virtual powermeter controller
            </summary>
            <param name="index">Identifier (0,1,2,3, ...)</param>
            <param name="maxWatt">Max watt (W)</param>
            <returns><see cref="T:SpiralLab.Sirius2.PowerMeter.PowerMeterVirtual">PowerMeterVirtual</see></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMeter.PowerMeterFactory.CreateOphirPhotonics(System.Int32,System.String)">
            <summary>
            Create Ophir Photonics powermeter controller 
            </summary>
            <remarks>
            Supported Ophir devices: Ariel, Centauri, StarBright, StarLite, Juno, Juno+, Vega, Nova II, Pulsar <br/>
            Install the Visual Studio 2019 Visual C++ redistributable, available at https://docs.microsoft.com/en-us/cpp/windows/latest-supported-vc-redist. <br/>
            Install StarLab 3.8, available at <see href="https://www.ophiropt.com/en/g/com-object">https://www.ophiropt.com/en/g/com-object</see>. <br/>
            </remarks>
            <param name="index">Identifier (0,1,2,3, ...)</param>
            <param name="serialNo">Serial no</param>
            <returns><see cref="T:SpiralLab.Sirius2.PowerMeter.PowerMeterOphir">PowerMeterOphir</see></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMeter.PowerMeterFactory.CreateCoherentPowerMax(System.Int32,System.Int32)">
            <summary>
            Create Coherent PowerMax USB/RS powermeter controller 
            </summary>
            <param name="index">Identifier (0,1,2,3, ...)</param>
            <param name="comPort">COM port</param>
            <returns><see cref="T:SpiralLab.Sirius2.PowerMeter.PowerMeterCoherentPowerMax">PowerMeterCoherentPowerMax</see></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMeter.PowerMeterFactory.CreateThorlabs(System.Int32,System.String)">
            <summary>
            Create Thorlabs PowerMeter controller (PM100A, PM100D, PM400, PM5020, PM100USB, PM101 Series, PM102 Series, PM103 Series, PM16 Series, PM160 Series, PM200, SPCNT, ...)
            </summary>
            <remarks>
            Install Optical Power Monitor (OPM) v5.0 Software package at first. <br/>
            Link: <see href="https://www.thorlabs.com/software_pages/ViewSoftwarePage.cfm?Code=OPM">https://www.thorlabs.com/software_pages/ViewSoftwarePage.cfm?Code=OPM</see>. <br/>
            </remarks>
            <param name="index">Identifier (0,1,2,3, ...)</param>
            <param name="serialNo">Serial no</param>
            <returns><see cref="T:SpiralLab.Sirius2.PowerMeter.PowerMeterThorLabs">PowerMeterThorLabs</see></returns>
        </member>
        <member name="T:SpiralLab.Sirius2.PowerMeter.PowerMeterTypes">
            <summary>
            Powermeter types 
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.PowerMeter.PowerMeterTypes.Virtual">
            <summary>
            Virtual
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.PowerMeter.PowerMeterTypes.CoherentPowerMax">
            <summary>
            Coherent PowerMax USB/RS Series
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.PowerMeter.PowerMeterTypes.OphirPhotonicsStarLab">
            <summary>
            Ophir Photonics StarLab
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.PowerMeter.PowerMeterTypes.Thorlabs">
            <summary>
            Optical Power Monitor (OPM)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.PowerMeter.PowerMeterTypes.UserDefined1">
            <summary>
            User defined1 laser
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.PowerMeter.PowerMeterTypes.UserDefined2">
            <summary>
            User defined2 laser
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.PowerMeter.PowerMeterTypes.UserDefined3">
            <summary>
            User defined3 laser
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.PowerMeter.PowerMeterTypes.UserDefined4">
            <summary>
            User defined4 laser
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.PowerMeter.PowerMeterTypes.UserDefined5">
            <summary>
            User defined5 laser
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.PowerMeter.PowerMeterTypes.UserDefined6">
            <summary>
            User defined6 laser
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.PowerMeter.PowerMeterTypes.UserDefined7">
            <summary>
            User defined7 laser
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.PowerMeter.PowerMeterTypes.UserDefined8">
            <summary>
            User defined8 laser
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.PowerMeter.PowerMeterTypes.UserDefined9">
            <summary>
            User defined9 laser
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.PowerMeter.PowerMeterTypes.UserDefined10">
            <summary>
            User defined10 laser
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.PowerMeter.IPowerMeter">
            <summary>
            IPowerMeter interface
            <code>
            var powerMeter = PowerMeterFactory.CreateOphirPhotonics(0, "SERIALNO");
            powerMeter.Initialize();
            </code>
            </summary>
            <remarks>
            Measuring(or monitoring) device for output laser power. <br/>
            </remarks>
        </member>
        <member name="E:SpiralLab.Sirius2.PowerMeter.IPowerMeter.OnStarted">
            <summary>
            Event for powermeter has started
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius2.PowerMeter.IPowerMeter.OnMeasured">
            <summary>
            Event for powermeter has measured data (datetime, power (W))
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius2.PowerMeter.IPowerMeter.OnStopped">
            <summary>
            Event for poweremeter has stopped
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius2.PowerMeter.IPowerMeter.OnCleared">
            <summary>
            Event for measured data has clear 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.PowerMeter.IPowerMeter.SyncRoot">
            <summary>
            Synchronization object
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.PowerMeter.IPowerMeter.Index">
            <summary>
            Identifier
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.PowerMeter.IPowerMeter.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.PowerMeter.IPowerMeter.PowerMeterType">
            <summary>
            Powermeter type
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.PowerMeter.IPowerMeter.Category">
            <summary>
            Category(or Series) name
            </summary>
            <remarks>
            It could be reset when <see cref="M:SpiralLab.Sirius2.PowerMeter.IPowerMeter.CtlStart(System.String)">CtlStart</see> has called. <br/>
            Set to "Unknown" when <see cref="M:SpiralLab.Sirius2.PowerMeter.IPowerMeter.CtlClear">CtlClear</see> has called. <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.PowerMeter.IPowerMeter.MeasuredPower">
            <summary>
            Measured last power (W)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.PowerMeter.IPowerMeter.SamplingRateHz">
            <summary>
            Sampling rate (Hz)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.PowerMeter.IPowerMeter.Data">
            <summary>
            Measured data(power(W) queue
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.PowerMeter.IPowerMeter.MaxQueueSize">
            <summary>
            Max data queue size
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.PowerMeter.IPowerMeter.IsReady">
            <summary>
            Ready status
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.PowerMeter.IPowerMeter.IsBusy">
            <summary>
            Busy status
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.PowerMeter.IPowerMeter.IsError">
            <summary>
            Error status
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.PowerMeter.IPowerMeter.Tag">
            <summary>
            User data
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMeter.IPowerMeter.Initialize">
            <summary>
            Initialize device(s)
            </summary>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMeter.IPowerMeter.CtlStart(System.String)">
            <summary>
            Start measuring(or gathering)
            </summary>
            <remarks>
            Notify <see cref="E:SpiralLab.Sirius2.PowerMeter.IPowerMeter.OnStarted">OnStarted</see> and <see cref="E:SpiralLab.Sirius2.PowerMeter.IPowerMeter.OnMeasured">OnMeasured</see> event. <br/>
            </remarks>
            <param name="category">Target(or current) category(or series)</param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMeter.IPowerMeter.CtlStop">
            <summary>
            Stop measuring(or gathering)
            </summary>
            <remarks>
            Notify <see cref="E:SpiralLab.Sirius2.PowerMeter.IPowerMeter.OnStopped">OnStopped</see> event. <br/>
            </remarks>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMeter.IPowerMeter.CtlClear">
            <summary>
            Clear measured(or gathered) data
            </summary>
            <remarks>
            Notify <see cref="E:SpiralLab.Sirius2.PowerMeter.IPowerMeter.OnCleared">OnCleared</see> event. <br/>
            </remarks>
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMeter.IPowerMeter.CtlReset">
            <summary>
            Reset if error status
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMeter.IPowerMeter.NotifyStarted">
            <summary>
            Notify started measuring
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMeter.IPowerMeter.NotifyMeasure(System.DateTime,System.Double)">
            <summary>
            Notify measuring
            </summary>
            <param name="dt"><see cref="T:System.DateTime">DateTime</see></param>
            <param name="measuredPower">Measured power (W)</param>
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMeter.IPowerMeter.NotifyStopped">
            <summary>
            Notify stopped measuring
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMeter.IPowerMeter.NotifyCleared">
            <summary>
            Notify measured data has cleared
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.PowerMeter.PowerMeterBase">
            <summary>
            PowerMeterBase
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius2.PowerMeter.PowerMeterBase.PropertyChanged">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMeter.PowerMeterBase.NotifyPropertyChanged(System.String)">
            <inheritdoc/>
        </member>
        <member name="E:SpiralLab.Sirius2.PowerMeter.PowerMeterBase.OnStarted">
            <inheritdoc/>  
        </member>
        <member name="E:SpiralLab.Sirius2.PowerMeter.PowerMeterBase.OnMeasured">
            <inheritdoc/>  
        </member>
        <member name="E:SpiralLab.Sirius2.PowerMeter.PowerMeterBase.OnStopped">
            <inheritdoc/>  
        </member>
        <member name="E:SpiralLab.Sirius2.PowerMeter.PowerMeterBase.OnCleared">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.PowerMeter.PowerMeterBase.SyncRoot">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.PowerMeter.PowerMeterBase.Index">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.PowerMeter.PowerMeterBase.Name">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.PowerMeter.PowerMeterBase.PowerMeterType">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.PowerMeter.PowerMeterBase.Category">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.PowerMeter.PowerMeterBase.MeasuredPower">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.PowerMeter.PowerMeterBase.SamplingRateHz">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.PowerMeter.PowerMeterBase.Data">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.PowerMeter.PowerMeterBase.MaxQueueSize">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.PowerMeter.PowerMeterBase.IsReady">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.PowerMeter.PowerMeterBase.IsBusy">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.PowerMeter.PowerMeterBase.IsError">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.PowerMeter.PowerMeterBase.Tag">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMeter.PowerMeterBase.ToString">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMeter.PowerMeterBase.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="maxBufferCounts">Max buffer queue size</param>
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMeter.PowerMeterBase.#ctor(System.Int32,System.String,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="index">Identifier</param>
            <param name="name">Name</param>
            <param name="maxBufferCounts">Max buffer queue size</param>
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMeter.PowerMeterBase.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMeter.PowerMeterBase.Dispose">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMeter.PowerMeterBase.Dispose(System.Boolean)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMeter.PowerMeterBase.Initialize">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMeter.PowerMeterBase.CtlStart(System.String)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMeter.PowerMeterBase.CtlStop">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMeter.PowerMeterBase.CtlClear">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMeter.PowerMeterBase.CtlReset">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMeter.PowerMeterBase.NotifyStarted">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMeter.PowerMeterBase.NotifyMeasure(System.DateTime,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMeter.PowerMeterBase.NotifyStopped">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMeter.PowerMeterBase.NotifyCleared">
            <inheritdoc/>  
        </member>
        <member name="T:SpiralLab.Sirius2.PowerMeter.PowerMeterCoherentPowerMax">
            <summary>
            PowerMeter Coherent PowerMax USB/RS Series
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.PowerMeter.PowerMeterCoherentPowerMax.PowerMeterType">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.PowerMeter.PowerMeterCoherentPowerMax.Model">
            <summary>
            Model name
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.PowerMeter.PowerMeterCoherentPowerMax.SerialNo">
            <summary>
            Serial no
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.PowerMeter.PowerMeterCoherentPowerMax.ComPort">
            <summary>
            COM port
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.PowerMeter.PowerMeterCoherentPowerMax.Serial">
            <summary>
            SerialPort
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMeter.PowerMeterCoherentPowerMax.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMeter.PowerMeterCoherentPowerMax.#ctor(System.Int32,System.String,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="index">Identifier</param>
            <param name="name">Name</param>
            <param name="comPort">COM port</param>
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMeter.PowerMeterCoherentPowerMax.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMeter.PowerMeterCoherentPowerMax.Dispose(System.Boolean)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMeter.PowerMeterCoherentPowerMax.Initialize">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMeter.PowerMeterCoherentPowerMax.CtlStart(System.String)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMeter.PowerMeterCoherentPowerMax.CtlStop">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMeter.PowerMeterCoherentPowerMax.CtlClear">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMeter.PowerMeterCoherentPowerMax.CtlReset">
            <inheritdoc/>  
        </member>
        <member name="T:SpiralLab.Sirius2.PowerMeter.PowerMeterOphir">
            <summary>
            PowerMeter Ophir Photonics
            </summary>
            <remarks>
            Install Ophir Photonics StarLab v3.8 at first. <br/>
            Used <c>OphirLMMeasurementLib</c> COM object internally. <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.PowerMeter.PowerMeterOphir.PowerMeterType">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.PowerMeter.PowerMeterOphir.SerialNo">
            <summary>
            Serial no
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.PowerMeter.PowerMeterOphir.Channel">
            <summary>
            Active channel (0,1,2,3)
            </summary>
            <remarks>
            Used with multiple channels only. <br/>
            Like as USBI product. <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.PowerMeter.PowerMeterOphir.HeadCounts">
            <summary>
            Head count(s)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.PowerMeter.PowerMeterOphir.HeadSerialNo">
            <summary>
            Head serial no
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.PowerMeter.PowerMeterOphir.Status">
            <summary>
            Status 
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMeter.PowerMeterOphir.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMeter.PowerMeterOphir.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="index">Identifier</param>
            <param name="name">Name</param>
            <param name="serialNo">Serial no</param>
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMeter.PowerMeterOphir.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMeter.PowerMeterOphir.Dispose(System.Boolean)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMeter.PowerMeterOphir.Initialize">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMeter.PowerMeterOphir.CtlStart(System.String)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMeter.PowerMeterOphir.CtlStop">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMeter.PowerMeterOphir.CtlClear">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMeter.PowerMeterOphir.CtlReset">
            <inheritdoc/>  
        </member>
        <member name="T:SpiralLab.Sirius2.PowerMeter.PowerMeterThorLabs">
            <summary>
            PowerMeterThorLabsPMSeries
            </summary>
            <remarks>
            Install Optical Power Monitor (OPM) v5.0 Software package at first. <br/>
            Link: https://www.thorlabs.com/software_pages/ViewSoftwarePage.cfm?Code=OPM <br/>
            Used <c>TLPM</c> Interop object internally. <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.PowerMeter.PowerMeterThorLabs.PowerMeterType">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.PowerMeter.PowerMeterThorLabs.SerialNo">
            <summary>
            Serial no
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.PowerMeter.PowerMeterThorLabs.PowerDensity">
            <summary>
            Power density
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.PowerMeter.PowerMeterThorLabs.PowerEnergy">
            <summary>
            Power energy
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.PowerMeter.PowerMeterThorLabs.PowerCurrent">
            <summary>
            Power current
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMeter.PowerMeterThorLabs.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMeter.PowerMeterThorLabs.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="index">Identifier</param>
            <param name="name">Name</param>
            <param name="serialNo">Serial no</param>
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMeter.PowerMeterThorLabs.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMeter.PowerMeterThorLabs.Dispose(System.Boolean)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMeter.PowerMeterThorLabs.Initialize">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMeter.PowerMeterThorLabs.CtlStart(System.String)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMeter.PowerMeterThorLabs.CtlStop">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMeter.PowerMeterThorLabs.CtlClear">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMeter.PowerMeterThorLabs.CtlReset">
            <inheritdoc/>  
        </member>
        <member name="T:SpiralLab.Sirius2.PowerMeter.PowerMeterVirtual">
            <summary>
            PowerMeter Virtual
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.PowerMeter.PowerMeterVirtual.Laser">
            <summary>
            <c>ILaser</c>
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMeter.PowerMeterVirtual.#ctor(System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="maxWatt">Max power (W)</param>
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMeter.PowerMeterVirtual.#ctor(System.Int32,System.String,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="index">Identifier</param>
            <param name="name">Name</param>
            <param name="maxWatt">Max power (W)<br/>Used max range for generate random power values. <br/></param>
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMeter.PowerMeterVirtual.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMeter.PowerMeterVirtual.Dispose(System.Boolean)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMeter.PowerMeterVirtual.Initialize">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMeter.PowerMeterVirtual.CtlStart(System.String)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMeter.PowerMeterVirtual.CtlStop">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMeter.PowerMeterVirtual.CtlClear">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.PowerMeter.PowerMeterVirtual.CtlReset">
            <inheritdoc/>  
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.ScannerFactory">
            <summary>
            ScannerFactory
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.ScannerFactory.CreateVirtual(System.Int32,System.Double,System.String)">
            <summary>
            Create virtual controller
            <code>
            var fov = 100.0f;
            var kFactor = Math.Pow(2, 20) / fov;
            var correctionFile = Path.Combine(SpiralLab.Sirius2.Config.CorrectionPath, "cor_1to1.ct5");
            var rtc = ScannerFactory.CreateVirtual(0, kFactor, correctionFile);
            bool success = rtc.Initialize();
            </code>
            </summary>
            <param name="index">RTC controller index (0,1,2,...)</param>
            <param name="kFactor">K-Factor (bits/mm)</param>
            <param name="ctFileName">Field correction file at Table1</param>
            <returns><see cref="T:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual">RtcVirtual</see></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.ScannerFactory.CreateRtc5(System.Int32,System.Double,SpiralLab.Sirius2.Scanner.Rtc.LaserModes,SpiralLab.Sirius2.Scanner.Rtc.RtcSignalLevels,SpiralLab.Sirius2.Scanner.Rtc.RtcSignalLevels,System.String)">
            <summary>
            Create SCANLAB's RTC5 controller
            <code>
            var fov = 100.0f;
            var kFactor = Math.Pow(2, 20) / fov;
            var correctionFile = Path.Combine(SpiralLab.Sirius2.Config.CorrectionPath, "cor_1to1.ct5");
            var rtc = ScannerFactory.CreateRtc5(0, kFactor, LaserModes.Yag5, RtcSignalLevels.ActiveHigh, RtcSignalLevels.ActiveHigh, correctionFile);
            bool success = rtc.Initialize();
            </code>
            </summary>
            <param name="index">RTC controller index (0,1,2,...)</param>
            <param name="kFactor">K-Factor (bits/mm)</param>
            <param name="laserMode"><c>LaserMode</c></param>
            <param name="laser12SignalLevel"><c>RtcSignalLevel</c></param>
            <param name="laserOnSignalLevel"><c>RtcSignalLevel</c></param>
            <param name="ctFileName">Field correction file at Table1</param>
            <returns><see cref="T:SpiralLab.Sirius2.Scanner.Rtc.Rtc5">Rtc5</see></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.ScannerFactory.CreateRtc6(System.Int32,System.Double,SpiralLab.Sirius2.Scanner.Rtc.LaserModes,SpiralLab.Sirius2.Scanner.Rtc.RtcSignalLevels,SpiralLab.Sirius2.Scanner.Rtc.RtcSignalLevels,System.String)">
            <summary>
            Create SCANLAB's RTC6 controller
            <code>
            var fov = 100.0f;
            var kFactor = Math.Pow(2, 20) / fov;
            var correctionFile = Path.Combine(SpiralLab.Sirius2.Config.CorrectionPath, "cor_1to1.ct5");
            var rtc = ScannerFactory.CreateRtc6(0, kFactor, LaserModes.Yag5, RtcSignalLevels.ActiveHigh, RtcSignalLevels.ActiveHigh, correctionFile);
            bool success = rtc.Initialize();
            </code>
            </summary>
            <param name="index">RTC controller index (0,1,2,...)</param>
            <param name="kFactor">K-Factor (bits/mm)</param>
            <param name="laserMode"><c>LaserMode</c></param>
            <param name="laser12SignalLevel"><c>RtcSignalLevels</c></param>
            <param name="laserOnSignalLevel"><c>RtcSignalLevels</c></param>
            <param name="ctFileName">Field correction file at Table1</param>
            <returns><see cref="T:SpiralLab.Sirius2.Scanner.Rtc.Rtc6">Rtc6</see></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.ScannerFactory.CreateRtc6Ethernet(System.Int32,System.String,System.String,System.Double,SpiralLab.Sirius2.Scanner.Rtc.LaserModes,SpiralLab.Sirius2.Scanner.Rtc.RtcSignalLevels,SpiralLab.Sirius2.Scanner.Rtc.RtcSignalLevels,System.String)">
            <summary>
            Create SCANLAB's RTC6 ethernet controller
            <code>
            var fov = 100.0f;
            var kFactor = Math.Pow(2, 20) / fov;
            var correctionFile = Path.Combine(SpiralLab.Sirius2.Config.CorrectionPath, "cor_1to1.ct5");
            var rtc = ScannerFactory.CreateRtc6Ethernet(0, "192.168.0.100", "255.255.255.0", kFactor, LaserModes.Yag5, RtcSignalLevels.ActiveHigh, RtcSignalLevels.ActiveHigh, correctionFile);
            bool success = rtc.Initialize();
            </code>
            </summary>
            <param name="index">RTC controller index (0,1,2,...)</param>
            <param name="ipAddress">IP address</param>
            <param name="subNetMask">Subnet mask </param>
            <param name="kFactor">K-Factor (bits/mm)</param>
            <param name="laserMode"><see cref="T:SpiralLab.Sirius2.Scanner.Rtc.LaserModes">LaserModes</see> for <see cref="T:SpiralLab.Sirius2.Laser.ILaser">ILaser</see></param>
            <param name="laser12SignalLevel"><see cref="T:SpiralLab.Sirius2.Scanner.Rtc.RtcSignalLevels">RtcSignalLevels</see> for LASER 1,2</param>
            <param name="laserOnSignalLevel"><see cref="T:SpiralLab.Sirius2.Scanner.Rtc.RtcSignalLevels">RtcSignalLevels</see> for LASER ON</param>
            <param name="ctFileName">Field correction file at Table1</param>
            <returns><see cref="T:SpiralLab.Sirius2.Scanner.Rtc.Rtc6Ethernet">Rtc6Ethernet</see></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.ScannerFactory.CreateRtc6SyncAxis(System.Int32,System.String)">
            <summary>
            Create SCANLAB's XL-SCAN(RTC6 + syncAXIS) controller
            <code>
            string configXmlFileName = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "syncAxis", "syncAXISConfig.xml");
            var rtc = ScannerFactory.CreateRtc6SyncAxis(0, configXmlFileName);
            bool success = rtc.Initialize();
            </code>
            </summary>
            <remarks>
            Supported x64 runtime only. <br/>
            SCANLAB's dongle key must be exist. <br/>
            </remarks>
            <param name="index">SyncAxis instance index (0,1,2,3, ...)</param>
            <param name="configXMLFile">Config XML filename</param>
            <returns><see cref="T:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis">Rtc6SyncAxis</see></returns>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.Rtc5LaserControlSignal">
            <summary>
            Rtc5LaserControlSignal
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.Rtc5LaserControlSignal.Bit">
            <summary>
            Bit flags
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc5LaserControlSignal.Bit.PulseSwitchSetting">
            <summary>
            Pulse Switch Setting (does not apply neither to laser mode 4 nor to laser mode 6).
            <para>
            The setting only affects those laser control signals (more precisely: those LASER1 or LASER2 “laser active” modulation pulses in CO2 mode or LASER1 Q-Switch pulses in the YAG modes) that are not yet fully processed at completion of the LASERON signal.
            = 0: The signals are cut off at the end of the LASERON signal.
            = 1: The final pulse fully executes despite completion of the LASERON signal.
            </para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc5LaserControlSignal.Bit.PhaseShift">
            <summary>
            Phase shift of the laser control signals (does not apply neither to laser mode 4 nor to laser mode 6).
            <para>
            = 0: No phase shift.
            = 1: CO2 mode: The LASER1 signal is exchanged with the LASER2 signal.
            YAG modes: The LASER1 is shifted back 180° (half a signal period)
            </para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc5LaserControlSignal.Bit.DisableLaserActiveSignal">
            <summary>
             Enabling or disabling of laser control signals for “Laser active” operation
             <para>
            = 0: The “Laser active” laser control signals are enabled.
            = 1: The “Laser active” laser control signals are disabled (then the laser output ports are in the high impedance tristate mode).
            </para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc5LaserControlSignal.Bit.LaserOnSignalLevelLow">
            <summary>
            LASERON signal level.
            <para>
            = 0: The signal at the LASERON port is set to active-high.
            = 1: The signal at the LASERON port is set to active-low.
            </para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc5LaserControlSignal.Bit.Laser12SignalLevelLow">
            <summary>
            LASER1/LASER2 signal level.
            <para>
            = 0: The signals at the LASER1 and LASER2 output ports are set to active-high.
            = 1: The signals at the LASER1 and LASER2 output ports are set to active-low.
            </para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc5LaserControlSignal.Bit.ExtPulseSignalRisingEdge">
            <summary>
            Determines for laser_on_pulses_freq whether external signal pulses (at the LASER connector’s DIGITAL IN1 digital input) are to be counted at rising or falling edges:
            <para>
            = 0: At the falling edge.
            = 1: At the rising edge
            </para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc5LaserControlSignal.Bit.OutputSynchronization">
            <summary>
            Output synchronization
            <para>
            = 0: Output synchronization is switched off (default setting).
            = 1: Output synchronization is switched on
            </para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc5LaserControlSignal.Bit.ConstantLaserPulseLength">
            <summary>
            Constant Laser PulseLength
            <para>
            = 0: The constant pulse length mode is switched off (default setting).
            = 1: The constant pulse length mode is switched on
            </para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc5LaserControlSignal.Bit.AutomaticMonitoringToStop">
            <summary>
            = 1: In case of error, automatic monitoring (laser-signal auto-suppression) automatically generates a /STOP signal (list stops, laser control signals get permanently switched off).
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5LaserControlSignal.Value">
            <summary>
            Bit value
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5LaserControlSignal.Add(SpiralLab.Sirius2.Scanner.Rtc.Rtc5LaserControlSignal.Bit)">
            <summary>
            Add <c>Bit</c> flag
            </summary>
            <param name="flag"><c>Bit</c></param>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5LaserControlSignal.Remove(SpiralLab.Sirius2.Scanner.Rtc.Rtc5LaserControlSignal.Bit)">
            <summary>
            Remove <c>Bit</c> flag
            </summary>
            <param name="flag"><c>Bit</c></param>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5LaserControlSignal.Contains(SpiralLab.Sirius2.Scanner.Rtc.Rtc5LaserControlSignal.Bit)">
            <summary>
            Check <c>Bit</c> flag is exist ornot
            </summary>
            <param name="flag"><c>Bit</c></param>
            <returns><c>Bit</c> is exist or not</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5LaserControlSignal.ToUInt">
            <summary>
            Conver to uint
            </summary>
            <returns>uint</returns>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5LaserControlSignal.Empty">
            <summary>
            Create empty <c>Rtc5LaserControlSignal</c> instance
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5LaserControlSignal.#ctor(SpiralLab.Sirius2.Scanner.Rtc.Rtc5LaserControlSignal.Bit)">
            <summary>
            Constructor
            </summary>
            <param name="bit"><c>Bit</c></param>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5LaserControlSignal.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5LaserControlSignal.ToString">
            <inheritdoc/>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.Rtc5ExternalControlMode">
            <summary>
            Rtc5ExternalControlMode
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.Rtc5ExternalControlMode.Bit">
            <summary>
            Bit flags
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc5ExternalControlMode.Bit.ExternalStart">
            <summary>
            External /START
            <para>
            = 1: The external start input (by /START, /START2 or /Slave-START) is enabled.
            = 0: The external start input is disabled.
            </para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc5ExternalControlMode.Bit.ExternalStop">
            <summary>
            External /STOP 
            <para>
            = 1: An external list stop (/STOP, /STOP2, /Slave-STOP or simulate_ext_stop) causes explicit cancellation of the external start queue’s entries (/START, /START2, /Slave-START or simulate_ext_start).
            = 0: No effect.
            </para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc5ExternalControlMode.Bit.TrackDelay">
            <summary>
            Track Delay
            <para>
            = 1: The track delay (defined by simulate_ext_start, set_ext_start_delay or set_ext_start_delay_list) that postpones execution of the list start relative to the triggering input signal or simulate_ext_start or simulate_ext_start_ctrl command (see ”External List Start”, page 240) is deactivated.
            = 0: No effect.To define and activate the track delay (e.g. for Processing-on-the-fly applications), use the command simulate_ext_start, set_ext_start_delay or set_ext_start_delay_list.
            </para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc5ExternalControlMode.Bit.ExternalStartAgain">
            <summary>
            External /START Again
            <para>
            = 1: The external start input is not disabled by an external stop request.
            = 0: The external start input is disabled by an external stop request
            </para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc5ExternalControlMode.Bit.DisableSimulateExtCtrl">
            <summary>
            Disables simulate_ext_start_ctrl. 
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc5ExternalControlMode.Bit.EncoderReset">
            <summary>
            Encoder Reset
            <para>
            = 1: Encoder resets of the two internal encoder counters (initiated by the Processing-on-the-fly commands set_fly_x, set_fly_y or set_fly_rot) occur after the subsequent start trigger(i.e.the subsequent external start signal or simulate_ext_start or simulate_ext_start_ctrl command, possibly postponed by a track delay defined by simulate_ext_start, set_ext_start_delay or set_ext_start_delay_list, see also bit #2).
            = 0: Encoder resets occur immediately with each initiating Processing-on-the-fly command.
            </para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc5ExternalControlMode.Bit.TrackDelayConfig">
            <summary>
            Track Delay Config
            <para>
            = 1: Track delay configured by simulate_ext_start, set_ext_start_delay or set_ext_start_delay_list is counted beginning with the most recent externally (but not with execute_list_pos etc.) triggered or simulated external list start.The interval between subsequent external list starts (in encoder pulses) is thus constant(see also page 242). For stop_execution or an external stop signal, bit #10 gets reset to “0”. This bit has no effect if the firmware version is 506 or lower(see get_rtc_version).
            = 0: Track delay configured by simulate_ext_start, set_ext_start_delay or set_ext_start_delay_list is counted beginning with the time point an external list start was requested(i.e.with the corresponding simulate_ext_start or simulate_ext_start_ctrl command or external start signal). The interval between subsequent external list starts (in encoder pulses) can thus vary.This is standard for firmware version 506 or lower(see get_rtc_version).
            </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5ExternalControlMode.Value">
            <summary>
            Bit value
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5ExternalControlMode.Add(SpiralLab.Sirius2.Scanner.Rtc.Rtc5ExternalControlMode.Bit)">
            <summary>
            Add <c>Bit</c> flag
            </summary>
            <param name="flag"><c>Bit</c></param>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5ExternalControlMode.Remove(SpiralLab.Sirius2.Scanner.Rtc.Rtc5ExternalControlMode.Bit)">
            <summary>
            Remove <c>Bit</c> flag
            </summary>
            <param name="flag"><c>Bit</c></param>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5ExternalControlMode.Contains(SpiralLab.Sirius2.Scanner.Rtc.Rtc5ExternalControlMode.Bit)">
            <summary>
            Check <c>Bit</c> flag is exist ornot
            </summary>
            <param name="flag"><c>Bit</c></param>
            <returns><c>Bit</c> is exist or not</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5ExternalControlMode.ToUInt">
            <summary>
            Conver to uint
            </summary>
            <returns>uint</returns>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5ExternalControlMode.Empty">
            <summary>
            Create empty <c>Rtc5ExternalControlMode</c> instance
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5ExternalControlMode.#ctor(SpiralLab.Sirius2.Scanner.Rtc.Rtc5ExternalControlMode.Bit)">
            <summary>
            Constructor
            </summary>
            <param name="bit"><c>Bit</c></param>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5ExternalControlMode.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5ExternalControlMode.ToString">
            <inheritdoc/>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.Rtc5StartStopInfo">
            <summary>
            Rtc5StartStopInfo
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.Rtc5StartStopInfo.Bit">
            <summary>
            Bit flags
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc5StartStopInfo.Bit.InternalStartExecuted">
            <summary>
            An internal start has been executed (by execute_list or similar) since the last call of get_startstop_info.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc5StartStopInfo.Bit.ExternalStartExecuted">
            <summary>
            An External Start has been executed (by /START, /START2, /SlaveSTART, simulate_ext_start or simulate_ext_start_ctrl) since the last call of get_startstop_info. 
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc5StartStopInfo.Bit.InternalStopExecuted">
            <summary>
            An internal stop has been executed (by stop_execution) since the last call of get_startstop_info.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc5StartStopInfo.Bit.ExternalStopExecuted">
            <summary>
            An External Stop has been executed (by /STOP, /STOP2, /Slave-STOP or simulate_ext_stop) since the last call of get_startstop_info. 
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc5StartStopInfo.Bit.ExtStopStatus">
            <summary>
            Ext-stop status (= logical AND operation of the signals /STOP, /STOP2, /SlaveSTOP and simulate_ext_stop, see Figure 68):
            </summary>
            <remarks>
            1: No stop signals are currently present at the input ports or the input ports are not connected. <br/>
            0: There is a stop signal at least at one of the input ports. <br/>
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc5StartStopInfo.Bit.LaserControlSignalsGlobalEnabled">
            <summary>
            The laser control signals are globally enabled, see Chapter 7.4.1 ”Enabling, Activating and Switching Laser Control Signals”, page 183. See also set_laser_control. 
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc5StartStopInfo.Bit.Laser12SignalsActiveLow">
            <summary>
            The TTL laser control signals at the LASER1 and LASER2 output ports are active-LOW (the signal level can be defined by set_laser_control).
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc5StartStopInfo.Bit.ExternalStartFailed">
            <summary>
            Since the last call of get_startstop_info, at least one External Start has failed (more External Starts were triggered than could be simultaneously held in the 8-start wait loop).
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc5StartStopInfo.Bit.ExtStartStatus">
            <summary>
            Ext-Start status (= logical AND operation of the signals /START, /START2 and /Slave-START, see Figure 68): 
            </summary>
            <remarks>
            1: No start signals are currently present at the input ports or the input ports are not connected. <br/>
            0: A start signal is present at least at one of the input ports. <br/>
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc5StartStopInfo.Bit.LaserOnSignalsActiveLow">
            <summary>
             The TTL laser control signal at the LASERON output port is active-LOW (the signal level can be defined by set_laser_control).
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc5StartStopInfo.Bit.LaserControlSignalsEnabled">
            <summary>
            The laser control signals are enabled 
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc5StartStopInfo.Bit.ErrorBits16">
            <summary>
            The error 16 bits (for first scan head connector)
            </summary>
            <remarks>
            Incorrect number of frames within a data block.
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc5StartStopInfo.Bit.ErrorBits17">
            <summary>
            The error 17 bits (for first scan head connector)
            </summary>
            <remarks>
            Incorrect pulse length of signal received from scan system, maybe no scan system is connected
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc5StartStopInfo.Bit.ErrorBits18">
            <summary>
            The error 18 bits (for first scan head connector)
            </summary>
            <remarks>
            Preamble sequence incorrect.
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc5StartStopInfo.Bit.ErrorBits19">
            <summary>
            The error 19 bits (for first scan head connector)
            </summary>
            <remarks>
            Bit count within a subframe incorrect.
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc5StartStopInfo.Bit.ErrorBits20">
            <summary>
            The error 20 bits (for first scan head connector)
            </summary>
            <remarks>
            Parity error when reading data received from scan system.
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc5StartStopInfo.Bit.ErrorBits21">
            <summary>
            The error 21 bits (for first scan head connector)
            </summary>
            <remarks>
            The present data is invalid (old).
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc5StartStopInfo.Bit.ErrorBits22">
            <summary>
            The error 22 bits (for first scan head connector)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc5StartStopInfo.Bit.ErrorBits23">
            <summary>
            The error 23 bits (for first scan head connector)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc5StartStopInfo.Bit.ErrorBits24">
            <summary>
            The error 24 bits (for second scan head connector)
            </summary>
            <remarks>
            Incorrect number of frames within a data block.
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc5StartStopInfo.Bit.ErrorBits25">
            <summary>
            The error 25 bits (for second scan head connector)
            </summary>
            <remarks>
            Incorrect pulse length of signal received from scan system, maybe no scan system is connected
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc5StartStopInfo.Bit.ErrorBits26">
            <summary>
            The error 26 bits (for second scan head connector)
            </summary>
            <remarks>
            Preamble sequence incorrect.
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc5StartStopInfo.Bit.ErrorBits27">
            <summary>
            The error 27 bits (for second scan head connector)
            </summary>
            <remarks>
            Bit count within a subframe incorrect.
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc5StartStopInfo.Bit.ErrorBits28">
            <summary>
            The error 28 bits (for second scan head connector)
            </summary>
            <remarks>
            Parity error when reading data received from scan system.
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc5StartStopInfo.Bit.ErrorBits29">
            <summary>
            The error 29 bits (for second scan head connector)
            </summary>
            <remarks>
            The present data is invalid (old).
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc5StartStopInfo.Bit.ErrorBits30">
            <summary>
            The error 30 bits (for second scan head connector)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc5StartStopInfo.Bit.ErrorBits31">
            <summary>
            The error 31 bits (for second scan head connector)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5StartStopInfo.Value">
            <summary>
            Bit value
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5StartStopInfo.Add(SpiralLab.Sirius2.Scanner.Rtc.Rtc5StartStopInfo.Bit)">
            <summary>
            Add <c>Bit</c> flag
            </summary>
            <param name="flag"><c>Bit</c></param>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5StartStopInfo.Remove(SpiralLab.Sirius2.Scanner.Rtc.Rtc5StartStopInfo.Bit)">
            <summary>
            Remove <c>Bit</c> flag
            </summary>
            <param name="flag"><c>Bit</c></param>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5StartStopInfo.Contains(SpiralLab.Sirius2.Scanner.Rtc.Rtc5StartStopInfo.Bit)">
            <summary>
            Check <c>Bit</c> flag is exist ornot
            </summary>
            <param name="flag"><c>Bit</c></param>
            <returns><c>Bit</c> is exist or not</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5StartStopInfo.ToUInt">
            <summary>
            Conver to uint
            </summary>
            <returns>uint</returns>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5StartStopInfo.Empty">
            <summary>
            Create empty <c>Rtc5StartStopInfo</c> instance
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5StartStopInfo.#ctor(SpiralLab.Sirius2.Scanner.Rtc.Rtc5StartStopInfo.Bit)">
            <summary>
            Constructor
            </summary>
            <param name="bit"><c>Bit</c></param>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5StartStopInfo.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5StartStopInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.Rtc5MarkingInfo">
            <summary>
            Rtc5MarkingInfo
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.Rtc5MarkingInfo.Bit">
            <summary>
            Bit flags
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc5MarkingInfo.Bit.MofUnderflowInXDirection">
            <summary>
            X &lt; –524288
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc5MarkingInfo.Bit.MofOverflowInXDirection">
            <summary>
            X &gt; +524287
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc5MarkingInfo.Bit.MofUnderflowInYDirection">
            <summary>
            Y &lt; –524288
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc5MarkingInfo.Bit.MofOverflowInYDirection">
            <summary>
            Y &gt; +524287
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc5MarkingInfo.Bit.MofUnderflowInXUserDirection">
            <summary>
            X &lt; Xmin
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc5MarkingInfo.Bit.MofOverflowInXUserDirection">
            <summary>
            X &gt; Xmax
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc5MarkingInfo.Bit.MofUnderflowInYUserDirection">
            <summary>
            Y &lt; Ymin
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc5MarkingInfo.Bit.MofOverflowInYUserDirection">
            <summary>
            Y &gt; Ymin
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc5MarkingInfo.Bit.TriggerError">
            <summary>
            TriggerError: an enabled external trigger or simulated trigger occurred during execution of a list.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc5MarkingInfo.Bit.ActivateFlyError">
            <summary>
            ActivateFlyError: an error has occurred during activation of Processing-on-the-fly correction by activate_fly_2d or activate_fly_xy 
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc5MarkingInfo.Bit.PosAckErrorHeadAX">
            <summary>
            PosAckErrorHeadAX
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc5MarkingInfo.Bit.TempOkErrorHeadAX">
            <summary>
            TempOkErrorHeadAX
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc5MarkingInfo.Bit.PowerOKErrorHeadAX">
            <summary>
            PowerOKErrorHeadAX
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc5MarkingInfo.Bit.PosAckErrorHeadAY">
            <summary>
            PosAckErrorHeadAY
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc5MarkingInfo.Bit.TempOkErrorHeadAY">
            <summary>
            TempOkErrorHeadAY
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc5MarkingInfo.Bit.PowerOKErrorHeadAY">
            <summary>
            PowerOKErrorHeadAY
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc5MarkingInfo.Bit.Signal1EncoderXTooShort">
            <summary>
            Signal1EncoderXTooShort
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc5MarkingInfo.Bit.Signal2EncoderXTooShort">
            <summary>
            Signal2EncoderXTooShort
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc5MarkingInfo.Bit.Signal1EncoderYTooShort">
            <summary>
            Signal1EncoderYTooShort
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc5MarkingInfo.Bit.Signal2EncoderYTooShort">
            <summary>
            Signal2EncoderYTooShort
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc5MarkingInfo.Bit.WrongSignalSequenceEncoderX">
            <summary>
            WrongSignalSequenceEncoderX
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc5MarkingInfo.Bit.WrongSignalSequenceEncoderY">
            <summary>
            WrongSignalSequenceEncoderY
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc5MarkingInfo.Bit.MofUnderflowInZDirection">
            <summary>
            Z &lt; –32.768
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc5MarkingInfo.Bit.MofOverflowInZDirection">
            <summary>
            Z &gt; +32.767
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc5MarkingInfo.Bit.MofUnderflowInZUserDirection">
            <summary>
            Z &lt; Zmin
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc5MarkingInfo.Bit.MofOverflowInZUserDirection">
            <summary>
            Z &gt; Zmax
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc5MarkingInfo.Bit.PosAckErrorHeadBX">
            <summary>
            PosAckErrorHeadBX
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc5MarkingInfo.Bit.TempOkErrorHeadBX">
            <summary>
            TempOkErrorHeadBX
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc5MarkingInfo.Bit.PowerOKErrorHeadBX">
            <summary>
            PowerOKErrorHeadBX
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc5MarkingInfo.Bit.PosAckErrorHeadBY">
            <summary>
            PosAckErrorHeadBY
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc5MarkingInfo.Bit.TempOkErrorHeadBY">
            <summary>
            TempOkErrorHeadBY
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc5MarkingInfo.Bit.PowerOKErrorHeadBY">
            <summary>
            PowerOKErrorHeadBY
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5MarkingInfo.Value">
            <summary>
            Bit value
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5MarkingInfo.Add(SpiralLab.Sirius2.Scanner.Rtc.Rtc5MarkingInfo.Bit)">
            <summary>
            Add <c>Bit</c> flag
            </summary>
            <param name="flag"><c>Bit</c></param>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5MarkingInfo.Remove(SpiralLab.Sirius2.Scanner.Rtc.Rtc5MarkingInfo.Bit)">
            <summary>
            Remove <c>Bit</c> flag
            </summary>
            <param name="flag"><c>Bit</c></param>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5MarkingInfo.Contains(SpiralLab.Sirius2.Scanner.Rtc.Rtc5MarkingInfo.Bit)">
            <summary>
            Check <c>Bit</c> flag is exist ornot
            </summary>
            <param name="flag"><c>Bit</c></param>
            <returns><c>Bit</c> is exist or not</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5MarkingInfo.ToUInt">
            <summary>
            Conver to uint
            </summary>
            <returns>uint</returns>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5MarkingInfo.Empty">
            <summary>
            Create empty <c>Rtc5MarkingInfo</c> instance
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5MarkingInfo.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5MarkingInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.Rtc5">
            <summary>
            Rtc5
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.PropertyChanged">
            <inheritdoc/>
        </member>
        <member name="E:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.OnJob">
            <inheritdoc/>
        </member>
        <member name="E:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.OnCorrectionTable">
            <inheritdoc/>
        </member>
        <member name="E:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.OnEncoderChanged">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.NotifyPropertyChanged(System.String)">
            <summary>
            Nofity property value has changed
            </summary>
            <param name="propertyName">Property name</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.NotifyJob(SpiralLab.Sirius2.Scanner.IJob)">
            <summary>
            Notify job status has changed(or job has created)
            </summary>
            <param name="job"><c>IJob</c></param>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.NotifyCorrectionTable(SpiralLab.Sirius2.Scanner.Rtc.CorrectionTables,System.String)">
            <summary>
            Notify correction file has loaded into specific table
            </summary>
            <param name="table"><c>CorrectionTables</c></param>
            <param name="fileName">Correction filename</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.NotifyEncoderChanged(System.Int32,System.Int32)">
            <summary>
            Nofity encoder value has changed
            </summary>
            <param name="encX">Encoder x</param>
            <param name="encY">Encoder y</param>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.Count">
            <summary>
            Count of instance(s)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.Index">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.Name">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.RtcType">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.MatrixStack">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.KFactor">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.BitResolution">
            <summary>
            Bit resolution (um/bit)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.EffectiveFieldSize">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.FieldSizeLimit">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.LaserMode">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.IsReady">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.IsBusy">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.IsError">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.DoubleBufferMaxSize">
            <summary>
            Double buffer max size
            <para>Default: 5000 (Min: 100, Max: 2^18 - <c>List3BufferMaxSize</c>)</para>
            <para>Used with <c>ListTypes.Auto</c></para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.List3BufferMaxSize">
            <summary>
            List3 buffer max size
            <para>Default: 2^17</para>
            <para>Used with <c>IRtcCharacterSet</c></para>
            <para>Used with <c>ListTypes.Single</c></para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.DllVersion">
            <summary>
            RTC DLL Version
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.HexVersion">
            <summary>
            RTC HEX Version
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.RtcVersion">
            <summary>
            RTC Version
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.RtcSerial">
            <summary>
            RTC Serial no
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.InitLaser12SignalLevel">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.InitLaserOnSignalLevel">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.LaserControlSignal">
            <summary>
            Rtc5LaserControlSignal
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.ExternalControlMode">
            <summary>
            Rtc5ExternalControlMode
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.ExternalControlMaxCounts">
            <summary>
            RtcExternalControlMaxCounts
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.MarkingInfo">
            <summary>
            Rtc5MarkingInfo
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.StartStopInfo">
            <summary>
            Rtc5StartStopInfo
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.JumpMode">
            <summary>
            Jump Mode
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.Job">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.JobQueue">
            <summary>
            Job queue for <c>JobRtc</c>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.JobHistory">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.Frequency">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.PulseWidth">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.DelayOn">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.DelayOff">
            <inheritdoc/> 
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.DelayJump">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.DelayMark">
            <inheritdoc/> 
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.DelayPolygon">
            <inheritdoc/> 
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.SpeedJump">
            <inheritdoc/> 
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.SpeedMark">
            <inheritdoc/> 
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.Fpk">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.QSwitchDelay">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.ListType">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.IsMoF">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.Is2ndHead">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.Is3D">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.IsScanAhead">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.IsUFPM">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.IsSyncAxis">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.CorrectionFiles">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.PrimaryHeadTable">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.SecondaryHeadTable">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.DistanceToSecondaryHead">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.PrimaryHeadBaseOffset">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.PrimaryHeadUserOffset">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.SecondaryHeadBaseOffset">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.SecondaryHeadUserOffset">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.IsDirectMode3D">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.ZOffset">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.ZDefocus">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.CoefA">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.CoefB">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.CoefC">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.KZFactor">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.KZScale">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.AlcSignal">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.Alc100PercentageValue">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.AlcMinValue">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.AlcMaxValue">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.MeasurementChannels">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.SamplingFrequency">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.MoFType">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.EncXCountsPerMm">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.EncYCountsPerMm">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.EncXSimulatedSpeed">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.EncYSimulatedSpeed">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.EncCountsPerRevolution">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.EncSimulatedAngularSpeed">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.MofAngularCenter">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.IsDateTimeOffset">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.DateTimeOffsetDays">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.DateTimeOffsetHours">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.DateTimeOffsetMinutes">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.DateTimeOffsetSeconds">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.DateTimeOrigin">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.SerialStartNo">
            <inheritdoc/>  
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.serialStartNo">
            <summary>
            Starting Serial No 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.SerialIncrementStep">
            <inheritdoc/>  
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.serialIncrementStep">
            <summary>
            Serial No Increment Step
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.SerialCurrentNo">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.SerialMaxNo">
            <inheritdoc/>  
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.serialMaxNo">
            <summary>
            Max serial no
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.cardId">
            <summary>
            RTC card's identifier no (for multiple cards)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.vPhysical">
            <summary>
            Physical (or Transformed) x,y,z position
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.#ctor(System.Int32,System.Double,SpiralLab.Sirius2.Scanner.Rtc.LaserModes,SpiralLab.Sirius2.Scanner.Rtc.RtcSignalLevels,SpiralLab.Sirius2.Scanner.Rtc.RtcSignalLevels,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="index">RTC Controller identifier (0,1,2,...)</param>
            <param name="kFactor">K-Factor (bits/mm)</param>
            <param name="laserMode"><c>LaserMode</c></param>
            <param name="laser12SignalLevel"><c>RtcSignalLevel</c></param>
            <param name="laserOnSignalLevel"><c>RtcSignalLevel</c></param>
            <param name="ctFileName">Field correction file at Table1</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.Dispose">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.Dispose(System.Boolean)">
            <summary>
            Dispose internal resources
            </summary>
            <param name="disposing">Explicit dispose or not</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.ToString">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.Initialize">
            <inheritdoc/>     
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.CtlLoadCorrectionFile(SpiralLab.Sirius2.Scanner.Rtc.CorrectionTables,System.String)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.CtlSelectCorrection(SpiralLab.Sirius2.Scanner.Rtc.CorrectionTables,SpiralLab.Sirius2.Scanner.Rtc.CorrectionTables)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.CtlLaserMode(SpiralLab.Sirius2.Scanner.Rtc.LaserModes)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.CtlLaserOn">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.CtlLaserOff">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.CtlLaserSignal(System.Boolean)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.CtlMoveTo(System.Numerics.Vector2,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.CtlFrequency(System.Double,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.CtlDelay(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.CtlDelayVariablePolygonTable(System.Collections.Generic.KeyValuePair{System.Double,System.Double}[])">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.CtlDelayVariableJumpTable(System.Collections.Generic.KeyValuePair{System.Double,System.Double}[])">
            <inheritdoc/>  
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.varPoly">
            <summary>
            0: Disables “Variable Polygon Delays” mode. Default setting. 
            1: Enables “Variable Polygon Delays” mode. 
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.directMode3D">
            <summary>
            This parameter effects only 3D-applications.
            0: The z output is changed to its end-value in such a way that the focus is kept in one plane during the entire jump.
            1: The z output is changed directly (linearly)to its end value during a jump.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.edgeLevel">
            <summary>
            This parameter defines a maximum “laser on“ time for the corners of a Polyline.
            If the Polygon Delay is longer than or equal to this value (because the angle  is close to 180°, for instance), 
            the laser is switched off (after a LaserOff Delay) and a new Polyline is started.
            This can be useful for preventing burn-in effects.
            The EdgeLevel value must be smaller than twice the set value for the Polygon Delay, otherwise it has no effect 
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.minJumpDelay">
            <summary>
            Minimum Jump Delay that cannot be undercut for jumps shorter than JumpLengthLimit(even for jump vectors of zero length, see Figure 40). 
            For jumps longer than JumpLengthLimit, the MinJumpDelay has no relevance.
            To avoid anomalies in the range of MinJumpDelay, define a value for MinJumpDelay that is not larger than the Jump Delay.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.jumpLengthLimit">
            <summary>
            Jump length limit. In bits. JumpLengthLimit > 0 enables the “Variable Jump Delays“ mode.
             If the jump vector is longer than this value, then the fixed Jump Delay (see set_scanner_delays) is inserted.
             For all shorter jump lengths, a linearly interpolated “Variable Jump Delay” (page 136) between MinJumpDelay and the Jump Delay is calculated and inserted, see Figure 40. 
             JumpLengthLimit = 0 disables the “Variable Jump Delays“ mode.
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.CtlDelayVariable(System.Boolean,System.Boolean,System.Double,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.CtlSpeed(System.Double,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.CtlWriteData``1(SpiralLab.Sirius2.Scanner.Rtc.ExtensionChannels,``0)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.CtlWriteExtDO16(System.UInt16,System.Boolean)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.CtlReadData``1(SpiralLab.Sirius2.Scanner.Rtc.ExtensionChannels,``0@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.CtlGetStatus(SpiralLab.Sirius2.Scanner.Rtc.RtcStatus)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.CtlBusyWait">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.CtlAbort">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.CtlReset">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.ListBegin(SpiralLab.Sirius2.Scanner.Rtc.ListTypes)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.ListSelectCorrection(SpiralLab.Sirius2.Scanner.Rtc.CorrectionTables,SpiralLab.Sirius2.Scanner.Rtc.CorrectionTables)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.ListFrequency(System.Double,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.ListDelay(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.ListDelayVariable(System.Boolean,System.Double,System.Boolean,System.Double,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.ListSpeed(System.Double,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.ListWait(System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.ListLaserOn(System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.ListLaserOn">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.ListLaserOff">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.ListJumpTo(System.Numerics.Vector2,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.ListMarkTo(System.Numerics.Vector2,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.ListArcTo(System.Numerics.Vector2,System.Double,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.ListMarksTo(System.Numerics.Vector2[],System.Double[])">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.ListWriteData``1(SpiralLab.Sirius2.Scanner.Rtc.ExtensionChannels,``0)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.ListWriteExtDO16(System.UInt16,System.Boolean)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.ListEnd">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.ListExecute(System.Boolean)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.IsDuplicated(System.Numerics.Vector2)">
            <summary>
            Check for duplicated position x,y to merge
            </summary>
            <param name="position">position</param>
            <returns>Is duplicated or not</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.IsListReady(System.UInt32)">
            <summary>
            Check list buffer availability for flow control
            </summary>
            <param name="count">counts of list commands</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.CtlHomePosition(System.Numerics.Vector2)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.CtlStandBy(System.Double,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.CtlFirstPulseKiller(System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.CtlQSwitchDelay(System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.CtlLaserControlSignal(SpiralLab.Sirius2.Scanner.Rtc.ILaserControlSignal)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.CtlExternalControl(SpiralLab.Sirius2.Scanner.Rtc.IRtcExternalControlMode,System.UInt32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.CtlSimulatedExternalStart">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.CtlExternalStartCounts(System.UInt32@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.CtlJumpMode(SpiralLab.Sirius2.Scanner.Rtc.RtcJumpMode)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.CtlLoadedCorrectionInfo(SpiralLab.Sirius2.Scanner.Rtc.CorrectionTables,SpiralLab.Sirius2.Scanner.Rtc.CorrectionFileHeaderParams,System.Double@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.CtlCorrectionReadABC(System.String,System.Double@,System.Double@,System.Double@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.CtlCorrectionWriteABC(System.String,System.Double,System.Double,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.CtlMarkingInfo(SpiralLab.Sirius2.Scanner.Rtc.IRtcMarkingInfo@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.CtlStartStopInfo(SpiralLab.Sirius2.Scanner.Rtc.IRtcStartStopInfo@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.CtlTrackingError(SpiralLab.Sirius2.Scanner.Rtc.ScannerHeads,System.Double,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.CtlPulseSynchronization(System.Boolean,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.CtlListPause">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.CtlListContinue">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.ListFirstPulseKiller(System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.ListQSwitchDelay(System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.ListSkyWritingBegin(SpiralLab.Sirius2.Scanner.Rtc.SkyWritingMode,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.ListSkyWritingEnd">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.ListRasterLine(SpiralLab.Sirius2.Scanner.Rtc.RasterModes,System.Double,System.Numerics.Vector2,System.UInt32,SpiralLab.Sirius2.Scanner.Rtc.ExtensionChannels)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.ListRasterPixel(System.Double,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.ListWobbelDefine(System.Collections.Generic.KeyValuePair{System.Numerics.Vector2,System.UInt32}[],System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.ListWobbelBegin(System.Double,System.Double,System.Double,SpiralLab.Sirius2.Scanner.Rtc.WobbelShapes)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.ListWobbelEnd">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.ListWriteExtDO16If(System.UInt32,System.UInt32,System.UInt32,System.Boolean)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.ListReadExtDI16WaitUntil(System.UInt32,System.UInt32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.ListJumpMode(SpiralLab.Sirius2.Scanner.Rtc.JumpModeFlags)">
            <inheritdoc/> 
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.ListJumpHard(System.Numerics.Vector2,System.Double,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.ListJumpHard(System.Numerics.Vector3,System.Double,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.ListJumpAndDrill(System.Numerics.Vector2,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.CtlGetMeasurement(SpiralLab.Sirius2.Scanner.Rtc.MeasurementChannels,System.Int32[]@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.CtlConvertMeasurement(SpiralLab.Sirius2.Scanner.Rtc.MeasurementChannels,System.Int32,System.Double@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.ListMeasurementBegin(System.Double,SpiralLab.Sirius2.Scanner.Rtc.MeasurementChannels[])">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.ListMeasurementEnd">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.CtlAlcByPositionTable(System.Collections.Generic.KeyValuePair{System.Double,System.Double}[])">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.CtlAlc``1(SpiralLab.Sirius2.Scanner.Rtc.AutoLaserControlSignals,SpiralLab.Sirius2.Scanner.Rtc.AutoLaserControlModes,``0,``0,``0)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.ListAutoLaserControl``1(``0,``0,``0)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.ListAlcByVectorBegin``1(SpiralLab.Sirius2.Scanner.Rtc.AutoLaserControlSignals,``0)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.ListAlcByVectorEnd">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.CtlHeadOffset(SpiralLab.Sirius2.Scanner.Rtc.ScannerHeads,SpiralLab.Sirius2.Mathematics.Offset)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.ListHeadOffset(SpiralLab.Sirius2.Scanner.Rtc.ScannerHeads,SpiralLab.Sirius2.Mathematics.Offset)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.CtlMoveTo(System.Numerics.Vector3,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.CtlZDefocus(System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.CtlLoadZTable(System.Double,System.Double,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.CtlZDistance(System.Numerics.Vector3,System.Double@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.ListZDefocus(System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.ListJumpTo(System.Numerics.Vector3,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.ListMarkTo(System.Numerics.Vector3,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.ListArcTo(System.Numerics.Vector3,System.Double,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.ListMarksTo(System.Numerics.Vector3[],System.Double[])">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.ListRasterLine(SpiralLab.Sirius2.Scanner.Rtc.RasterModes,System.Double,System.Numerics.Vector3,System.UInt32,SpiralLab.Sirius2.Scanner.Rtc.ExtensionChannels)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.IsDuplicated(System.Numerics.Vector3)">
            <summary>
            Check for duplicated position x,y,z to merge
            </summary>
            <param name="position">position</param>
            <returns>Is duplicated or not</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.IsInFov(System.Numerics.Vector2)">
            <summary>
            Check for position x,y in fov range  
            </summary>
            <param name="position"></param>
            <returns>Is in fov range or not</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.IsInFov(System.Numerics.Vector3)">
            <summary>
            Check for position x,y,z in fov range  
            </summary>
            <param name="position"></param>
            <returns>Is in fov range or not</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.AdjustBits(System.Int32@,System.Int32@)">
            <summary>
            Adjust x,y position bits within range
            </summary>
            <param name="xBits"></param>
            <param name="yBits"></param>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.AdjustBits(System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Adjust x,y,z position bits within range
            </summary>
            <param name="xBits"></param>
            <param name="yBits"></param>
            <param name="zBits"></param>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.CtlMofEncoderReset(System.Double,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.CtlMofGetEncoder(System.Int32@,System.Int32@,System.Double@,System.Double@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.CtlMofEncoderSpeed(System.Double,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.CtlMofTrackingError(System.Double,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.CtlMofCompensateTable(System.Collections.Generic.KeyValuePair{System.Numerics.Vector2,System.Numerics.Vector2}[])">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.CtlMofExternalControlDelay(SpiralLab.Sirius2.Scanner.Rtc.RtcEncoders,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.CtlMofGetAngularEncoder(System.Int32@,System.Double@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.CtlMofAngularCenter(System.Numerics.Vector2)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.CtlMofEncoderAngularSpeed(System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.CtlMofOverflowClear">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.ListMofBegin(System.Boolean)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.ListMofAngularBegin(System.Numerics.Vector2,System.Boolean)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.ListMofOverflowClear">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.ListMofLimitIf(SpiralLab.Sirius2.Scanner.Rtc.RtcEncoders,SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderRangeConditions)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.ListMofExternalControlDelay(SpiralLab.Sirius2.Scanner.Rtc.RtcEncoders,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.ListMofWait(SpiralLab.Sirius2.Scanner.Rtc.RtcEncoders,System.Double,SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderWaitConditions)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.ListMofAngularWait(System.Double,SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderWaitConditions)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.ListMofWaitRange(System.Numerics.Vector2,System.Numerics.Vector2)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.ListMofLimits(System.Numerics.Vector2,System.Numerics.Vector2)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.ListMofEnd(System.Numerics.Vector2)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.ListMofEnd(System.Numerics.Vector3)">
            <summary>
            <para>List x,y (or rotate) MoF end</para>
            </summary>
            <param name="jumpPosition">Jump x,y,z position (mm)</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.ListRepeatCall(System.UInt32,System.UInt32)">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.MaxCharacterSetCount">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.CtlCharacterSetBegin(SpiralLab.Sirius2.Scanner.Rtc.CharacterSets)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.CtlCharacterBegin(System.UInt32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.CtlCharacterEnd">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.CtlCharacterSetEnd">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.CtlCharacterSetIsExist(System.UInt32,SpiralLab.Sirius2.Scanner.Rtc.CharacterSets)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.CtlCharacterSetClear(SpiralLab.Sirius2.Scanner.Rtc.CharacterSets)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.CtlSerialNoReset(System.UInt32,System.UInt32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.ListText(System.String,SpiralLab.Sirius2.Scanner.Rtc.CharacterSets)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.ListDate(SpiralLab.Sirius2.Scanner.Rtc.DateFormats,System.Boolean,SpiralLab.Sirius2.Scanner.Rtc.CharacterSets)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.ListTime(SpiralLab.Sirius2.Scanner.Rtc.TimeFormats,System.Boolean,SpiralLab.Sirius2.Scanner.Rtc.CharacterSets)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.ListSerialNo(System.UInt32,SpiralLab.Sirius2.Scanner.Rtc.SerialNoFormats,SpiralLab.Sirius2.Scanner.Rtc.CharacterSets)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.CtlSerialConfig(System.UInt32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.CtlSerialWrite(System.Byte[])">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.CtlSerialWrite(System.String)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.CtlSerialRead(System.Byte[]@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.CtlSerialRead(System.String@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.ListSerialWrite(System.Byte[])">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc5.ListSerialWrite(System.String)">
            <inheritdoc/>  
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.Rtc6LaserControlSignal">
            <summary>
            Rtc6LaserControlSignal
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.Rtc6LaserControlSignal.Bit">
            <summary>
            Bit flags
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6LaserControlSignal.Bit.PulseSwitchSetting">
            <summary>
            Pulse Switch Setting (does not concern Laser Mode 4 or Laser Mode 6).
            <para>
            The setting only affects those laser control signals (more precisely: those LASER1 or LASER2 “laser active” modulation pulses in CO2 Mode or LASER1 Q-Switch pulses in the YAG modes) that are not yet fully processed at completion of the LASERON signal.
            = 0: The signals are cut off at the end of the LASERON signal.
            = 1: The final pulse fully executes despite completion of the LASERON signal.
            </para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6LaserControlSignal.Bit.PhaseShift">
            <summary>
            Phase shift of the laser control signals (does not concern Laser Mode 4 or Laser Mode 6).
            <para>
            = 0: No phase shift.
            = 1: CO2 Mode: The LASER1 signal is exchanged with the LASER2 signal. YAG modes: The LASER1 is shifted back 180° (half a signal period).
            </para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6LaserControlSignal.Bit.DisableLaserActiveSignal">
            <summary>
            Enabling or disabling of laser control signals for “Laser active” operation.
            <para>
            = 0: The “Laser active” laser control signals are enabled.
            = 1: The “Laser active” laser control signals are disabled (then the laser output ports are in the high impedance tristate mode).
            </para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6LaserControlSignal.Bit.LaserOnSignalLevelLow">
            <summary>
            LASERON signal level.
            <para>
            = 0: The signal at the LASERON port is set to active-HIGH.
            = 1: The signal at the LASERON port is set to active-LOW.
            </para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6LaserControlSignal.Bit.Laser12SignalLevelLow">
            <summary>
             LASER1/LASER2 signal level.
             <para>
            = 0: The signals at the LASER1 and LASER2 output ports are set to active-HIGH.
            = 1: The signals at the LASER1 and LASER2 output ports are set to active-LOW
            </para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6LaserControlSignal.Bit.ExtPulseSignalRisingEdge">
            <summary>
            Determines for laser_on_pulses_list whether external signal pulses (at the LASER connector’s DIGITAL IN1 digital input) are to be counted at rising or falling edges:
            <para>
            = 0: At the falling edge.
            = 1: At the rising edge.
            </para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6LaserControlSignal.Bit.OutputSynchronization">
            <summary>
            Output synchronization
            <para>
            = 0: Output synchronization is switched off (default setting).
            = 1: Output synchronization is switched on.
            </para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6LaserControlSignal.Bit.ConstantLaserPulseLength">
            <summary>
            Constant Laser PulseLength
            <para>
            = 0: The “constant pulse length” mode is switched off (default setting).
            = 1: The “constant pulse length” mode is switched on.
            </para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6LaserControlSignal.Bit.AutomaticMonitoringToStop">
            <summary>
            = 1: In case of error, automatic monitoring (automatic suppression of laser control signals) automatically generates a /STOP signal (list stops, laser control signals get permanently switched off).
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6LaserControlSignal.Bit.StopToAllMasterSlave">
            <summary>
            = 1: In case of error according to Bit #28, the stop_execution is forwarded as /Master-STOP 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6LaserControlSignal.Value">
            <summary>
            Bit value
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6LaserControlSignal.Add(SpiralLab.Sirius2.Scanner.Rtc.Rtc6LaserControlSignal.Bit)">
            <summary>
            Add <c>Bit</c> flag
            </summary>
            <param name="flag"><c>Bit</c></param>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6LaserControlSignal.Remove(SpiralLab.Sirius2.Scanner.Rtc.Rtc6LaserControlSignal.Bit)">
            <summary>
            Remove <c>Bit</c> flag
            </summary>
            <param name="flag"><c>Bit</c></param>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6LaserControlSignal.Contains(SpiralLab.Sirius2.Scanner.Rtc.Rtc6LaserControlSignal.Bit)">
            <summary>
            Check <c>Bit</c> flag is exist ornot
            </summary>
            <param name="flag"><c>Bit</c></param>
            <returns><c>Bit</c> is exist or not</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6LaserControlSignal.ToUInt">
            <summary>
            Conver to uint
            </summary>
            <returns>uint</returns>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6LaserControlSignal.Empty">
            <summary>
            Create empty <c>Rtc6LaserControlSignal</c> instance
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6LaserControlSignal.#ctor(SpiralLab.Sirius2.Scanner.Rtc.Rtc6LaserControlSignal.Bit)">
            <summary>
            Constructor
            </summary>
            <param name="bit"><c>Bit</c></param>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6LaserControlSignal.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6LaserControlSignal.ToString">
            <inheritdoc/>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.Rtc6ExternalControlMode">
            <summary>
            Rtc6ExternalControlMode
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.Rtc6ExternalControlMode.Bit">
            <summary>
            Bit flags
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6ExternalControlMode.Bit.ExternalStart">
            <summary>
            External /START
            <para>
            = 1: The external start input (by /START, /START2 or /Slave-START) is enabled.
            = 0: The external start input is disabled
            </para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6ExternalControlMode.Bit.ExternalStop">
            <summary>
            External /STOP 
            <para>
            = 1: An external stop (/STOP, /STOP2, /Slave-STOP or simulate_ext_stop) causes explicit cancellation of the external start queue’s entries (/START, /START2, /Slave-START             or simulate_ext_start).
            = 0: No effect
            </para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6ExternalControlMode.Bit.TrackDelay">
            <summary>
            Track Delay
            <para>
            = 1: The track delay (defined by simulate_ext_start, set_ext_start_delay or set_ext_start_delay_list) that postpones execution of the start relative to the triggering input signal or simulate_ext_start or simulate_ext_start_ctrl command (see Section ”External Start”, page 268) is deactivated.
            = 0: No effect.To define and activate the track delay (for example, for Processing-on-the-fly applications), use simulate_ext_start, set_ext_start_delay or set_ext_start_delay_list.
            </para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6ExternalControlMode.Bit.ExternalStartAgain">
            <summary>
            External /START Again
            <para>
            = 1: The external start input is not disabled by an external stop request. 
            = 0: The external start input is disabled by an external stop request.
            </para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6ExternalControlMode.Bit.DisableSimulateExtCtrl">
            <summary>
            Disables simulate_ext_start_ctrl. 
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6ExternalControlMode.Bit.EncoderReset">
            <summary>
            Encoder Reset
            <para>
            = 1: Encoder resets of the two internal encoder counters occur with an external start signal or simulate_ext_start or simulate_ext_start_ctrl, postponed by a track delay defined by simulate_ext_start, set_ext_start_delay or set_ext_start_delay_list, see also Bit #2).
            = 0: Encoder resets occur immediately with each initiating Processing-on-the-fly command.
            </para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6ExternalControlMode.Bit.TrackDelayConfig">
            <summary>
            Track Delay Config
            <para>
            = 1: Track delay configured by simulate_ext_start, set_ext_start_delay or set_ext_start_delay_list is counted beginning with the most recent externally (but not with execute_list_pos etc.) triggered or simulated external list start.The interval between subsequent external list starts (in encoder pulses) is thus constant(see also page 242). For stop_execution or an external stop signal, bit #10 gets reset to “0”. This bit has no effect if the firmware version is 506 or lower(see get_rtc_version).
            = 0: Track delay configured by simulate_ext_start, set_ext_start_delay or set_ext_start_delay_list is counted beginning with the time point an external list start was requested(i.e.with the corresponding simulate_ext_start or simulate_ext_start_ctrl command or external start signal). The interval between subsequent external list starts (in encoder pulses) can thus vary.This is standard for firmware version 506 or lower(see get_rtc_version).
            </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6ExternalControlMode.Value">
            <summary>
            Bit value
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6ExternalControlMode.Add(SpiralLab.Sirius2.Scanner.Rtc.Rtc6ExternalControlMode.Bit)">
            <summary>
            Add <c>Bit</c> flag
            </summary>
            <param name="flag"><c>Bit</c></param>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6ExternalControlMode.Remove(SpiralLab.Sirius2.Scanner.Rtc.Rtc6ExternalControlMode.Bit)">
            <summary>
            Remove <c>Bit</c> flag
            </summary>
            <param name="flag"><c>Bit</c></param>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6ExternalControlMode.Contains(SpiralLab.Sirius2.Scanner.Rtc.Rtc6ExternalControlMode.Bit)">
            <summary>
            Check <c>Bit</c> flag is exist ornot
            </summary>
            <param name="flag"><c>Bit</c></param>
            <returns><c>Bit</c> is exist or not</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6ExternalControlMode.ToUInt">
            <summary>
            Conver to uint
            </summary>
            <returns>uint</returns>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6ExternalControlMode.Empty">
            <summary>
            Create empty <c>Rtc6ExternalControlMode</c> instance
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6ExternalControlMode.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6ExternalControlMode.#ctor(SpiralLab.Sirius2.Scanner.Rtc.Rtc6ExternalControlMode.Bit)">
            <summary>
            Constructor
            </summary>
            <param name="bit"><c>Bit</c></param>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6ExternalControlMode.ToString">
            <inheritdoc/>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.Rtc6StartStopInfo">
            <summary>
            Rtc6StartStopInfo
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.Rtc6StartStopInfo.Bit">
            <summary>
            Bit flags
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6StartStopInfo.Bit.InternalStartExecuted">
            <summary>
            An internal start has been executed (by execute_list or similar) since the last call of get_startstop_info.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6StartStopInfo.Bit.ExternalStartExecuted">
            <summary>
            An External Start has been executed (by /START, /START2, /SlaveSTART, simulate_ext_start or simulate_ext_start_ctrl) since the last call of get_startstop_info. 
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6StartStopInfo.Bit.InternalStopExecuted">
            <summary>
            An internal stop has been executed (by stop_execution) since the last call of get_startstop_info.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6StartStopInfo.Bit.ExternalStopExecuted">
            <summary>
            An External Stop has been executed (by /STOP, /STOP2, /Slave-STOP or simulate_ext_stop) since the last call of get_startstop_info. 
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6StartStopInfo.Bit.ExtStopStatus">
            <summary>
            Ext-stop status (= logical AND operation of the signals /STOP, /STOP2, /SlaveSTOP and simulate_ext_stop, see Figure 68):
            </summary>
            <remarks>
            1: No stop signals are currently present at the input ports or the input ports are not connected. <br/>
            0: There is a stop signal at least at one of the input ports. <br/>
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6StartStopInfo.Bit.TimeOut">
            <summary>
            The timeout with wait_for_timestamp_counter_mode and wait_for_timestamp_counter_long. 
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6StartStopInfo.Bit.LaserControlSignalsGlobalEnabled">
            <summary>
            The laser control signals are globally enabled, see Chapter 7.4.1 ”Enabling, Activating and Switching Laser Control Signals”, page 183. See also set_laser_control. 
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6StartStopInfo.Bit.Laser12SignalsActiveLow">
            <summary>
            The TTL laser control signals at the LASER1 and LASER2 output ports are active-LOW (the signal level can be defined by set_laser_control).
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6StartStopInfo.Bit.ExternalStartFailed">
            <summary>
            Since the last call of get_startstop_info, at least one External Start has failed (more External Starts were triggered than could be simultaneously held in the 8-start wait loop).
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6StartStopInfo.Bit.ExtStartStatus">
            <summary>
            Ext-Start status (= logical AND operation of the signals /START, /START2 and /Slave-START, see Figure 68): 
            </summary>
            <remarks>
            1: No start signals are currently present at the input ports or the input ports are not connected. <br/>
            0: A start signal is present at least at one of the input ports. <br/>
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6StartStopInfo.Bit.LaserOnSignalsActiveLow">
            <summary>
             The TTL laser control signal at the LASERON output port is active-LOW (the signal level can be defined by set_laser_control).
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6StartStopInfo.Bit.LaserControlSignalsEnabled">
            <summary>
            The laser control signals are enabled 
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6StartStopInfo.Bit.EthernetLinkLoss">
            <summary>
            If previously activated by eth_configure_link_loss: An Ethernet Link Loss has been detected since the last call of get_startstop_info. 
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6StartStopInfo.Bit.ErrorBits16">
            <summary>
            The error 16 bits (for first scan head connector)
            </summary>
            <remarks>
            Incorrect number of frames within a data block.
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6StartStopInfo.Bit.ErrorBits17">
            <summary>
            The error 17 bits (for first scan head connector)
            </summary>
            <remarks>
            Incorrect pulse length of signal received from scan system, maybe no scan system is connected
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6StartStopInfo.Bit.ErrorBits18">
            <summary>
            The error 18 bits (for first scan head connector)
            </summary>
            <remarks>
            Preamble sequence incorrect.
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6StartStopInfo.Bit.ErrorBits19">
            <summary>
            The error 19 bits (for first scan head connector)
            </summary>
            <remarks>
            Bit count within a subframe incorrect.
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6StartStopInfo.Bit.ErrorBits20">
            <summary>
            The error 20 bits (for first scan head connector)
            </summary>
            <remarks>
            Parity error when reading data received from scan system.
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6StartStopInfo.Bit.ErrorBits21">
            <summary>
            The error 21 bits (for first scan head connector)
            </summary>
            <remarks>
            The present data is invalid (old).
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6StartStopInfo.Bit.ErrorBits22">
            <summary>
            The error 22 bits (for first scan head connector)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6StartStopInfo.Bit.ErrorBits23">
            <summary>
            The error 23 bits (for first scan head connector)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6StartStopInfo.Bit.ErrorBits24">
            <summary>
            The error 24 bits (for second scan head connector)
            </summary>
            <remarks>
            Incorrect number of frames within a data block.
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6StartStopInfo.Bit.ErrorBits25">
            <summary>
            The error 25 bits (for second scan head connector)
            </summary>
            <remarks>
            Incorrect pulse length of signal received from scan system, maybe no scan system is connected
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6StartStopInfo.Bit.ErrorBits26">
            <summary>
            The error 26 bits (for second scan head connector)
            </summary>
            <remarks>
            Preamble sequence incorrect.
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6StartStopInfo.Bit.ErrorBits27">
            <summary>
            The error 27 bits (for second scan head connector)
            </summary>
            <remarks>
            Bit count within a subframe incorrect.
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6StartStopInfo.Bit.ErrorBits28">
            <summary>
            The error 28 bits (for second scan head connector)
            </summary>
            <remarks>
            Parity error when reading data received from scan system.
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6StartStopInfo.Bit.ErrorBits29">
            <summary>
            The error 29 bits (for second scan head connector)
            </summary>
            <remarks>
            The present data is invalid (old).
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6StartStopInfo.Bit.ErrorBits30">
            <summary>
            The error 30 bits (for second scan head connector)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6StartStopInfo.Bit.ErrorBits31">
            <summary>
            The error 31 bits (for second scan head connector)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6StartStopInfo.Value">
            <summary>
            Bit value
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6StartStopInfo.Add(SpiralLab.Sirius2.Scanner.Rtc.Rtc6StartStopInfo.Bit)">
            <summary>
            Add <c>Bit</c> flag
            </summary>
            <param name="flag"><c>Bit</c></param>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6StartStopInfo.Remove(SpiralLab.Sirius2.Scanner.Rtc.Rtc6StartStopInfo.Bit)">
            <summary>
            Remove <c>Bit</c> flag
            </summary>
            <param name="flag"><c>Bit</c></param>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6StartStopInfo.Contains(SpiralLab.Sirius2.Scanner.Rtc.Rtc6StartStopInfo.Bit)">
            <summary>
            Check <c>Bit</c> flag is exist ornot
            </summary>
            <param name="flag"><c>Bit</c></param>
            <returns><c>Bit</c> is exist or not</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6StartStopInfo.ToUInt">
            <summary>
            Conver to uint
            </summary>
            <returns>uint</returns>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6StartStopInfo.Empty">
            <summary>
            Create empty <c>Rtc6StartStopInfo</c> instance
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6StartStopInfo.#ctor(SpiralLab.Sirius2.Scanner.Rtc.Rtc6StartStopInfo.Bit)">
            <summary>
            Constructor
            </summary>
            <param name="bit"><c>Bit</c></param>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6StartStopInfo.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6StartStopInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.Rtc6MarkingInfo">
            <summary>
            Rtc6MarkingInfo
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.Rtc6MarkingInfo.Bit">
            <summary>
            Bit flags
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6MarkingInfo.Bit.MofUnderflowInXDirection">
            <summary>
            X &lt; –524288
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6MarkingInfo.Bit.MofOverflowInXDirection">
            <summary>
            X &gt; +524287
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6MarkingInfo.Bit.MofUnderflowInYDirection">
            <summary>
            Y &lt; –524288
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6MarkingInfo.Bit.MofOverflowInYDirection">
            <summary>
            Y &gt; +524287
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6MarkingInfo.Bit.MofUnderflowInXUserDirection">
            <summary>
            X &lt; Xmin
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6MarkingInfo.Bit.MofOverflowInXUserDirection">
            <summary>
            X &gt; Xmax
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6MarkingInfo.Bit.MofUnderflowInYUserDirection">
            <summary>
            Y &lt; Ymin
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6MarkingInfo.Bit.MofOverflowInYUserDirection">
            <summary>
            Y &gt; Ymin
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6MarkingInfo.Bit.TriggerError">
            <summary>
            TriggerError: an enabled external trigger or simulated trigger occurred during execution of a list.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6MarkingInfo.Bit.ActivateFlyError">
            <summary>
            ActivateFlyError: an error has occurred during activation of Processing-on-the-fly correction by activate_fly_2d or activate_fly_xy 
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6MarkingInfo.Bit.PosAckErrorHeadAX">
            <summary>
            PosAckErrorHeadAX
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6MarkingInfo.Bit.TempOkErrorHeadAX">
            <summary>
            TempOkErrorHeadAX
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6MarkingInfo.Bit.PowerOKErrorHeadAX">
            <summary>
            PowerOKErrorHeadAX
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6MarkingInfo.Bit.PosAckErrorHeadAY">
            <summary>
            PosAckErrorHeadAY
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6MarkingInfo.Bit.TempOkErrorHeadAY">
            <summary>
            TempOkErrorHeadAY
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6MarkingInfo.Bit.PowerOKErrorHeadAY">
            <summary>
            PowerOKErrorHeadAY
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6MarkingInfo.Bit.Signal1EncoderXTooShort">
            <summary>
            Signal1EncoderXTooShort
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6MarkingInfo.Bit.Signal2EncoderXTooShort">
            <summary>
            Signal2EncoderXTooShort
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6MarkingInfo.Bit.Signal1EncoderYTooShort">
            <summary>
            Signal1EncoderYTooShort
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6MarkingInfo.Bit.Signal2EncoderYTooShort">
            <summary>
            Signal2EncoderYTooShort
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6MarkingInfo.Bit.WrongSignalSequenceEncoderX">
            <summary>
            WrongSignalSequenceEncoderX
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6MarkingInfo.Bit.WrongSignalSequenceEncoderY">
            <summary>
            WrongSignalSequenceEncoderY
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6MarkingInfo.Bit.MofUnderflowInZDirection">
            <summary>
            Z &lt; –32.768
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6MarkingInfo.Bit.MofOverflowInZDirection">
            <summary>
            Z &gt; +32.767
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6MarkingInfo.Bit.MofUnderflowInZUserDirection">
            <summary>
            Z &lt; Zmin
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6MarkingInfo.Bit.MofOverflowInZUserDirection">
            <summary>
            Z &gt; Zmax
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6MarkingInfo.Bit.PosAckErrorHeadBX">
            <summary>
            PosAckErrorHeadBX
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6MarkingInfo.Bit.TempOkErrorHeadBX">
            <summary>
            TempOkErrorHeadBX
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6MarkingInfo.Bit.PowerOKErrorHeadBX">
            <summary>
            PowerOKErrorHeadBX
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6MarkingInfo.Bit.PosAckErrorHeadBY">
            <summary>
            PosAckErrorHeadBY
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6MarkingInfo.Bit.TempOkErrorHeadBY">
            <summary>
            TempOkErrorHeadBY
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6MarkingInfo.Bit.PowerOKErrorHeadBY">
            <summary>
            PowerOKErrorHeadBY
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6MarkingInfo.Value">
            <summary>
            Bit value
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6MarkingInfo.Add(SpiralLab.Sirius2.Scanner.Rtc.Rtc6MarkingInfo.Bit)">
            <summary>
            Add <c>Bit</c> flag
            </summary>
            <param name="flag"><c>Bit</c></param>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6MarkingInfo.Remove(SpiralLab.Sirius2.Scanner.Rtc.Rtc6MarkingInfo.Bit)">
            <summary>
            Remove <c>Bit</c> flag
            </summary>
            <param name="flag"><c>Bit</c></param>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6MarkingInfo.Contains(SpiralLab.Sirius2.Scanner.Rtc.Rtc6MarkingInfo.Bit)">
            <summary>
            Check <c>Bit</c> flag is exist ornot
            </summary>
            <param name="flag"><c>Bit</c></param>
            <returns><c>Bit</c> is exist or not</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6MarkingInfo.ToUInt">
            <summary>
            Conver to uint
            </summary>
            <returns>uint</returns>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6MarkingInfo.Empty">
            <summary>
            Create empty <c>Rtc6MarkingInfo</c> instance
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6MarkingInfo.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6MarkingInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.AutoDelayParamModes">
            <summary>
            Auto Delay Param Modes
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.AutoDelayParamModes.Deactivate">
            <summary>
            Deactivate
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.AutoDelayParamModes.Load">
            <summary>
            Load 
            <para>Preconfigured</para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.AutoDelayParamModes.Develop">
            <summary>
            Development 
            <para>Developer configurable</para>
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.Rtc6">
            <summary>
            Rtc6 
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.PropertyChanged">
            <inheritdoc/>
        </member>
        <member name="E:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.OnJob">
            <inheritdoc/>
        </member>
        <member name="E:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.OnCorrectionTable">
            <inheritdoc/>
        </member>
        <member name="E:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.OnEncoderChanged">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.NotifyPropertyChanged(System.String)">
            <summary>
            Nofity property value has changed
            </summary>
            <param name="propertyName">Property name</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.NotifyJob(SpiralLab.Sirius2.Scanner.IJob)">
            <summary>
            Notify job status has changed(or job has created)
            </summary>
            <param name="job"><c>IJob</c></param>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.NotifyCorrectionTable(SpiralLab.Sirius2.Scanner.Rtc.CorrectionTables,System.String)">
            <summary>
            Notify correction file has loaded into specific table
            </summary>
            <param name="table"><c>CorrectionTables</c></param>
            <param name="fileName">Correction filename</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.NotifyEncoderChanged(System.Int32,System.Int32)">
            <summary>
            Nofity encoder value has changed
            </summary>
            <param name="encX">Encoder x</param>
            <param name="encY">Encoder y</param>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.Count">
            <summary>
            Count of instance(s)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.Index">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.Name">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.RtcType">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.MatrixStack">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.KFactor">
            <inheritdoc/>  
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.kFactor">
            <summary>
            KFactor
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.BitResolution">
            <summary>
            Bit resolution (um/bit)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.EffectiveFieldSize">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.FieldSizeLimit">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.LaserMode">
            <inheritdoc/>  
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.laserMode">
            <summary>
            <c>LaserMode</c>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.IsReady">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.IsBusy">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.IsError">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.DoubleBufferMaxSize">
            <summary>
            Double buffer max size
            <para>Default: 5000 (Min: 100, Max: 2^21 - <c>List3BufferMaxSize</c>)</para>
            <para>Used with <c>ListTypes.Auto</c></para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.doubleBufferMaxSize">
            <summary>
            Double buffer max size
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.List3BufferMaxSize">
            <summary>
            List3 buffer max size
            <para>Default: 2^17</para>
            <para>Used with <c>IRtcCharacterSet</c></para>
            <para>Used with <c>ListTypes.Single</c></para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.DllVersion">
            <summary>
            RTC DLL Version
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.HexVersion">
            <summary>
            RTC HEX Version
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.RtcVersion">
            <summary>
            RTC Version
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.RtcSerial">
            <summary>
            RTC Serial no
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.InitLaser12SignalLevel">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.InitLaserOnSignalLevel">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.LaserControlSignal">
            <summary>
            Rtc6LaserControlSignal
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.laserControlSignal">
            <summary>
            <c>Rtc6LaserControlSignal</c>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.ExternalControlMode">
            <summary>
            Rtc6ExternalControlMode
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.externalControlMode">
            <summary>
            <c>Rtc6ExternalControlMode</c>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.ExternalControlMaxCounts">
            <summary>
            RtcExternalControlMaxCounts
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.externalControlMaxCounts">
            <summary>
            ExternalControlMaxCounts
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.MarkingInfo">
            <summary>
            Rtc6MarkingInfo
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.markingInfo">
            <summary>
            <c>Rtc6MarkingInfo</c>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.StartStopInfo">
            <summary>
            Rtc6StartStopInfo
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.JumpMode">
            <summary>
            Jump Mode
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.jumpMode">
            <summary>
            <c>RtcJumpMode</c>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.Job">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.JobQueue">
            <summary>
            Job queue for <c>JobRtc</c>
            </summary> 
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.JobHistory">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.Frequency">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.PulseWidth">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.DelayOn">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.DelayOff">
            <inheritdoc/> 
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.DelayJump">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.DelayMark">
            <inheritdoc/> 
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.DelayPolygon">
            <inheritdoc/> 
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.SpeedJump">
            <inheritdoc/> 
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.SpeedMark">
            <inheritdoc/> 
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.Fpk">
            <inheritdoc/>  
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.fpk">
            <summary>
            FPK
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.QSwitchDelay">
            <inheritdoc/>  
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.qSwitchDelay">
            <summary>
            QSwitchDelay
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.ListType">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.IsMoF">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.Is2ndHead">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.Is3D">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.IsLDSA">
            <summary>
            LDSA option (LaserDesk) 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.IsScanAhead">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.IsUFPM">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.IsSyncAxis">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.IsDCDCConverter">
            <summary>
            Extra DC/DC converter(optoelectronic coupler) ex works
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.IsActivateAutoDelays">
            <summary>
            Activated auto delays 
            </summary>
            <remarks>
            Only for SCANahead option. <br/> 
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.ScanAheadLineParamsCornerScale">
            <summary>
            Corner scale (0~100)
            </summary>
            <remarks>
            Only for SCANahead option. <br/>
            Use <c>CtlDelayScanAheadByAuto</c> at first. <br/>
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.scanAheadLineParamsCornerScale">
            <summary>
            Corner Scale (0~100)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.ScanAheadLineParamsEndScale">
            <summary>
            End scale (0~100)
            </summary>
            <remarks>
            Only for SCANahead option. <br/>
            Use <c>CtlDelayScanAheadByAuto</c> at first. <br/>
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.scanAheadLineParamsEndScale">
            <summary>
            End Scale (0~100)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.ScanAheadLineParamsAccScale">
            <summary>
            Acc scale (0~100)
            </summary>
            <remarks>
            Only for SCANahead option. <br/>
            Use <c>CtlDelayScanAheadByAuto</c> at first. <br/>
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.scanAheadLineParamsAccScale">
            <summary>
            Acc scale (0~100)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.CorrectionFiles">
            <inheritdoc/>  
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.correctionFiles">
            <summary>
            Array of correction files
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.PrimaryHeadTable">
            <inheritdoc/>  
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.primaryHeadTable">
            <summary>
            <c>CorrectionTableIndex</c> at primary head
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.SecondaryHeadTable">
            <inheritdoc/>  
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.secondaryHeadTable">
            <summary>
            <c>CorrectionTableIndex</c> at secondary head
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.DistanceToSecondaryHead">
            <inheritdoc/>  
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.distanceToSecondaryHead">
            <summary>
            Distance primary to secondary head
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.PrimaryHeadBaseOffset">
            <inheritdoc/>  
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.primaryHeadBaseOffset">
            <summary>
            Base offset for primary head 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.PrimaryHeadUserOffset">
            <inheritdoc/>  
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.primaryHeadUserOffset">
            <summary>
            User offset for primary head 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.SecondaryHeadBaseOffset">
            <inheritdoc/>  
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.secondaryHeadBaseOffset">
            <summary>
            Base offset for secondary head 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.SecondaryHeadUserOffset">
            <inheritdoc/>  
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.secondaryHeadUserOffset">
            <summary>
            User offset for secondary head 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.IsDirectMode3D">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.ZOffset">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.ZDefocus">
            <inheritdoc/>  
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.zDefocus">
            <summary>
            Z defocus
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.CoefA">
            <inheritdoc/>  
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.coefA">
            <summary>
            Coef A
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.CoefB">
            <inheritdoc/>  
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.coefB">
            <summary>
            Coef B
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.CoefC">
            <inheritdoc/>  
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.coefC">
            <summary>
            Coef C
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.KZFactor">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.KZScale">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.AlcSignal">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.Alc100PercentageValue">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.AlcMinValue">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.AlcMaxValue">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.MeasurementChannels">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.SamplingFrequency">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.MoFType">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.EncXCountsPerMm">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.EncYCountsPerMm">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.EncXSimulatedSpeed">
            <inheritdoc/>  
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.encXSimulatedSpeed">
            <summary>
            Simulated Encoder X Speed (mm/s)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.EncYSimulatedSpeed">
            <inheritdoc/>  
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.encYSimulatedSpeed">
            <summary>
            Simulated Encoder Y Speed (mm/s)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.EncCountsPerRevolution">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.EncSimulatedAngularSpeed">
            <inheritdoc/>  
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.encSimulatedAngularSpeed">
            <summary>
            Simulated Encoder Angular Speed (˚/sec)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.MofAngularCenter">
            <inheritdoc/>  
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.mofAngularCenter">
            <summary>
            Rotate(Anuglar) Center
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.IsDateTimeOffset">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.DateTimeOffsetDays">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.DateTimeOffsetHours">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.DateTimeOffsetMinutes">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.DateTimeOffsetSeconds">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.DateTimeOrigin">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.SerialStartNo">
            <inheritdoc/>  
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.serialStartNo">
            <summary>
            Starting Serial No 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.SerialIncrementStep">
            <inheritdoc/>  
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.serialIncrementStep">
            <summary>
            Serial No Increment Step
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.SerialCurrentNo">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.SerialMaxNo">
            <inheritdoc/>  
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.serialMaxNo">
            <summary>
            Max serial no
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.cardId">
            <summary>
            RTC card's identifier no (for multiple cards)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.vPhysical">
            <summary>
            Physical (or Transformed)) x,y,z position
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.#ctor(System.Int32,System.Double,SpiralLab.Sirius2.Scanner.Rtc.LaserModes,SpiralLab.Sirius2.Scanner.Rtc.RtcSignalLevels,SpiralLab.Sirius2.Scanner.Rtc.RtcSignalLevels,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="index">RTC Controller identifier (0,1,2,...)</param>
            <param name="kFactor">K-Factor (bits/mm)</param>
            <param name="laserMode"><c>LaserMode</c></param>
            <param name="laser12SignalLevel"><c>RtcSignalLevel</c></param>
            <param name="laserOnSignalLevel"><c>RtcSignalLevel</c></param>
            <param name="ctFileName">Field correction file at Table1</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.Finalize">
            <summary>
            종결자
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.Dispose">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.Dispose(System.Boolean)">
            <summary>
            Dispose internal resources
            </summary>
            <param name="disposing">Explicit dispose or not</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.ToString">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.Initialize">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.CtlLoadCorrectionFile(SpiralLab.Sirius2.Scanner.Rtc.CorrectionTables,System.String)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.CtlSelectCorrection(SpiralLab.Sirius2.Scanner.Rtc.CorrectionTables,SpiralLab.Sirius2.Scanner.Rtc.CorrectionTables)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.CtlLaserMode(SpiralLab.Sirius2.Scanner.Rtc.LaserModes)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.CtlLaserOn">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.CtlLaserOff">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.CtlLaserSignal(System.Boolean)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.CtlMoveTo(System.Numerics.Vector2,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.CtlFrequency(System.Double,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.CtlDelay(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.CtlDelayScanAhead(System.Double,System.Double)">
            <summary>
            Laser delays (only for SCANAhread)
            </summary>
            <remarks>
            Use <c>CtlDelayScanAheadByAuto</c> at first
            </remarks>
            <param name="laserOnShift">Laser on shift (usec)</param>
            <param name="laserOffShift">Laser off shift (usec)</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.CtlDelayAutoByScanAhead(System.Boolean)">
            <summary>
            Auto laser delays (only for SCANAhread)
            </summary>
            <param name="onOff">On(Off)</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.CtlAutoDelayParams(SpiralLab.Sirius2.Scanner.Rtc.AutoDelayParamModes,SpiralLab.Sirius2.Scanner.Rtc.ScannerHeads,SpiralLab.Sirius2.Scanner.Rtc.CorrectionTables,System.Double,System.Double,System.Double)">
            <summary>
            Auto delays params (only for SCANAhread)
            </summary>
            <param name="mode"><c>AutoDelayParamMode</c></param>
            <param name="headNo"><c>ScannerHead</c></param>
            <param name="tableNo"><c>CorrectionTableIndex</c></param>
            <param name="previewTime">Preview time (usec)</param>
            <param name="vMax">Max velocity (mm/s)</param>
            <param name="aMax">Max Acc (mm/s^2)</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.CtlDelayVariablePolygonTable(System.Collections.Generic.KeyValuePair{System.Double,System.Double}[])">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.CtlDelayVariableJumpTable(System.Collections.Generic.KeyValuePair{System.Double,System.Double}[])">
            <inheritdoc/>  
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.varPoly">
            <summary>
            0: Disables “Variable Polygon Delays” mode. Default setting. 
            1: Enables “Variable Polygon Delays” mode. 
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.directMode3D">
            <summary>
            This parameter effects only 3D-applications.
            0: The z output is changed to its end-value in such a way that the focus is kept in one plane during the entire jump.
            1: The z output is changed directly (linearly)to its end value during a jump.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.edgeLevel">
            <summary>
            This parameter defines a maximum “laser on“ time for the corners of a Polyline.
            If the Polygon Delay is longer than or equal to this value (because the angle  is close to 180°, for instance), 
            the laser is switched off (after a LaserOff Delay) and a new Polyline is started.
            This can be useful for preventing burn-in effects.
            The EdgeLevel value must be smaller than twice the set value for the Polygon Delay, otherwise it has no effect 
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.minJumpDelay">
            <summary>
            Minimum Jump Delay that cannot be undercut for jumps shorter than JumpLengthLimit(even for jump vectors of zero length, see Figure 40). 
            For jumps longer than JumpLengthLimit, the MinJumpDelay has no relevance.
            To avoid anomalies in the range of MinJumpDelay, define a value for MinJumpDelay that is not larger than the Jump Delay.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.jumpLengthLimit">
            <summary>
            Jump length limit. In bits. JumpLengthLimit > 0 enables the “Variable Jump Delays“ mode.
             If the jump vector is longer than this value, then the fixed Jump Delay (see set_scanner_delays) is inserted.
             For all shorter jump lengths, a linearly interpolated “Variable Jump Delay” (page 136) between MinJumpDelay and the Jump Delay is calculated and inserted, see Figure 40. 
             JumpLengthLimit = 0 disables the “Variable Jump Delays“ mode.
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.CtlDelayVariable(System.Boolean,System.Boolean,System.Double,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.CtlSpeed(System.Double,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.CtlWriteData``1(SpiralLab.Sirius2.Scanner.Rtc.ExtensionChannels,``0)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.CtlWriteExtDO16(System.UInt16,System.Boolean)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.CtlReadData``1(SpiralLab.Sirius2.Scanner.Rtc.ExtensionChannels,``0@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.CtlGetStatus(SpiralLab.Sirius2.Scanner.Rtc.RtcStatus)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.CtlBusyWait">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.CtlAbort">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.CtlReset">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.ListBegin(SpiralLab.Sirius2.Scanner.Rtc.ListTypes)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.ListSelectCorrection(SpiralLab.Sirius2.Scanner.Rtc.CorrectionTables,SpiralLab.Sirius2.Scanner.Rtc.CorrectionTables)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.ListFrequency(System.Double,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.ListDelay(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.ListDelayVariable(System.Boolean,System.Double,System.Boolean,System.Double,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.ListDelayScanAhead(System.Double,System.Double)">
            <summary>
            List laser delays (only for SCANAhread)
            <para> Use <c>CtlDelayScanAheadByAuto</c> at first
            </para>
            </summary>
            <param name="laserOnShift">Laser on shift (usec)</param>
            <param name="laserOffShift">Laser off shift (usec)</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.ListSpeed(System.Double,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.ListWait(System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.ListLaserOn(System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.ListLaserOn">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.ListLaserOff">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.ListJumpTo(System.Numerics.Vector2,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.ListMarkTo(System.Numerics.Vector2,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.ListArcTo(System.Numerics.Vector2,System.Double,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.ListMarksTo(System.Numerics.Vector2[],System.Double[])">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.ListWriteData``1(SpiralLab.Sirius2.Scanner.Rtc.ExtensionChannels,``0)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.ListWriteExtDO16(System.UInt16,System.Boolean)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.ListEnd">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.ListExecute(System.Boolean)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.IsDuplicated(System.Numerics.Vector2)">
            <summary>
            Check for duplicated position x,y to merge
            </summary>
            <param name="position">position</param>
            <returns>Is duplicated or not</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.IsListReady(System.UInt32)">
            <summary>
            Check list buffer availability for flow control
            </summary>
            <param name="count">counts of list commands</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.CtlHomePosition(System.Numerics.Vector2)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.CtlStandBy(System.Double,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.CtlFirstPulseKiller(System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.CtlQSwitchDelay(System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.CtlLaserControlSignal(SpiralLab.Sirius2.Scanner.Rtc.ILaserControlSignal)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.CtlExternalControl(SpiralLab.Sirius2.Scanner.Rtc.IRtcExternalControlMode,System.UInt32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.CtlSimulatedExternalStart">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.CtlExternalStartCounts(System.UInt32@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.CtlJumpMode(SpiralLab.Sirius2.Scanner.Rtc.RtcJumpMode)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.CtlLoadedCorrectionInfo(SpiralLab.Sirius2.Scanner.Rtc.CorrectionTables,SpiralLab.Sirius2.Scanner.Rtc.CorrectionFileHeaderParams,System.Double@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.CtlCorrectionReadABC(System.String,System.Double@,System.Double@,System.Double@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.CtlCorrectionWriteABC(System.String,System.Double,System.Double,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.CtlMarkingInfo(SpiralLab.Sirius2.Scanner.Rtc.IRtcMarkingInfo@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.CtlStartStopInfo(SpiralLab.Sirius2.Scanner.Rtc.IRtcStartStopInfo@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.CtlTrackingError(SpiralLab.Sirius2.Scanner.Rtc.ScannerHeads,System.Double,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.CtlPulseSynchronization(System.Boolean,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.CtlListPause">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.CtlListContinue">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.ListFirstPulseKiller(System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.ListQSwitchDelay(System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.ListSkyWritingBegin(SpiralLab.Sirius2.Scanner.Rtc.SkyWritingMode,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.ListSkyWritingEnd">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.ListRasterLine(SpiralLab.Sirius2.Scanner.Rtc.RasterModes,System.Double,System.Numerics.Vector2,System.UInt32,SpiralLab.Sirius2.Scanner.Rtc.ExtensionChannels)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.ListRasterPixel(System.Double,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.ListWobbelDefine(System.Collections.Generic.KeyValuePair{System.Numerics.Vector2,System.UInt32}[],System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.ListWobbelBegin(System.Double,System.Double,System.Double,SpiralLab.Sirius2.Scanner.Rtc.WobbelShapes)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.ListWobbelEnd">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.ListWriteExtDO16If(System.UInt32,System.UInt32,System.UInt32,System.Boolean)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.ListReadExtDI16WaitUntil(System.UInt32,System.UInt32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.ListJumpMode(SpiralLab.Sirius2.Scanner.Rtc.JumpModeFlags)">
            <inheritdoc/> 
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.ListJumpHard(System.Numerics.Vector2,System.Double,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.ListJumpHard(System.Numerics.Vector3,System.Double,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.ListJumpAndDrill(System.Numerics.Vector2,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.ListRepeatCall(System.UInt32,System.UInt32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.ListLaserPower``1(SpiralLab.Sirius2.Scanner.Rtc.ExtensionChannels,``0)">
            <summary>
            List synchronizes laser power outputs at the output ports (ANALOG OUT1, ANALOG OUT2, 8-bit digital output port, 16-bit digital output port) and Laser Delays.
            </summary>
            <typeparam name="T"><c>uint</c> or <c>double</c></typeparam>
            <param name="ch"><c>ExtensionChannels</c></param>
            <param name="data">Write data</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.CtlGetMeasurement(SpiralLab.Sirius2.Scanner.Rtc.MeasurementChannels,System.Int32[]@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.CtlConvertMeasurement(SpiralLab.Sirius2.Scanner.Rtc.MeasurementChannels,System.Int32,System.Double@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.ListMeasurementBegin(System.Double,SpiralLab.Sirius2.Scanner.Rtc.MeasurementChannels[])">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.ListMeasurementEnd">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.CtlAlcByPositionTable(System.Collections.Generic.KeyValuePair{System.Double,System.Double}[])">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.CtlAlc``1(SpiralLab.Sirius2.Scanner.Rtc.AutoLaserControlSignals,SpiralLab.Sirius2.Scanner.Rtc.AutoLaserControlModes,``0,``0,``0)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.ListAutoLaserControl``1(``0,``0,``0)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.ListAlcByVectorBegin``1(SpiralLab.Sirius2.Scanner.Rtc.AutoLaserControlSignals,``0)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.ListAlcByVectorEnd">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.CtlHeadOffset(SpiralLab.Sirius2.Scanner.Rtc.ScannerHeads,SpiralLab.Sirius2.Mathematics.Offset)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.ListHeadOffset(SpiralLab.Sirius2.Scanner.Rtc.ScannerHeads,SpiralLab.Sirius2.Mathematics.Offset)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.CtlMoveTo(System.Numerics.Vector3,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.CtlZDefocus(System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.CtlLoadZTable(System.Double,System.Double,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.CtlZDistance(System.Numerics.Vector3,System.Double@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.ListZDefocus(System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.ListJumpTo(System.Numerics.Vector3,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.ListMarkTo(System.Numerics.Vector3,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.ListArcTo(System.Numerics.Vector3,System.Double,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.ListMarksTo(System.Numerics.Vector3[],System.Double[])">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.ListRasterLine(SpiralLab.Sirius2.Scanner.Rtc.RasterModes,System.Double,System.Numerics.Vector3,System.UInt32,SpiralLab.Sirius2.Scanner.Rtc.ExtensionChannels)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.IsDuplicated(System.Numerics.Vector3)">
            <summary>
            Check for duplicated position x,y.z to merge
            </summary>
            <param name="position">position</param>
            <returns>Is duplicated or not</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.IsInFov(System.Numerics.Vector2)">
            <summary>
            Check for position x,y in fov range  
            </summary>
            <param name="position"></param>
            <returns>Is in fov range or not</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.IsInFov(System.Numerics.Vector3)">
            <summary>
            Check for position x,y,z in fov range  
            </summary>
            <param name="position"></param>
            <returns>Is in fov range or not</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.AdjustBits(System.Int32@,System.Int32@)">
            <summary>
            Adjust x,y position bits within range
            </summary>
            <param name="xBits"></param>
            <param name="yBits"></param>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.AdjustBits(System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Adjust x,y,z position bits within range
            </summary>
            <param name="xBits"></param>
            <param name="yBits"></param>
            <param name="zBits"></param>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.CtlMofEncoderReset(System.Double,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.CtlMofGetEncoder(System.Int32@,System.Int32@,System.Double@,System.Double@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.CtlMofEncoderSpeed(System.Double,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.CtlMofTrackingError(System.Double,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.CtlMofCompensateTable(System.Collections.Generic.KeyValuePair{System.Numerics.Vector2,System.Numerics.Vector2}[])">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.CtlMofExternalControlDelay(SpiralLab.Sirius2.Scanner.Rtc.RtcEncoders,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.CtlMofGetAngularEncoder(System.Int32@,System.Double@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.CtlMofAngularCenter(System.Numerics.Vector2)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.CtlMofEncoderAngularSpeed(System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.CtlMofOverflowClear">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.ListMofBegin(System.Boolean)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.ListMofAngularBegin(System.Numerics.Vector2,System.Boolean)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.ListMofOverflowClear">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.ListMofLimitIf(SpiralLab.Sirius2.Scanner.Rtc.RtcEncoders,SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderRangeConditions)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.ListMofExternalControlDelay(SpiralLab.Sirius2.Scanner.Rtc.RtcEncoders,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.ListMofWait(SpiralLab.Sirius2.Scanner.Rtc.RtcEncoders,System.Double,SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderWaitConditions)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.ListMofAngularWait(System.Double,SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderWaitConditions)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.ListMofWaitRange(System.Numerics.Vector2,System.Numerics.Vector2)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.ListMofLimits(System.Numerics.Vector2,System.Numerics.Vector2)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.ListMofEnd(System.Numerics.Vector2)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.ListMofEnd(System.Numerics.Vector3)">
            <summary>
            <para>List x,y (or rotate) MoF end</para>
            </summary>
            <param name="jumpPosition">Jump x,y,z position (mm)</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.ListMofExtBegin(SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension,SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension,System.Double,System.Double,System.Boolean)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.ListMofExtBegin(SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension,SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension,SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.ListMofExtWait(SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension,System.Double,SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderRangeConditionsExtension,System.Boolean,System.Boolean)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.ListMofExtWaitRange(SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension,System.Numerics.Vector2,SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension,System.Numerics.Vector2,System.Boolean,System.Boolean)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.ListMofExtEnd(System.Numerics.Vector2)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.ListMofExtEnd(System.Numerics.Vector3)">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.MaxCharacterSetCount">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.CtlCharacterSetBegin(SpiralLab.Sirius2.Scanner.Rtc.CharacterSets)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.CtlCharacterBegin(System.UInt32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.CtlCharacterEnd">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.CtlCharacterSetEnd">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.CtlCharacterSetIsExist(System.UInt32,SpiralLab.Sirius2.Scanner.Rtc.CharacterSets)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.CtlCharacterSetClear(SpiralLab.Sirius2.Scanner.Rtc.CharacterSets)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.CtlSerialNoReset(System.UInt32,System.UInt32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.ListText(System.String,SpiralLab.Sirius2.Scanner.Rtc.CharacterSets)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.ListDate(SpiralLab.Sirius2.Scanner.Rtc.DateFormats,System.Boolean,SpiralLab.Sirius2.Scanner.Rtc.CharacterSets)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.ListTime(SpiralLab.Sirius2.Scanner.Rtc.TimeFormats,System.Boolean,SpiralLab.Sirius2.Scanner.Rtc.CharacterSets)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.ListSerialNo(System.UInt32,SpiralLab.Sirius2.Scanner.Rtc.SerialNoFormats,SpiralLab.Sirius2.Scanner.Rtc.CharacterSets)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.CtlSerialConfig(System.UInt32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.CtlSerialWrite(System.Byte[])">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.CtlSerialWrite(System.String)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.CtlSerialRead(System.Byte[]@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.CtlSerialRead(System.String@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.ListSerialWrite(System.Byte[])">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6.ListSerialWrite(System.String)">
            <inheritdoc/>  
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.Rtc6Ethernet">
            <summary>
            RTC6 ethernet 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6Ethernet.RtcType">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6Ethernet.IpAddress">
            <summary>
            IP Address
            <example>
            Ex: 192.168.0.10
            </example>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6Ethernet.SubNetMask">
            <summary>
            Subnet mask
            <example>
            Ex: 255.255.255.0 (/24)</example>
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6Ethernet.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6Ethernet.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6Ethernet.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6Ethernet.#ctor(System.Int32,System.String,System.String,System.Double,SpiralLab.Sirius2.Scanner.Rtc.LaserModes,SpiralLab.Sirius2.Scanner.Rtc.RtcSignalLevels,SpiralLab.Sirius2.Scanner.Rtc.RtcSignalLevels,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="index">RTC Controller identifier (0,1,2,...)</param>
            <param name="ipAddress">IP address</param>
            <param name="subNetMask">Subnet mask</param>
            <param name="kFactor">K-Factor (bits/mm)</param>
            <param name="laserMode"><c>LaserMode</c></param>
            <param name="laser12SignalLevel"><c>RtcSignalLevel</c></param>
            <param name="laserOnSignalLevel"><c>RtcSignalLevel</c></param>
            <param name="ctFileName">Field correction file at Table1</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6Ethernet.Initialize">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6Ethernet.CtlGetStatus(SpiralLab.Sirius2.Scanner.Rtc.RtcStatus)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6Ethernet.CtlReset">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6Ethernet.CtlBootControl(System.Boolean)">
            <summary>
            Boot control
            </summary>
            <param name="activate">Enable(or disable) boot control</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6Ethernet.CtlReadImage(System.String)">
            <summary>
            Read binary image from NAND memory and save into specific file
            </summary>
            <param name="fileName">File to save</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6Ethernet.CtlWriteImage(System.String)">
            <summary>
            Write binary image into NAND memory from specific file
            </summary>
            <param name="fileName">File to read</param>
            <returns>Success or failed</returns>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6Ethernet.IsStreamParserWaveFormStreaming">
            <summary>
            Stream Parser with list dependent or not
            </summary>
            <remarks>
            Default: <c>False</c> <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6Ethernet.StreamParserWaveFormBufferSize">
            <summary>
            Stream Parser wave form buffer size
            </summary>
            <remarks>
            Default: 8192
            </remarks>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6Ethernet.CtlStreamParserWaveFormStreaming(System.Boolean)">
            <summary>
            Enable(or disable) waveform streaming for stream parser
            </summary>
            <remarks>
            Turned on automatically if <c>RtcStreamParser.Start</c> had called. <br/>
            Turned off automatically if <c>RtcStreamParser.Stop</c> had called. <br/>
            </remarks>
            <param name="onOff">On(or off)</param>
            <returns>Success or failed</returns>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.Rtc6Ethernet.IsStreamParserByListDependent">
            <summary>
            Stream Parser with list dependent or not
            </summary>
            <remarks>
            Default: <c>True</c> <br/>
            </remarks>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6Ethernet.CtlStreamParserByListDependent(System.Boolean)">
            <summary>
            Stream parser with list dependent(or indepent) 
            </summary>
            <param name="onOff">On(or off)</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6Ethernet.ListMeasurementBegin(System.Double,SpiralLab.Sirius2.Scanner.Rtc.MeasurementChannels[])">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6Ethernet.ListMeasurementEnd">
            <inheritdoc/>  
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.SyncAxisError">
            <summary>
            syncAxis error codes
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.SyncAxisError.ToString">
            <inheritdoc/>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis">
            <summary>
            Rtc6SyncAxis
            <para>XL-SCAN (Rtc6 + excelliSCAN + ACS)</para>
            <para>Based on syncAXIS v1.8.2</para>
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.PropertyChanged">
            <inheritdoc/>
        </member>
        <member name="E:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.OnJob">
            <inheritdoc/>
        </member>
        <member name="E:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.OnCorrectionTable">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.NotifyPropertyChanged(System.String)">
            <summary>
            Nofity property value has changed
            </summary>
            <param name="propertyName">Property name</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.NotifyJob(SpiralLab.Sirius2.Scanner.IJob)">
            <summary>
            Notify job status has changed(or job has created)
            </summary>
            <param name="job"><c>IJob</c></param>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.NotifyCorrectionTable(SpiralLab.Sirius2.Scanner.Rtc.CorrectionTables,System.String)">
            <summary>
            Notify correction file has loaded into specific table
            </summary>
            <param name="table"><c>CorrectionTables</c></param>
            <param name="fileName">Correction filename</param>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.Count">
            <summary>
            Count of instance(s)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.Index">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.Name">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.RtcType">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.MatrixStack">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.KFactor">
            <summary>
            Not used. assign K-factor at config xml file instead
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.EffectiveFieldSize">
            <summary>
            Not used. assign scanner and stage field size at config xml file instead
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.FieldSizeLimit">
            <summary>
            Not used. assign scanner and stage field size at config xml file instead
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.LaserMode">
            <summary>
            Not used. assign LaserMode at config xml file instead
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.BufferMaxSize">
            <summary>
            Not used
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.Frequency">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.PulseWidth">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.DelayOn">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.DelayOff">
            <inheritdoc/> 
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.DelayJump">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.DelayMark">
            <inheritdoc/> 
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.DelayPolygon">
            <inheritdoc/> 
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.SpeedJump">
            <inheritdoc/> 
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.SpeedMark">
            <inheritdoc/> 
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.Fpk">
            <summary>
            Assign Fpk at config xml file instedad
            <para>Not supported</para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.ListType">
            <summary>
            Not used
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.IsMoF">
            <summary>
            Not used
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.Is2ndHead">
            <summary>
            Not used
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.Is3D">
            <summary>
            Not used
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.IsScanAhead">
            <summary>
            True (forcily)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.IsUFPM">
            <summary>
            Not used
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.IsSyncAxis">
            <summary>
            True (forcily)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.IsJumpMode">
            <summary>
            Not used
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.CorrectionFiles">
            <summary>
            Do NOT edit value. <br/>
            Not supported edit correction file. <br/>
            Assign correction files at syncaxis config xml file instead. <br/>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.PrimaryHeadTable">
            <summary>
            Not used
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.SecondaryHeadTable">
            <summary>
            Not used
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.ConfigXMLFile">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.Handle">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.Job">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.JobQueue">
            <summary>
            Job queue for <c>JobSyncAxis</c>
            </summary> 
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.JobHistory">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.Head1Offset">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.Head2Offset">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.Head3Offset">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.Head4Offset">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.Trajectory">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.Dynamics">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.OpStatus">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.MotionMode">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.MotionType">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.IsRelativeCoordinateSystem">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.IsSoftStop">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.TargetStage">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.StageMoveSpeed">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.StageMoveTimeOut">
            <inheritdoc/>         
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.IsReady">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.IsBusy">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.IsError">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.BandWidth">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.IsSimulationMode">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.SimulationFileName">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.HeuristicIndex">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.StageCounts">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.ScanHeadCounts">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.ActiveChannelCounts">
            <summary>
            Active channel counts
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.ActiveChannels">
            <summary>
            Active channel list (by names)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.vPhysical">
            <summary>
            Physical (or Calculated) x,y,z position
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.#ctor(System.Int32,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="index">SyncAxis instance index (0,1,2,3, ...)</param>
            <param name="configXMLFile">Config xml filename</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.Dispose">
            <inheritdoc/> 
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.Dispose(System.Boolean)">
            <summary>
            Dispose internal resources
            </summary>
            <param name="disposing">Explicit dispose or not</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.ToString">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.Initialize">
            <summary>
            Initialize
            <code>
            string configXmlFileName = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "syncaxis", "syncAXISConfig.xml");
            var rtc = ScannerFactory.CreateRtc6SyncAxis(0, configXmlFileName);
            rtc.Initialize();
            rtc.CtlFrequency(50 * 1000, 2); // 50 KHz, 2 usec
            rtc.CtlSpeed(10, 10); // 10 mm/s
            
            ...
            rtc.BandWidth = 2.0f; // 2 Hz
            rtc.ListBegin(MotionType.StageAndScanner);
            rtc.ListJumpTo(new Vector2(0, 0));
            rtc.ListMarkTo(new Vector2(10, 0));
            rtc.ListEnd();
            rtc.ListExecute(true);
            ...
            </code>
            </summary>
            <returns>Success or Fail</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.ReInitialize">
            <summary>
            Re-initialize
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.CtlLoadCorrectionFile(SpiralLab.Sirius2.Scanner.Rtc.CorrectionTables,System.String)">
            <summary>
            Not used
            </summary>
            <param name="tableIndex"><c>CorrectionTableIndex</c></param>
            <param name="ctFileName">Correction filename</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.CtlSelectCorrection(SpiralLab.Sirius2.Scanner.Rtc.CorrectionTables,SpiralLab.Sirius2.Scanner.Rtc.CorrectionTables)">
            <summary>
            Not used
            </summary>
            <remarks>
            Use <c>CtlSelectStage</c> instead.
            </remarks>
            <param name="primaryHeadTableIndex"><c>CorrectionTableIndex</c></param>
            <param name="secondaryHeadTableIndex"><c>CorrectionTableIndex</c></param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.CtlLaserMode(SpiralLab.Sirius2.Scanner.Rtc.LaserModes)">
            <summary>
            Not used
            </summary>
            <param name="mode"><c>LaserMode</c></param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.CtlLaserOn">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.CtlLaserOff">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.CtlLaserSignal(System.Boolean)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.CtlMoveTo(System.Numerics.Vector2,System.Double)">
            <summary>
            Not used. 
            </summary>
            <remarks>
            Use <c>CtlMoveScannerPosition</c> or <c>CtlMoveStagePosition</c> instead.
            </remarks>
            <param name="position">X,Y (mm)</param>
            <param name="overrideJumpSpeed">Override jump speed (mm/s) (0: No override)</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.CtlMoveTo(System.Numerics.Vector3,System.Double)">
            <summary>
            Not used. Use <c>CtlMoveScannerPosition</c> or <c>CtlMoveStagePosition</c> instead
            </summary>
            <param name="position">X,Y (mm)</param>
            <param name="overrideJumpSpeed">Override jump speed (mm/s) (0: No override)</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.CtlFrequency(System.Double,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.CtlDelay(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Not used
            </summary>
            <param name="laserOn">Laser on delay (usec)</param>
            <param name="laserOff">Laser off delay (usec)</param>
            <param name="scannerJump">Scanner jump delay (usec)</param>
            <param name="scannerMark">Scanner mark/arc delay (usec)</param>
            <param name="scannerPolygon">Scanner polygon(corner) delay (usec)</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.CtlSpeed(System.Double,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.CtlWriteData``1(SpiralLab.Sirius2.Scanner.Rtc.ExtensionChannels,``0)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.CtlWriteExtDO16(System.UInt16,System.Boolean)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.CtlReadData``1(SpiralLab.Sirius2.Scanner.Rtc.ExtensionChannels,``0@)">
            <summary>
            Not used
            </summary>
            <typeparam name="T">uint or double</typeparam>
            <param name="ch"><c>ExtensionChannels</c></param>
            <param name="data">Data</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.CtlGetErrMsg(System.UInt32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.CtlGetStatus(SpiralLab.Sirius2.Scanner.Rtc.RtcStatus)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.CtlBusyWait">
            <summary>
            Wait until busy list status has done 
            <para>Warning: waiting timed out minimum 2 sec</para>
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.CtlAbort">
            <summary>
            Abort list executing (emergency stop)
            </summary>
            <remarks>
            If <c>IsSoftStop</c> is True, then <c>CtlStop</c> function has called internally.
            Emergency stop. Immediately turns off the laser. 
            Brings mirrors and positioning stage to a standstill as quickly as possible. 
            Wear may occur with frequent use.
            Cancels the execution of the current Job uncontrolled and immediately by a direct access to the RTC6 board (Emergency stop)
            </remarks>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.CtlStop">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.CtlReset">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.CtlBandWidth(System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.CtlSimulationMode(System.Boolean)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.CtlSelectHeuristic(System.UInt32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.CtlMotionMode(SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.MotionModes)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.CtlMotionType(SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.MotionTypes)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.CtlSelectStage(SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Stages,SpiralLab.Sirius2.Scanner.Rtc.CorrectionTables)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.CtlMoveScannerPosition(System.Numerics.Vector2)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.CtlMoveStagePosition(System.Numerics.Vector2)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.CtlGetScannerPosition(SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.ScanDevices,System.Numerics.Vector2@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.CtlGetStagePosition(System.Numerics.Vector2@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.CtlHeadOffset(SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.ScanDevices,SpiralLab.Sirius2.Mathematics.Offset)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.CtlMatrix(System.Numerics.Matrix3x2)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.CtlContourDependentSpeed(SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.ContourDependentSpeedDirections,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.CtlGetDynamics(SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Dynamics@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.CtlSetDynamics(SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Dynamics)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.CtlGetTrajectory(SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Trajectory@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.CtlSetTrajectory(SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Trajectory)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.CtlGetJumpCalculationDynamics(System.Double@,System.Double@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.CtlSetJumpCalculationDynamics(System.Double,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.CtlGetMarkCalculationDynamics(System.Double@,System.Double@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.CtlSetMarkCalculationDynamics(System.Double,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.CtlGetInternalErrMsg(System.Collections.Generic.KeyValuePair{System.UInt64,System.String}[]@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.ListBegin(SpiralLab.Sirius2.Scanner.Rtc.ListTypes)">
            <summary>
            Not used
            <remarks>
            Replaced by <c>ScannerOnly</c> mode by automatically. <br/>
            Used <c>ListBegin(MotionType)</c> instead. <br/>
            </remarks>
            </summary>
            <param name="listType"><c>ListType</c> is not used. Replaced into <c>MotionType.ScannerOnly</c></param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.ListBegin(SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.MotionTypes)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.ListMatrix(System.Numerics.Matrix3x2)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.ListSelectCorrection(SpiralLab.Sirius2.Scanner.Rtc.CorrectionTables,SpiralLab.Sirius2.Scanner.Rtc.CorrectionTables)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.ListFrequency(System.Double,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.ListDelay(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Not used
            </summary>
            <param name="laserOn">Laser on delay (usec)</param>
            <param name="laserOff">Laser off delay (usec)</param>
            <param name="scannerJump">Scanner jump delay (usec)</param>
            <param name="scannerMark">Scanner mark/arc delay (usec)</param>
            <param name="scannerPolygon">Scanner polygon(corner) delay (usec)</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.ListDelayVariable(System.Boolean,System.Double,System.Boolean,System.Double,System.Double)">
            <summary>
            Not used
            </summary>
            <param name="variableScannerPolygonDelay">Enable(or disable) variable scanner polygon delay. if enabled, scale(angle) = 1 – Cos(angle)</param>
            <param name="variableScannerPolygonEdgeLevel">Variable scanner polygon delay edge level (usec)</param>
            <param name="variableScannerJumpDelay">Enable(or disable) variable scanner jump delay</param>
            <param name="scannerJumpDelayMin">Variable scanner jump delay min time (usec)</param>
            <param name="scannerJumpDelayLimitLength">Variable scanner jump delay limit length (mm)</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.ListSpeed(System.Double,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.ListSpeedMinMark(System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.ListWait(System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.ListLaserOn(System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.ListLaserOn">
            <summary>
            Not used
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.ListLaserOff">
            <summary>
            Not used
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.ListJumpTo(System.Numerics.Vector2,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.ListJumpTo(System.Numerics.Vector3,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.ListMarkTo(System.Numerics.Vector2,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.ListMarkTo(System.Numerics.Vector3,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.ListArcTo(System.Numerics.Vector2,System.Double,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.ListArcTo(System.Numerics.Vector3,System.Double,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.ListMarksTo(System.Numerics.Vector2[],System.Double[])">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.ListMarksTo(System.Numerics.Vector3[],System.Double[])">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.ListDashedMarkTo(System.Numerics.Vector3,System.Double[],System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.ListDashedArcTo(System.Numerics.Vector3,System.Double,System.Double[],System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.ListApproxBlendLimit(System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.ListContourDependentSpeed(SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.ContourDependentSpeedDirections,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.ListSpotDistanceControl(System.Boolean,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.ListWriteData``1(SpiralLab.Sirius2.Scanner.Rtc.ExtensionChannels,``0)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.ListWriteExtDO16(System.UInt16,System.Boolean)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.ListAlcBegin(System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.ListAlcEnd">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.ListJumpCalculationDynamics(System.Double,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.ListMarkCalculationDynamics(System.Double,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.ListEnd">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.ListExecute(System.Boolean)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.ListRasterLine(SpiralLab.Sirius2.Scanner.Rtc.RasterModes,System.Double,System.Numerics.Vector2,System.UInt32,SpiralLab.Sirius2.Scanner.Rtc.ExtensionChannels)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.ListRasterLine(SpiralLab.Sirius2.Scanner.Rtc.RasterModes,System.Double,System.Numerics.Vector3,System.UInt32,SpiralLab.Sirius2.Scanner.Rtc.ExtensionChannels)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.ListRasterPixel(System.Double,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Rtc6SyncAxis.IsDuplicated(System.Numerics.Vector3)">
            <summary>
            Check for duplicated position x,y,z to merge
            </summary>
            <param name="position"><c>Vector3</c></param>
            <returns>Success or failed</returns>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.MotionTypes">
            <summary>
            Motion types
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.MotionTypes.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.MotionTypes.ScannerOnly">
            <summary>
            Scanner only
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.MotionTypes.StageOnly">
            <summary>
            Stage only
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.MotionTypes.StageAndScanner">
            <summary>
            Stage and scanner
            </summary>
            <remarks>
            Used with <see cref="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.IRtcSyncAxis.BandWidth">IRtcSyncAxis.BandWidth</see> value also. <br/>
            </remarks>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.MotionModes">
            <summary>
            Motion modes
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.MotionModes.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.MotionModes.Unfollow">
            <summary>
            UnFollow motion mode
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.MotionModes.Follow">
            <summary>
            Follow motion mode
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.ScanDevices">
            <summary>
            Scan devices
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.ScanDevices.ScanDevice1">
            <summary>
            Scan device 1
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.ScanDevices.ScanDevice2">
            <summary>
            Scan device 2
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.ScanDevices.ScanDevice3">
            <summary>
            Scan device 3
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.ScanDevices.ScanDevice4">
            <summary>
            Scan device 4
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Stages">
            <summary>
            Stages
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Stages.Stage1">
            <summary>
            Stage 1
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Stages.Stage2">
            <summary>
            Stage 2
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Stages.Stage3">
            <summary>
            Stage 3
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Stages.Stage4">
            <summary>
            Stage 4
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.OperationStatus">
            <summary>
            Operation status
            <para>Traffic light colors</para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.OperationStatus.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.OperationStatus.Green">
            <summary>
            Green
            <para>syncAXIS Control Instance is running and no errors occurred</para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.OperationStatus.Yellow">
            <summary>
            Yellow 
            <para>syncAXIS Control Instance is not yet running because the initialization is still in progress</para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.OperationStatus.Red">
            <summary>
            Red
            <para>syncAXIS Control Instance is not running and at least on error occurred</para>
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.ContourDependentSpeedDirections">
            <summary>
            Contour dependent speed directions
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.ContourDependentSpeedDirections.Middle">
            <summary>
            Default (middle)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.ContourDependentSpeedDirections.Right">
            <summary>
            Speeds are determined right of the curve mid-line
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.ContourDependentSpeedDirections.Left">
            <summary>
            Speeds are determined left of the curve mid-line
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.DynamicViolationReactions">
            <summary>
            Dynamic violation reactions
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.DynamicViolationReactions.WarningOnly">
            <summary>
            Log a warning message
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.DynamicViolationReactions.AbortImmediately">
            <summary>
            Immediately abort job execution
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.DynamicViolationReactions.StopAndReport">
            <summary>
            End the job and do a controlled jump to home position
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.DynamicMonitoringLevels">
            <summary>
            Dynamic monitoring levels
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.DynamicMonitoringLevels.Deactivated">
            <summary>
            Deactivated
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.DynamicMonitoringLevels.Position">
            <summary>
            Position
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.DynamicMonitoringLevels.Velocity">
            <summary>
            Velocity
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.DynamicMonitoringLevels.Acceleration">
            <summary>
            Acceleration
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.DynamicMonitoringLevels.Jerk">
            <summary>
            Jerk
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.ScannerDynamic">
            <summary>
            Scanner dynamic
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.ScannerDynamic.ScannerAngularVelLimit">
            <summary>
            Angular velocity limit (rad/s)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.ScannerDynamic.ScannerAngularAccLimit">
            <summary>
            Angular acc limit (rad/s²)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.ScannerDynamic.ScannerAngularJerkLimit">
            <summary>
            Angular jerk mimit (rad/s³)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.ScannerDynamic.ScannerFieldMinLimit">
            <summary>
            Position min x,y limit (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.ScannerDynamic.ScannerFieldMaxLimit">
            <summary>
            Position max x,y limit (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.ScannerDynamic.ScannerJumpAngularAcc">
            <summary>
            Calculation max jump angular acc (rad/s²)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.ScannerDynamic.ScannerJumpAngularJerk">
            <summary>
            Calculation max jump angular jerk (rad/s²)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.ScannerDynamic.ScannerMarkAngularAcc">
            <summary>
            Calculation max mark angular acc (rad/s²)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.ScannerDynamic.ScannerMarkAngularJerk">
            <summary>
            Calculation max mark angular jerk (rad/s²)
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.ScannerDynamic.ToString">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.ScannerDynamic.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.StageDynamic">
            <summary>
            Stage dynamic
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.StageDynamic.StageVelLimit">
            <summary>
            Velocity limit (mm/s)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.StageDynamic.StageAccLimit">
            <summary>
            Acc limit (mm/s²)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.StageDynamic.StageJerkLimit">
            <summary>
            Jerk limit (mm/s³)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.StageDynamic.StageFieldMinLimit">
            <summary>
            Position min x,y limit (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.StageDynamic.StageFieldMaxLimit">
            <summary>
            Position max x,y limit (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.StageDynamic.StageVel">
            <summary>
            Calculation max velocity (mm/s)
            <para>For <c>MotionType.StageOnly</c></para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.StageDynamic.StageAcc">
            <summary>
            Calculation max acc (mm/s²)
            <para>For <c>MotionType.StageOnly</c></para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.StageDynamic.StageJerk">
            <summary>
            Calculation max jerk (mm/s³)
            <para>For <c>MotionType.StageOnly</c></para>
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.StageDynamic.ToString">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.StageDynamic.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Dynamics">
            <summary>
            Dynamics
            <para>For Stage, Scanner</para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Dynamics.Scanner">
            <summary>
            Scanner dynamic
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Dynamics.ScannerMonitoringLevel">
            <summary>
            Scanner monitoring level
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Dynamics.Stage1">
            <summary>
            Stage1 dynamic
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Dynamics.Stage2">
            <summary>
            Stage2 dynamic
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Dynamics.Stage3">
            <summary>
            Stage3 dynamics
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Dynamics.Stage4">
            <summary>
            Stage4 dynamics
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Dynamics.StageMonitoringLevel">
            <summary>
            Stage monitoring level
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Dynamics.Reaction">
            <summary>
            Violation reaction
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Dynamics.ToString">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Dynamics.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.MarkConfig">
            <summary>
            Mark config
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.MarkConfig.LaserPreTriggerTime">
            <summary>
            LaserPreTriggerTime, Time to trigger the laser signal in advance, if a mark segment is executed (usec)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.MarkConfig.LaserSwitchOffsetTime">
            <summary>
            LaserSwitchOffsetTime, Time shift for the laser signals output (usec)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.MarkConfig.LaserMinOffTime">
            <summary>
            LaserMinOffTime, Shortest 'Laser Standby' operation duration (usec)
            <para>Min: 0.015625usec = 1/64usec</para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.MarkConfig.JumpSpeed">
            <summary>
            Combined jump speed (mm/s)
            </summary>
            <remarks>
            Desired combined jump speed (that is, combined scanner and positioning stage motion) during Job execution. <br/>
            In StageOnly mode, <br/>
            this speed is strictly adhered to as maximum speed, otherwise the value may be slightly exceeded temporarily.<br/>
            As of ≥ V1.5.0, the following applies: <br/>
            In operation mode “StageOnly”, this speed is strictly adhered to as the maximum speed.<br/>
            In operation mode “ScannerOnly” and “StageAndScanner”, the value can even be temporarily exceeded slightly.<br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.MarkConfig.MarkSpeed">
            <summary>
            Combined mark speed (mm/s)
            </summary>
            <remarks>
            The highest desired combined  marking speed(that is, combined scanner and positioning stage motion) during Job execution.<br/>
            There may be cases with blending curves at corner points where the syncAXIS control instance must apply a lower speed.<br/>
            Then at least the value of MinimalMarkSpeed is used.<br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.MarkConfig.MinimalMarkSpeed">
            <summary>
            Minimal mark speed (mm/s)
            </summary>
            <remarks>
            The lowest desired spot velocity that shall be reached in corners of the contour.<br/>
            With blending curves at corner points – in order to make rounded edges possible – the syncAXIS control instance is allowed to slow down to this speed.<br/>
            See MarkSpeed. <br/>
            If a exact defined corner blending cannot be performed with the known scanner and positioning stage dynamics with at least this minimal marking speed, a Sky Writing-like motion is executed.<br/>
            </remarks>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.MarkConfig.ToString">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.MarkConfig.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.BlendModes">
            <summary>
            Blend modes
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.BlendModes.Deactivated">
            <summary>
            Deactivated
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.BlendModes.VariableBlending">
            <summary>
            Variable
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.BlendModes.MinimalBlending">
            <summary>
            Minimal
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.BlendModes.FixedBlending">
            <summary>
            Fixed
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.SplineModes">
            <summary>
            Spline modes
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.SplineModes.Deactivated">
            <summary>
            Deactivated
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.SplineModes.Interpolating">
            <summary>
            Interpolating
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.SplineModes.Approximating">
            <summary>
            Approximating
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.GeometryConfig">
            <summary>
            Geometry config
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.GeometryConfig.BlendMode">
            <summary>
            Blend mode
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.GeometryConfig.MaxBlendRadius">
            <summary>
            Max blend radius (mm)
            <para>
            Important: For BlendMode = slsc_BlendModes_MinimalBlending, the MaxBlendRadius value is used as the limit for the blending curve start.
            </para>
            </summary>
            <remarks>
            Radius of the circle around the corner point(between two vectors) in which the blending curve is to be positioned.<br/>
            In the marking result,  blending curves are also limited by the vector length: Ractual = min(R, l/2). <br/>
            If the values specified with MaxBlendRadius and/or ApproxBlendLimit cannot be adhered to, <br/>
            then the syncAXIS control instance executes a jump(similar but different as  with RTC-Sky Writing). <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.GeometryConfig.ApproxBlendLimit">
            <summary>
            Approx blend limit (mm)
            </summary>
            <remarks>
            Maximum tolerable mathematical distance of the blending curve to the corner point. <br/>
            If the values specified with MaxBlendRadius and/or ApproxBlendLimit cannot be adhered to, then the syncAXIS control instance executes a jump (similar but different as  with RTC-Sky Writing).<br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.GeometryConfig.VectorResolution">
            <summary>
            Vector resolution (mm)
            </summary>
            <remarks>
            If the target points of two consecutive Mark functions (slsc_list_mark_abs, slsc_list_multi_para_mark_abs, slsc_list_para_mark_abs) have a smaller distance than the VectorResolution value, 
            then these target points are regarded by the syncAXIS control instance as identical.<br/>
            That is, with Mark vector → Mark vector sequences, target points are dismissed under certain circumstances.<br/>
            The intended use of VectorResolution is as  follows: users shall be able to specify target points with a certain input inaccuracy (for example, with floating points or, if data is automatically read-in). <br/>
            Therefore, reasonable values are in the micrometer range, for example 0.02 mm.<br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.GeometryConfig.AutoCyclicGeometry">
            <summary>
            Deprecated
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.GeometryConfig.SplineConversionLengthLimit">
            <summary>
            Deprecated
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.GeometryConfig.SplineMode">
            <summary>
            Deprecated
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.GeometryConfig.ToString">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.GeometryConfig.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Trajectory">
            <summary>
            Trajectory: Mark + Geometry config
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Trajectory.Mark">
            <summary>
            Mark configuration 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Trajectory.Geometry">
            <summary>
            Geometry configuration 
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Trajectory.ToString">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Trajectory.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.CalculationStatus">
            <summary>
            Calculation status
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.CalculationStatus.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.CalculationStatus.Start">
            <summary>
            Started
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.CalculationStatus.InProgress">
            <summary>
            In progress
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.CalculationStatus.Finished">
            <summary>
            Finished
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.CalculationStatus.Failed">
            <summary>
            Failed
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.TransferStatus">
            <summary>
            Transfer status
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.TransferStatus.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.TransferStatus.LoadedEnough">
            <summary>
            Loaded enough
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.ExecutionStatus">
            <summary>
            Execution status
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.ExecutionStatus.Aborted">
            <summary>
            Aborted
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.ExecutionStatus.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.ExecutionStatus.Executing">
            <summary>
            Executing
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.ExecutionStatus.Finished">
            <summary>
            Finished
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.ExecutionStatus.Failed">
            <summary>
            Failed
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.ScannerJobCharacteristic">
            <summary>
            Scanner job characteristic
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.ScannerJobCharacteristic.ScanPosMax">
            <summary>
            Scanner max x, y position (mm)
            <para>
            Max. distance of the scan head to zero position (without offset)
            </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.ScannerJobCharacteristic.ScanVelMax">
            <summary>
            Scanner max x, y velocity (mm/s)
            <para>
            Absolute value of the max. scan head velocity
            </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.ScannerJobCharacteristic.ScanAccMax">
            <summary>
            Scanner max x, y acc (mm/s)
            <para>
            Absolute value of the max. scan head acceleration
            </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.ScannerJobCharacteristic.ScanPosLaserOnMax">
            <summary>
            Scanner max x, y position (mm) + Laser on 
            <para>
            Absolute value of the max. scan head position
            </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.ScannerJobCharacteristic.ScannerPosXMinMax">
            <summary>
            Scanner min,max x position (mm)
            <para>
            Min. Max. scan head position. In x direction
            </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.ScannerJobCharacteristic.ScannerPosYMinMax">
            <summary>
            Scanner min,max y position (mm)
            <para>
            Min. Max. scan head position. In y direction
            </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.ScannerJobCharacteristic.ScannerPosXLaserOnMinMax">
            <summary>
            Scanner min,max x position (mm) + Laser on
            <para>
            Min. Max. scan head position. In x direction
            </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.ScannerJobCharacteristic.ScannerPosYLaserOnMinMax">
            <summary>
            Scanner min,max y position (mm) + Laser on
            <para>
            Min. Max. scan head position. In y direction
            </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.ScannerJobCharacteristic.Tag">
            <summary>
            User data
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.ScannerJobCharacteristic.ToString">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.ScannerJobCharacteristic.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.StageJobCharacteristic">
            <summary>
            Stage job characteristic
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.StageJobCharacteristic.StagePosMax">
            <summary>
            Stage max x, y position (mm)
            <para>
            Max. distance of the positioning stage to zero position (without offset)
            </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.StageJobCharacteristic.StageVelMax">
            <summary>
            Stage max x, y velocity (mm/s)
            <para>
            Absolute value of the max. positioning stage velocity
            </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.StageJobCharacteristic.StageAccMax">
            <summary>
            Stage max x, y acc (mm/s²)
            <para>
            Absolute value of the max. positioning stage acceleration
            </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.StageJobCharacteristic.StageJerkMax">
            <summary>
            Stage max x, y jerk (mm/s³)
            <para>
            Absolute value of the max. positioning stage jerk
            </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.StageJobCharacteristic.StagePosLaserOnMax">
            <summary>
            Stage max x, y position (mm) + Laser on 
            <para>
            Absolute value of the max. positioning stage position
            </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.StageJobCharacteristic.StagePosXMinMax">
            <summary>
            Stage min,max x position (mm)
            <para>
            Min. Max. scan head position. In x direction. In mm
            </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.StageJobCharacteristic.StagePosYMinMax">
            <summary>
            Stage min,max y position (mm)
            <para>
            Min. Max. scan head position. In x direction
            </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.StageJobCharacteristic.StagePosXLaserOnMinMax">
            <summary>
            Stage min,max x position (mm) + Laser on
            <para>
            Min. Max. stage position. In x direction
            </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.StageJobCharacteristic.StagePosYLaserOnMinMax">
            <summary>
            Stage min,max y position (mm) + Laser on
            <para>
            Min. Max. stage position. In y direction
            </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.StageJobCharacteristic.Tag">
            <summary>
            User data
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.StageJobCharacteristic.ToString">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.StageJobCharacteristic.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.JobCharacteristic">
            <summary>
            Job characteristic
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.JobCharacteristic.Scanner">
            <summary>
            Scanner job characteristic
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.JobCharacteristic.Stage">
            <summary>
            Stage job characteristic
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.JobCharacteristic.MotionMicroSteps">
            <summary>
            Motion micro steps
            <para>Every 10usecs</para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.JobCharacteristic.MarkSpeedMinMax">
            <summary>
            Mark min, max speed (mm/s)
            <para>
            The minimum marking speed during the Job. <br/>
            Only those parts are taken into account in which the laser is switched on (laser spot speed). <br/>
            </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.JobCharacteristic.InsertedSkywritings">
            <summary>
            Inserted Skywritings
            <para>
            Number of successions in which a Sky Writing-like motion has been inserted. (because a direct crossing would violate the dynamic limits and also a blending cannot be implemented).<br/>
            </para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.JobCharacteristic.Tag">
            <summary>
            User data
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.JobCharacteristic.ToString">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.JobCharacteristic.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.UtilizedScanner">
            <summary>
            Utilized scanner
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.UtilizedScanner.Position">
            <summary>
            Utilized scanner x,y position area (%)
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.UtilizedScanner.ToString">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.UtilizedScanner.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.UtilizedStage">
            <summary>
            Utilized stage
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.UtilizedStage.Position">
            <summary>
            Utilized stage x,y position area
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.UtilizedStage.Acc">
            <summary>
            Utilized stage x,y acceleration (%)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.UtilizedStage.Jerk">
            <summary>
            Utilized stage x,y jerk (%)
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.UtilizedStage.ToString">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.UtilizedStage.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.JobSyncAxis">
            <summary>
            JobSyncAxis
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.JobSyncAxis.ID">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.JobSyncAxis.Name">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.JobSyncAxis.Description">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.JobSyncAxis.BandWidth">
            <summary>
            BandWidth (Hz) 
            </summary>
            <remarks>
            Low-pass frequency (for <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.MotionTypes.StageAndScanner">MotionTypes.StageAndScanner</see> mode only) <br/>
            Lower than 0.23 are not allowed. <br/>
            <img src="images/lpf.png"/> <br/>
            Otherwise, the return value indicates that Bit #06 is set (UnplausibleOrUnknownParameter). <br/>
            Typical values are between 1…3 Hz, depending on the scan head working field and the dynamic range of the positioning stage.<br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.JobSyncAxis.MotionType">
            <summary>
            Motion type
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.JobSyncAxis.XmlConfigFileName">
            <summary>
            XML config filename
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.JobSyncAxis.IsRelativeCoordinate">
            <summary>
            Is enabled relative coordinate system when <see cref="M:SpiralLab.Sirius2.Scanner.Rtc.IRtc.ListBegin(SpiralLab.Sirius2.Scanner.Rtc.ListTypes)">ListBegin</see> 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.JobSyncAxis.CalcStatus">
            <summary>
            Job calculation status
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.JobSyncAxis.TransStatus">
            <summary>
            Job transfer status
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.JobSyncAxis.ExecStatus">
            <summary>
            Job execution status
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.JobSyncAxis.Result">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.JobSyncAxis.ListTotalCounts">
            <summary>
            Approx. Total list command counts
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.JobSyncAxis.Characteristic">
            <summary>
            Job characteristic
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.JobSyncAxis.ActiveChannelCount">
            <summary>
            Active channel count(s)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.JobSyncAxis.ActiveChannels">
            <summary>
            List of active channel(s)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.JobSyncAxis.HeadCounts">
            <summary>
            Scan head count(s)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.JobSyncAxis.Head1Offset">
            <summary>
            Scan head1 offset (x,y and rotate) (mm,mm,deg)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.JobSyncAxis.Head2Offset">
            <summary>
            Scan head2 offset (x,y and rotate) (mm,mm,deg)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.JobSyncAxis.Head3Offset">
            <summary>
            Scan head3 offset (x,y and rotate) (mm,mm,deg)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.JobSyncAxis.Head4Offset">
            <summary>
            Scan head4 offset (x,y and rotate) (mm,mm,deg)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.JobSyncAxis.UtilizedScanner">
            <summary>
            Utilized scanner
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.JobSyncAxis.StageCounts">
            <summary>
            Stage count(s)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.JobSyncAxis.UtilizedStage1">
            <summary>
            Utilized stage1
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.JobSyncAxis.UtilizedStage2">
            <summary>
            Utilized stage2
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.JobSyncAxis.UtilizedStage3">
            <summary>
            Utilized stage3
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.JobSyncAxis.UtilizedStage4">
            <summary>
            Utilized stage4
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.JobSyncAxis.UtilizedStages">
            <summary>
            Array of utilized stages
            <para>Only for multiple stage(s)</para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.JobSyncAxis.StartTime">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.JobSyncAxis.EndTime">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.JobSyncAxis.ExecutionTime">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.JobSyncAxis.Tag">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.JobSyncAxis.ToString">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.JobSyncAxis.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.JobSyncAxis.#ctor(System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="id">Job id</param>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.IRtcSyncAxis">
            <summary>
            IRtcSyncAxis interface
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.IRtcSyncAxis.Handle">
            <summary>
            Handle for syncAXIS instance
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.IRtcSyncAxis.ConfigXMLFile">
            <summary>
            XML config filename
            </summary>
            <remarks>
            Do <c>IRtcSyncAxis.Initialize()</c> to change xml file at first. <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.IRtcSyncAxis.IsSimulationMode">
            <summary>
            Enable(or disable) simulation mode 
            </summary>
            <remarks>
            Edit config xml file at first to enable simulation mode. <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.IRtcSyncAxis.SimulationFileName">
            <summary>
            Simulation output filename
            </summary>
            <remarks>
            Output to <c>[BaseDirectoryPath]/Logs/</c> by <c>ConfigXMLFile</c> 
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.IRtcSyncAxis.Head1Offset">
            <summary>
            Scan head1 offset 
            </summary>
            <remarks>
            X(mm), Y(mm), Z(mm), Angle(°)<br/>
            Z offset is not supported yet.<br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.IRtcSyncAxis.Head2Offset">
            <summary>
            Scan head2 offset
            </summary>
            <remarks>
            X(mm), Y(mm), Z(mm), Angle(°)<br/>
            Z offset is not supported yet.<br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.IRtcSyncAxis.Head3Offset">
            <summary>
            Scan head3 offset
            </summary>
            <remarks>
            X(mm), Y(mm), Z(mm), Angle(°)<br/>
            Z offset is not supported yet. <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.IRtcSyncAxis.Head4Offset">
            <summary>
            Scan head4 offset
            </summary>
            <remarks>
            X(mm), Y(mm), Z(mm), Angle(°)<br/>
            Z offset is not supported yet. <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.IRtcSyncAxis.Trajectory">
            <summary>
            Trajectory (<c>MarkConfig</c>, <c>GeometryConfig</c>)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.IRtcSyncAxis.Dynamics">
            <summary>
            Dynamics (<c>ScannerDynamic</c>, <c>StageDynamic</c>)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.IRtcSyncAxis.OpStatus">
            <summary>
            Operation status
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.IRtcSyncAxis.MotionMode">
            <summary>
            Motion mode
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.IRtcSyncAxis.MotionType">
            <summary>
            Motion type
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.IRtcSyncAxis.IsRelativeCoordinateSystem">
            <summary>
            Is enabled(or disable) relative coordinate system or not
            </summary>
            <remarks>
            Used when <c>ListBegin</c> has called.
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.IRtcSyncAxis.IsSoftStop">
            <summary>
            Is enabled soft stop when aborting <c>CtlAbort</c>
            </summary>
            <remarks>
            True = <br/>
            Cancels the execution of the current Job controlled and inserts a compensation movement for deceleration.  <br/>
            After the slsc_ctrl_stop_controlled call the RTC6 board is still processing already loaded RTC6 micro vector commands in its list memory. <br/>
            Therefore, it may take up to 30 s until the actual Job execution end.Afterwards the compensation movement for deceleration is executed.During this entire time, slsc_ctrl_get_exec_state returns slsc_ExecState_Executing.<br/>
            After the compensation movement, the syncAXIS control instance operation status changes to red. The syncAXIS control instance must be initialized again.<br/> <br/>
            False = <br/>
            Cancels the execution of the current Job uncontrolled and immediately by a direct access to the RTC6 board. (Emergency stop)<br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.IRtcSyncAxis.TargetStage">
            <summary>
            Target stage
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.IRtcSyncAxis.StageMoveSpeed">
            <summary>
            Stage moving speed (mm/s)
            </summary>
            <remarks>
            Default speed: 10 mm/s
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.IRtcSyncAxis.StageMoveTimeOut">
            <summary>
            Stage moving timeout (s)
            </summary>
            <remarks>
            Default timeout: 10 s
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.IRtcSyncAxis.BandWidth">
            <summary>
            BandWidth (Hz)
            </summary>
            <remarks>
            Higher value: Increase work load at stage. <br/>
            Lower value: Increase work load at scanner. <br/>
            Lower than 0.23 are not allowed. <br/>
            Typical values are between 1~3 Hz, depending on the scan head working field and the dynamic range of the positioning stage.  <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.IRtcSyncAxis.HeuristicIndex">
            <summary>
            Heuristic index
            </summary>
            <remarks>
            Used with <c>DynamicReductionFunction</c> by <c>ConfigXMLFile</c> <br/>
            Determines the spatial extent of each Segment = distance between starting point and end point (exception: diameter of the circle with circular Segments ([*] arc[*], [*] circle[*]) which sweep more than a semicircle). <br/>
            Checks the characteristic(= DynamicReductionFunction) if there is a corresponding Velocity value for the result from(1) (= Length value). <br/>
            Only if the Velocity value from(2) is smaller than the original marking speed: the Heuristic reduces the marking speed of the Segment to this Velocity value. <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.IRtcSyncAxis.StageCounts">
            <summary>
            Stage count(s) at <c>ConfigXMLFile</c>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.IRtcSyncAxis.ScanHeadCounts">
            <summary>
            Scan head count(s) at <c>ConfigXMLFile</c>
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.IRtcSyncAxis.CtlBandWidth(System.Double)">
            <summary>
            Change <c>BandWidth</c> (Hz)
            </summary>
            <remarks>
            Higher value: Increase work load at stage.<br/>
            Lower value: Increase work load at scanner.<br/>
            Lower than 0.23 are not allowed. <br/>
            Typical values are between 1~3Hz, depending on the scan head working field and the dynamic range of the positioning stage. <br/>
            </remarks>
            <param name="filterBandWidth">LPF (Hz)</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.IRtcSyncAxis.CtlSimulationMode(System.Boolean)">
            <summary>
            Enable(or disable) simulation mode 
            </summary>
            <remarks>
            <c>False</c> means, hardware mode has activated.
            </remarks>
            <param name="enable">Enable(or disable)</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.IRtcSyncAxis.CtlSelectHeuristic(System.UInt32)">
            <summary>
            Change heuristic index
            </summary>
            <remarks>
            Used with <c>DynamicReductionFunction</c> by <c>ConfigXMLFile</c> <br/>
            Determines the spatial extent of each Segment = distance between starting point and end point (exception: diameter of the circle with circular Segments ([*] arc[*], [*] circle[*]) which sweep more than a semicircle).<br/>
            Checks the characteristic(= DynamicReductionFunction) if there is a corresponding Velocity value for the result from(1) (= Length value).<br/>
            Only if the Velocity value from(2) is smaller than the original marking speed: the Heuristic reduces the marking speed of the Segment to this Velocity value.<br/>
            </remarks>
            <param name="heuristicIndex">Index no</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.IRtcSyncAxis.CtlMotionMode(SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.MotionModes)">
            <summary>
            Change <c>MotionMode</c>
            </summary>
            <param name="motionMode"><c>MotionMode</c> </param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.IRtcSyncAxis.CtlMotionType(SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.MotionTypes)">
            <summary>
            Change <c>MotionType</c>
            </summary>
            <param name="mt"><c>MotionType</c></param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.IRtcSyncAxis.CtlSelectStage(SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Stages,SpiralLab.Sirius2.Scanner.Rtc.CorrectionTables)">
            <summary>
            Select scanner field correction table at target stage
            </summary>
            <param name="stage"><c>Stage</c> (1,2,3,4)</param>
            <param name="tableIndex"><c>CorrectionTableIndex</c> (1,2,3,4) </param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.IRtcSyncAxis.CtlMoveScannerPosition(System.Numerics.Vector2)">
            <summary>
            Move scanner position
            </summary>
            <param name="position">X,Y position (mm)</param>        
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.IRtcSyncAxis.CtlMoveStagePosition(System.Numerics.Vector2)">
            <summary>
            Move stage position
            </summary>
            <remarks>
            Used with <c>StageMoveSpeed</c>, <c>StageMoveTimeOut</c> values <br/>
            </remarks>
            <param name="position">X,Y position (mm)</param>        
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.IRtcSyncAxis.CtlGetScannerPosition(SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.ScanDevices,System.Numerics.Vector2@)">
            <summary>
            Get acutal scanner position
            </summary>
            <param name="scanDevice"><c>ScanDevice</c></param>
            <param name="position">X,Y position (mm)</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.IRtcSyncAxis.CtlGetStagePosition(System.Numerics.Vector2@)">
            <summary>
            Get actual stage position
            </summary>
            <param name="position">X,Y position (mm)</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.IRtcSyncAxis.CtlHeadOffset(SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.ScanDevices,SpiralLab.Sirius2.Mathematics.Offset)">
            <summary>
            Scan head offset (For multiple scan heads)
            </summary>
            <param name="scanDevice"><c>ScanDevice</c></param>
            <param name="offset">Translate dx, dy, dz (mm) and angle(°, +: CCW, -: CW)</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.IRtcSyncAxis.CtlMatrix(System.Numerics.Matrix3x2)">
            <summary>
            Transformation matrix and an offset value 
            </summary>
            <remarks>
            Calculates the new target points according to = (transformation matrix × target point) + offset <br/>
            The change will take effect at runtime as of the next <c>ListBegin</c>. <br/>
            </remarks>
            <param name="matrix">2x2 matrix and offset</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.IRtcSyncAxis.CtlContourDependentSpeed(SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.ContourDependentSpeedDirections,System.Double)">
            <summary>
            Contour dependent speed direction control
            </summary>
            <param name="direction"><c>ContourDependentSpeedDirection</c></param>
            <param name="spotRadius">Spot radius (mm)</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.IRtcSyncAxis.CtlGetDynamics(SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Dynamics@)">
            <summary>
            Get Calculation dynamics
            </summary>
            <param name="dynamics"><c>Dynamics</c></param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.IRtcSyncAxis.CtlSetDynamics(SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Dynamics)">
            <summary>
            Set Calculation dynamics
            </summary>
            <param name="dynamics"><c>Dynamics</c></param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.IRtcSyncAxis.CtlGetTrajectory(SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Trajectory@)">
            <summary>
            Get Trajectory
            </summary>
            <param name="trajectory"><c>Trajectory</c></param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.IRtcSyncAxis.CtlSetTrajectory(SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.Trajectory)">
            <summary>
            Set Trajectory
            </summary>
            <param name="trajectory"><c>Trajectory</c></param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.IRtcSyncAxis.CtlGetJumpCalculationDynamics(System.Double@,System.Double@)">
            <summary>
            Get jump calculation dynamic
            </summary>
            <param name="angularAcc">Angular acc<br/>excelliSCAN14: 1.1314e5<br/>excelliSCAN20: 5.6e4<br/></param>
            <param name="angularJerk">Angualr jerk<br/>excelliSCAN14: 4e9<br/>excelliSCAN20: 1e9<br/></param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.IRtcSyncAxis.CtlSetJumpCalculationDynamics(System.Double,System.Double)">
            <summary>
            Set jump calculation dynamic
            </summary>
            <param name="angularAcc">Angular acc<br/>excelliSCAN14: 1.1314e5<br/>, excelliSCAN20: 5.6e4<br/></param>
            <param name="angularJerk">Angualr jerk<br/>excelliSCAN14: 4e9<br/>, excelliSCAN20: 1e9<br/></param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.IRtcSyncAxis.CtlGetMarkCalculationDynamics(System.Double@,System.Double@)">
            <summary>
            Get mark calculation dynamic
            </summary>
            <param name="angularAcc">Angular acc<br/>excelliSCAN14: 1.1314e5<br/>, excelliSCAN20: 5.6e4<br/></param>
            <param name="angularJerk">Angualr jerk<br/>excelliSCAN14: 4e9<br/>, excelliSCAN20: 1e9<br/></param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.IRtcSyncAxis.CtlSetMarkCalculationDynamics(System.Double,System.Double)">
            <summary>
            Set mark calculation dynamic
            </summary>
            <param name="angularAcc">Angular acc<br/>excelliSCAN14: 1.1314e5<br/>, excelliSCAN20: 5.6e4<br/></param>
            <param name="angularJerk">Angualr jerk<br/>excelliSCAN14: 4e9<br/>, excelliSCAN20: 1e9<br/></param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.IRtcSyncAxis.CtlGetErrMsg(System.UInt32)">
            <summary>
            Query syncAxis error code
            </summary>
            <param name="errorCode">Error code</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.IRtcSyncAxis.CtlGetInternalErrMsg(System.Collections.Generic.KeyValuePair{System.UInt64,System.String}[]@)">
            <summary>
            Get error(s) of internal syncAXIS instance
            </summary>
            <param name="kvErrors">Array of error code, messages</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.IRtcSyncAxis.CtlStop">
            <summary>
            Stop list executing (soft stop)
            <para>With compensation movement for deceleration. Does not ensure the fastest possible standstill of the system, but maintains all specified dynamic limits</para>
            </summary>
            <remarks>
            Cancels the execution of the current Job controlled and inserts a compensation movement for deceleration. <br/>
            After the slsc_ctrl_stop_controlled call the RTC6 board is still processing already loaded RTC6 micro vector commands in its list memory. <br/>
            Therefore, it may take up to 30 s until the actual Job execution end.<br/>
            Afterwards the compensation movement for deceleration is executed.<br/>
            During this entire time, slsc_ctrl_get_exec_state returns slsc_ExecState_Executing.<br/>
            After the compensation movement, the syncAXIS control instance operation status changes to red. <br/>
            The syncAXIS control instance must be initialized again.<br/>
            </remarks>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.IRtcSyncAxis.ListBegin(SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.MotionTypes)">
            <summary>
            List begin
            </summary>
            <remarks>
            Used list buffer mode to <c>slsc_ListHandlingMode_RepeatWhileBufferFull</c> by forcily.
            </remarks>
            <param name="motionType"><c>MotionType</c></param>
            <returns>Success or failed<br/>If return failed, marker would be stopped(or aborted) immediately. <br/></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.IRtcSyncAxis.ListMatrix(System.Numerics.Matrix3x2)">
            <summary>
            List transformation matrix and an offset value 
            </summary>
            <remarks>
            Calculates the new target points according to = (transformation matrix × target point) + offset <br/>
            The change applies as of the insert position but only until the end of the currently running Job.<br/>
            </remarks>
            <param name="matrix">3x3 matrix with offset</param>
            <returns>Success or failed<br/>If return failed, marker would be stopped(or aborted) immediately. <br/></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.IRtcSyncAxis.ListSpeedMinMark(System.Double)">
            <summary>
            List min. mark speed
            </summary>
            <param name="mark">Min. mark speed (mm/s)</param>
            <returns>Success or failed<br/>If return failed, marker would be stopped(or aborted) immediately. <br/></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.IRtcSyncAxis.ListApproxBlendLimit(System.Double)">
            <summary>
            List approx. blend limit
            </summary>
            <remarks>
            Maximum tolerable mathematical distance of the blending curve to the corner point. <br/>
            </remarks>
            <param name="approxBlendLimit">Approx. blend limit (mm)</param>
            <returns>Success or failed<br/>If return failed, marker would be stopped(or aborted) immediately. <br/></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.IRtcSyncAxis.ListContourDependentSpeed(SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.ContourDependentSpeedDirections,System.Double)">
            <summary>
            List contour dependent speed calculation
            </summary>
            <param name="direction"><c>ContourDependentSpeedDirection</c></param>
            <param name="spotRadius">Radius of the laser spot in the working plane (mm). specifies how far to the right or left of the curve mid-line the speeds are determined.</param>
            <returns>Success or failed<br/>If return failed, marker would be stopped(or aborted) immediately. <br/></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.IRtcSyncAxis.ListSpotDistanceControl(System.Boolean,System.Double)">
            <summary>
            List spot distance control
            </summary>
            <param name="suppress">Supress or not. should be activated <c>SpotDistance</c> at <c>ActiveChannel</c></param>
            <param name="timeDelay">Time delay (sec)</param>
            <returns>Success or failed<br/>If return failed, marker would be stopped(or aborted) immediately. <br/></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.IRtcSyncAxis.ListAlcBegin(System.Double)">
            <summary>
            List start ramping (aka. Automatic laser control)
            </summary>
            <param name="startingAlcScaleFactor">Starting ramp factor (default: 1)</param>
            <returns>Success or failed<br/>If return failed, marker would be stopped(or aborted) immediately. <br/></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.IRtcSyncAxis.ListAlcEnd">
            <summary>
            List end ramping (aka. Automatic laser control)
            </summary>
            <returns>Success or failed<br/>If return failed, marker would be stopped(or aborted) immediately. <br/></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.IRtcSyncAxis.ListJumpCalculationDynamics(System.Double,System.Double)">
            <summary>
            List set jump calculation dynamics
            </summary>
            <param name="angularAcc">Angular acc<br/>excelliSCAN14: 1.1314e5<br/>excelliSCAN20: 5.6e4<br/></param>
            <param name="angularJerk">Angualr jerk<br/>excelliSCAN14: 4e9<br/>excelliSCAN20: 1e9<br/></param>
            <returns>Success or failed<br/>If return failed, marker would be stopped(or aborted) immediately. <br/></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.IRtcSyncAxis.ListMarkCalculationDynamics(System.Double,System.Double)">
            <summary>
            List set mark calculation dynamics
            </summary>
            <param name="angularAcc">Angular acc<br/>excelliSCAN14: 1.1314e5<br/>excelliSCAN20: 5.6e4<br/></param>
            <param name="angularJerk">Angualr jerk<br/>excelliSCAN14: 4e9<br/>excelliSCAN20: 1e9<br/></param>
            <returns>Success or failed<br/>If return failed, marker would be stopped(or aborted) immediately. <br/></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.IRtcSyncAxis.ListDashedMarkTo(System.Numerics.Vector3,System.Double[],System.Double)">
            <summary>
            List dashed mark (line)
            </summary>
            <remarks>
            Each <c>laserSwitches</c> values are must meet the following requirements. <br/>
            <list type="laserSwitches">
            <item><description>Ascending order.</description></item>
            <item><description>Length value should be &gt;= 0</description></item>
            <item><description>&lt;= Total line length of the marking pattern section.</description></item>
            <item><description>Duration of "Laser Standby" Operation &gt;= <c>LaserMinOffTime</c> + <c>LaserPreTriggerTime</c>.</description></item>
            <item><description>Time between two switchings s of similar type: 1 µs.</description></item>
            </list>
            </remarks>
            <param name="position">X, Y position (mm)</param>
            <param name="laserSwitches">Array of line length with laser switches (mm)<br/>Distance is not applied matrix transformation<br/>(</param>
            <param name="alcScaleFactor">Ramp factor if <c>ListAlcByVectorBegin</c> has enabled</param>
            <returns>Success or failed<br/>If return failed, marker would be stopped(or aborted) immediately. <br/></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.IRtcSyncAxis.ListDashedArcTo(System.Numerics.Vector3,System.Double,System.Double[],System.Double)">
            <summary>
            List dashed arc at center
            </summary>
            <remarks>
            Each <c>laserSwitches</c> values are must meet the following requirements. <br/>
            <list type="laserSwitches">
            <item><description>Ascending order.</description></item>
            <item><description>Length value should be &gt;= 0</description></item>
            <item><description>&lt;= Total arc length of the marking pattern section.</description></item>
            <item><description>Duration of "Laser Standby" Operation &gt;= <c>LaserMinOffTime</c> + <c>LaserPreTriggerTime</c>.</description></item>
            <item><description>Time between two switchings s of similar type: 1 µs.</description></item>
            </list>
            </remarks>
            <param name="center">Center X, Y (mm)</param>
            <param name="sweepAngleZ">Sweep angle (°) (+: CCW, -: CW)</param>
            <param name="laserSwitches">Array of arc length with laser switches (mm) (distance is not applied by matrix stack)</param>
            <param name="alcScaleFactor">(Unsupported!) Ramp factor if <c>ListAlcByVectorBegin</c> has enabled</param>
            <returns>Success or failed<br/>If return failed, marker would be stopped(or aborted) immediately. <br/></returns>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.SyncAxisViewerHelper">
            <summary>
            SyncAxisViewer helper 
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.SyncAxisViewerHelper.Plot(System.String)">
            <summary>
            View simulation output data by syncAXIS viewer
            </summary>
            <remarks>
            Used with <see cref="P:SpiralLab.Sirius2.Config.SyncAxisViewerProgramPath">Config.SyncAxisViewerProgramPath</see>. <br/>
            Used with <see cref="P:SpiralLab.Sirius2.Config.SyncAxisSimulateFilePath">Config.SyncAxisSimulateFilePath</see>. <br/>
            </remarks>
            <param name="filename">Simulated output filename</param>
            <returns>Success or failed</returns>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.SlscErrorCodes">
            <summary>
            Error codes for CalibrationLibrary function calls
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.SlscErrorCodes.NO_ERROR">
            <summary>
            Success
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.SlscErrorCodes.ACTIVATION_CODE_INVALID">
            <summary>
            slcl_activate was called with the wrong password
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.SlscErrorCodes.LIB_ACCESS_DENIED">
            <summary>
            slcl_activate was never successfully called, access denied. 
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.SlscErrorCodes.WRONG_FILE_EXTENSION">
            <summary>
            filename has neither .ctb nor .ct5 extension. 
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.SlscErrorCodes.COULD_NOT_OPEN_CORR_FILE">
            <summary>
            file could not be opened, possibly because it does not exist.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.SlscErrorCodes.WRONG_FILE_SIZE">
            <summary>
            file does not have the correct size.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.SlscErrorCodes.CHECKSUM_INVALID">
            <summary>
            file does not have a valid checksum.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.SlscErrorCodes.BAD_HANDLE">
            <summary>
             The provided handle is zero.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.SlscErrorCodes.WRONG_TABLETYPE">
            <summary>
            The provided handle is Ctb when Ct5 was expected or vice versa.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.SlscErrorCodes.TABLE_NOT_3D">
            <summary>
            The provided handle is a 2d correction table when 3d was expected.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.SlscErrorCodes.CALCULATION_FAILED">
            <summary>
            Calculation failed for miscellaneous reasons.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.SlscErrorCodes.MISSING_README_PARAMS">
            <summary>
            Parameters from the readme file are missing, likely because a wrong path was provided during initialization.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.SlscErrorCodes.INSUFFICIENT_MEMORY">
            <summary>
            Not enough memory for calculation.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.SlscErrorCodes.INTERPOLATION_FAILED">
            <summary>
            XY calibration interpolation failed.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.SlscErrorCodes.SPLINE_INVERSION_FAILED">
            <summary>
            XY calibration spline inversion failed.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.SlscErrorCodes.BAD_DIRECTION_VECTOR">
            <summary>
            Direction vectors are either not perpendicular, or one has no x- and y-component.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.SlscErrorCodes.RADIUS_TOO_SMALL">
            <summary>
            Radius provided for cylinder or cone calibration is not positive.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.SlscErrorCodes.FUNCTION_CALL_NOT_ALLOWED">
            <summary>
            The provided password does not authorize the use of this function.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.SlscErrorCodes.ANGLE_OUT_OF_BOUNDS">
            <summary>
            Angle provided for cone calibration is either zero or not between +/- Pi/3. 
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.SlscXyCalibrationOptions">
            <summary>
            Boolean options for XY calibration to be used in a bit field
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.SlscXyCalibrationOptions.RESTRICT_CORRECTION_FILE">
            <summary>
            If set: Resulting correction file will be restricted to a certain area given by the measured points.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.SlscXyCalibrationOptions.USE_POLYGON_RESTRICTION">
            <summary>
            If set: Restricted area will be a convex polygon around measured points, otherwise a rectangle.
            Irrelevant if RESTRICT_CORRECTION_FILE is not set
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.SlscXyCalibrationOptions.DO_AUTOMATIC_CALIBRATION_TO_RESTRICTION">
            <summary>
             If set: Calibration Factor is automatically set so that the maximum bit control value corresponds to the edge of the restricted area.
            Irrelevant if RESTRICT_CORRECTION_FILE is not set.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.SlscXyCalibrationOptions.SET_CENTER_OFFSET_TO_ZERO">
            <summary>
            If set: Values at x=0, y=0 are unchanged for all calculated tables.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.SlscXyCalibrationOptions.USE_IMPROVE_OLD_FILE_MODE">
            <summary>
            If set: New table is calculated by improving the old table, otherwise table is calculated from scratch.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.SlscXyCalibrationOptions.SET_MANUAL_CALIBRATION">
            <summary>
            If set: Calibration factor is set to value provided under NewCalibrationFactor, otherwise the previous calibration factor is used.
            Careful: This is overridden if DO_AUTOMATIC_CALIBRATION_TO_RESTRICTION and RESTRICT_CORRECTION_FILE are set to true!
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.SlscXyCalibrationOptions.USE_AUTO_TOLERANCE">
            <summary>
            If set: XY calibration will automatically determine the quality of the measurements and adjust the fit tolerance accordingly.
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.RtcCalibrationLibrary">
            <summary>
            RtcCalibrationLibrary
            <para>
            Used with SCANLAB's CalibrationLibrary (1.0.0)
            </para>
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius2.Scanner.Rtc.RtcCalibrationLibrary.OnConverted">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcCalibrationLibrary.Rows">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcCalibrationLibrary.Cols">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcCalibrationLibrary.RowInterval">
            <summary>
            Row interval (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcCalibrationLibrary.ColInterval">
            <summary>
            Col interval (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcCalibrationLibrary.KFactor">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcCalibrationLibrary.SourceCorrectionFile">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcCalibrationLibrary.TargetCorrectionFile">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcCalibrationLibrary.ResultMessage">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcCalibrationLibrary.Data">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcCalibrationLibrary.#ctor(System.Double,System.Int32,System.Int32,System.Double,System.Double,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="kFactor">Bits/mm</param>
            <param name="rows">Rows</param>
            <param name="cols">Cols</param>
            <param name="rowInterval">Row interval (mm)</param>
            <param name="colInterval">Col interval (mm)</param>
            <param name="srcCtFile">Source(input) correction file</param>
            <param name="targetCtFile">Target(output) correction file</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcCalibrationLibrary.AddAbsolute(System.Int32,System.Int32,System.Numerics.Vector2,System.Numerics.Vector2)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcCalibrationLibrary.AddRelative(System.Int32,System.Int32,System.Numerics.Vector2,System.Numerics.Vector2)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcCalibrationLibrary.Clear">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcCalibrationLibrary.Convert">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcCalibrationLibrary.NotifyResult(System.Boolean)">
            <summary>
            Notify result
            </summary>
            <param name="success">Success or fail</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcCalibrationLibrary.CalibrationFactor(System.String,System.UInt32@,SpiralLab.Sirius2.Scanner.Rtc.SlscErrorCodes@)">
            <summary>
            (Experimental) Get calibration factor (k-factor) from assigned correction file
            </summary>
            <param name="inputCtFileName">Source(Input) correction file</param>
            <param name="kFactor">K-factor (bits/mm)</param>
            <param name="returnCode">Error code if failed</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcCalibrationLibrary.PointsCloudCalibration(System.Numerics.Vector3[],System.String,System.String,System.String,SpiralLab.Sirius2.Scanner.Rtc.SlscErrorCodes@)">
            <summary>
            (Experimental) Recalculates a 3D-Correction file for a user-defined free-form target surface that is defined by a points cloud.
            </summary>
            <remarks>
            The target surface must be provided as a a series of points in 3d space. <br/>
            The function will interpolate between these points and adjust the Correction table so that the laser spot is always in focus on the given surface. <br/>
            The user later needs to only command 2d positions to the RTC and the focal shift is automatically adjusted. <br/>
            The coordinate system after the correction uses top view projection, meaning that X and Y are exactly the same as before. <br/>
            </remarks>
            <param name="pointsCloud">Array of points cloud (mm)</param>
            <param name="inputCtFileName">Source(Input) correction file</param>
            <param name="inputCtReadMeFileName">README file of source(input) correction file (ctbName_ReadMe.txt or ct5Name_ct5_ReadMe.txt)</param>
            <param name="outputCtFileName">Target(Output) correction file</param>
            <param name="returnCode">Error code if failed</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcCalibrationLibrary.CylinderCalibration(System.Numerics.Vector3,System.Numerics.Vector3,System.Double,System.String,System.String,System.String,SpiralLab.Sirius2.Scanner.Rtc.SlscErrorCodes@)">
            <summary>
            (Experimental) Recalculates a 3D-Correction file for a user-defined cylindrical target surface that can be shifted, tilted, and rotated.
            <code>
                         Y+   
                         |  
                         |       + Reference .....................
                         |     .   .                           .   .     
                         |    .     .                         .     .    
                         |    .  +  .                         .  +  .   ---> Direction
                         |    .     .                         .     .   
                         |     .   .                           .   .
                         |       .................................
                         |  
                         +----------------------------------------------  X+
                        /    
                       /   
                      /
                     / 
                   Z+
            </code>
            <remarks>
            The target surface must be provided as a reference point, a direction vector, and a radius. <br/>
            The new file should not be used for points outside the provided target surface. <br/>
            </remarks>
            </summary>
            <param name="reference">Reference point on the cylinder (x,y,z)
            <para>
            The reference point is a point on the cylinder mantle and represents the new coordinate origin of the target surface. <br/>
            In the cylinder cross-section it is the point with the largest Z-coordinate. <br/>
            </para>
            </param>
            <param name="direction">Direction of the cylinder axis
            <para>
            The given direction is the direction of the cylinder axis, which will represent the X-coordinate in the new coordinate system. <br/>
            </para>
            </param>
            <param name="radius">Radius of the cylinder (mm)
            <para>
            The new Y-coordinate is the arc length distance on the cylinder mantle from the axis parallel to the cylinder direction going through the reference point. <br/>
            </para>
            </param>
            <param name="inputCtFileName">Source(Input) correction file</param>
            <param name="inputCtReadMeFileName">README file of source(input) correction file (ctbName_ReadMe.txt or ct5Name_ct5_ReadMe.txt)</param>
            <param name="outputCtFileName">Target(Output) correction file</param>
            <param name="returnCode">Error code if failed</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcCalibrationLibrary.ConeCalibration(System.Numerics.Vector3,System.Numerics.Vector3,System.Double,System.Double,System.String,System.String,System.String,SpiralLab.Sirius2.Scanner.Rtc.SlscErrorCodes@)">
            <summary>
            (Experimental) Recalculates a 3D-Correction file for a user-defined cone target surface that can be shifted, tilted, and rotated.
            <code>
                         Y+   
                         |  
                         |       + Reference 
                         |     .   .  .       
                         |    .     .      .   
                         |    .     .          .   ---> Direction
                         |    .     .      .   
                         |     .   .  .       
                         |       .
                         |  
                         +----------------------------------------------  X+
                        /    
                       /   
                      /
                     / 
                   Z+     
            
            </code>
            <remarks>
            The target surface must be provided as a reference point, a direction vector, the radius at the reference point and the inclination angle of the cone. <br/>
            </remarks>
            </summary>
            <param name="reference">Reference point on the cone (x,y,z)
            <para>
            The reference point is a point on the lateral surface of the cone and represents the new coordinate origin of the target surface. <br/>
            In the cross-section of the cone that is perpendicular to the direction of the cone it is the point with the largest Z-coordinate. <br/>
            </para>
            </param>
            <param name="direction">Direction of the cone axis
            <para>
            The given direction is the direction of the cone axis, which will represent the X-coordinate in the new coordinate system. <br/>
            The new Y-coordinate is the angular offset from the surface line going through the reference point multiplied by the radius of the cone at the reference point. <br/>
            </para>
            </param>
            <param name="radius">Radius of the cone at the reference point (mm)
            <para>
            This means that the same y-coordinate describes a shorter distance at a more narrow part of the cone and a larger distance at a wider part of the cone.<br/>
            </para>
            </param>
            <param name="inclinationRadian">Inclination angle of the cone (radian)
            <para>
            The inclination angle is provided in radians and must positive if the cone widens for larger values of X, and negative if it becomes more narrow. <br/>
            </para>
            </param>
            <param name="inputCtFileName">Source(Input) correction file</param>
            <param name="inputCtReadMeFileName">README file of source(input) correction file (ctbName_ReadMe.txt or ct5Name_ct5_ReadMe.txt)</param>
            <param name="outputCtFileName">Target(Output) correction file</param>
            <param name="returnCode">Error code if failed</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcCalibrationLibrary.PlaneCalibration(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3,System.String,System.String,System.String,SpiralLab.Sirius2.Scanner.Rtc.SlscErrorCodes@)">
            <summary>
            (Experimental) Recalculates a 3D-Correction table for a new user-defined target plane that may be shifted, tilted, and rotated.
            <code>
                         |  
                         |
                         |                   Dir Y
                         |                     .
                         |                    /|\
                         |                     |
                         |         /-----------|--------------/
                         |        /            |             /  
                         |       /             + Reference  /  ---> Dir X
                         +------/........................../------  
                        /      /__________________________/
                       /      
                      /
                     / 
            </code>
            </summary>
            <remarks>
            The new target plane must be provided in parameter form with a reference point and two direction vectors. <br/>
            Depending on how much shifted and tilted the new target plane is compared to the original target plane, the Correction file may not be useful anymore for 3d-points that are not in the target plane. <br/>
            This cannot be remedied through further 3d-correction. <br/>
            </remarks>
            <param name="reference">Reference point on the plane (x,y,z)
            <para>
            The reference point represents the new origin of the target plane, while the direction vectors represent the new X- and Y- directions in the target plane. <br/>
            </para>
            </param>
            <param name="directionX">X direction of the target plane
            <para>
            The direction vectors must be perpendicular. 
            </para>
            </param>
            <param name="directionY">Y direction of the target plane
            <para>
            The direction vectors must be perpendicular. 
            </para>
            </param>
            <param name="inputCtFileName">Source(Input) correction file</param>
            <param name="inputCtReadMeFileName">README file of source(input) correction file (ctbName_ReadMe.txt or ct5Name_ct5_ReadMe.txt)</param>
            <param name="outputCtFileName">Target(Output) correction file</param>
            <param name="returnCode">Error code if failed</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcCalibrationLibrary.FocusCalibration(System.Collections.Generic.KeyValuePair{System.Numerics.Vector2,System.Double}[],System.String,System.String,System.Double,System.String,SpiralLab.Sirius2.Scanner.Rtc.SlscErrorCodes@)">
            <summary>
            (Experimental) Re-adjusts the 3d calibration based on measurements in the Z=0 plane.
            <code>
            The suggested RTC command procedure to find the values in the array above looks like this 
             
            load 3d correction file
            IRtc.CtlLoadCorrectionFile(CorrectionTableIndex.Table1, OriginalFilename);
            
            For all grid points X = XTargetedPositions[i], Y = XTargetedPositions[i]
            
                changes A value in the ABC correction and therefore the focus position offset
                IRtc3D.CtlZTable(MeasuredOptimalZBits[i], 0, 0);       
                applies the new A value
                IRtc.CtlSelectCorrection(CorrectionTableIndex.Table1);  
                moves spot to the targeted X and Y position at Z = 0(!) with modified Z offset
                IRtc3D.CtlMove(new Vector3(x, y, 0));                   
                
            Repeat the above while varying MeasuredOptimalZBits[i] until focal position is OK
            </code>
            </summary>
            <param name="xyAndMeasuredOptZ">Target x, y and optimized z distance (mm)</param>
            <param name="inputCtFileName">Source(Input) correction file</param>
            <param name="inputCtReadMeFileName">README file of source(input) correction file (ctbName_ReadMe.txt or ct5Name_ct5_ReadMe.txt)</param>
            <param name="kFactor">K-Factor (bits/mm)</param>
            <param name="outputCtFileName">Target(Output) correction file</param>
            <param name="returnCode">Error code if failed</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcCalibrationLibrary.CoefABCCalibration(System.Collections.Generic.KeyValuePair{System.Double,System.Double}[],System.String,System.String,System.Double,System.String,SpiralLab.Sirius2.Scanner.Rtc.SlscErrorCodes@)">
            <summary>
            (Experimental) Calculates the ABC coefficients for the selected table for a given set of measurements for the focal length and the Z-control bit.
            </summary>
            <remarks>
            Zout = A + Bl + Cl²
            </remarks>
            <param name="measuredFocalLengthAndZOut">Measured focal length and Z out (mm)</param>
            <param name="inputCtFileName">Source(Input) correction file</param>
            <param name="inputCtReadMeFileName">README file of source(input) correction file (ctbName_ReadMe.txt or ct5Name_ct5_ReadMe.txt)</param>
            <param name="kFactor">K-Factor (bits/mm)</param>
            <param name="outputCtFileName">Target(Output) correction file</param>
            <param name="returnCode">Error code if failed</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcCalibrationLibrary.BeamTiltCalibration(System.String,System.String,System.String,System.Double,System.Double,SpiralLab.Sirius2.Scanner.Rtc.SlscErrorCodes@)">
            <summary>
            (Experimental) Recalculates the Correction table using offset values measured for galvanometer scanner angles of 0
            </summary>
            <param name="inputCtFileName">Source(Input) correction file</param>
            <param name="inputCtReadMeFileName">README file of source(input) correction file (ctbName_ReadMe.txt or ct5Name_ct5_ReadMe.txt)</param>
            <param name="outputCtFileName">Target(Output) correction file</param>
            <param name="dx">Offset dx (mm)</param>
            <param name="dy">Offset dy (mm)</param>
            <param name="returnCode">Error code if failed</param>
            <returns>Success or failed</returns>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.RtcCorrection2D">
            <summary>
            RtcCorrection2D
            <para>
            Configure related program path at first: <c>Config.CorreXionProProgramPath</c>
            </para>
            </summary>
            <remarks>
            <img src="images/2mirrors.png"/><br/>
            The deflection of a laser beam with a two-mirror system results in three effects<br/>
            (1) The arrangement of the mirrors leads to a certain distortion of the Image field (1)<br/>
            (2) The distance in the Image field is not proportional to the scan angle itself, but to the tangent of the scan angle. Therefore, the mark speed of the laser focus in the Image field is not proportional to the angular velocity of the corresponding galvanometer scanner.<br/>
            (3) If an ordinary lens is used for focusing the laser beam, the focus lies on a sphere. In a flat Image field plane, a varying spot size results.<br/>
            <br/>
            <img src="images/distortion.png"/><br/>
            By focusing the deflected laser beam with an F-Theta objective, effect 2 and effect 3 can be avoided. <br/>
            However, this causes a barrel-shaped distortion of the Image field, see Figure 57. <br/>
            </remarks>
        </member>
        <member name="E:SpiralLab.Sirius2.Scanner.Rtc.RtcCorrection2D.OnConverted">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcCorrection2D.Rows">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcCorrection2D.Cols">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcCorrection2D.RowInterval">
            <summary>
            Row interval (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcCorrection2D.ColInterval">
            <summary>
            Col interval (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcCorrection2D.KFactor">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcCorrection2D.SourceCorrectionFile">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcCorrection2D.TargetCorrectionFile">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcCorrection2D.IsDeleteDatFile">
            <summary>
            Delete temporary created .dat file or not
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcCorrection2D.ResultMessage">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcCorrection2D.Data">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcCorrection2D.#ctor(System.Double,System.Int32,System.Int32,System.Double,System.Double,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="kFactor">Bits/mm</param>
            <param name="rows">Rows</param>
            <param name="cols">Cols</param>
            <param name="rowInterval">Row interval (mm)</param>
            <param name="colInterval">Col interval (mm)</param>
            <param name="srcCtFile">Source(input) correction file</param>
            <param name="targetCtFile">Target(output) correction file</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcCorrection2D.AddAbsolute(System.Int32,System.Int32,System.Numerics.Vector2,System.Numerics.Vector2)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcCorrection2D.AddRelative(System.Int32,System.Int32,System.Numerics.Vector2,System.Numerics.Vector2)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcCorrection2D.Clear">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcCorrection2D.ConvertFromDatFile(System.String)">
            <summary>
            Convert correction file by dat file
            </summary>
            <param name="datFileFullPath">Dat File</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcCorrection2D.Convert">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcCorrection2D.NotifyResult(System.Boolean)">
            <summary>
            Notify result
            </summary>
            <param name="success">Success or fail</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcCorrection2D.BeamTiltCalibration(System.Double,System.Double,System.String,System.String,System.String,SpiralLab.Sirius2.Scanner.Rtc.SlscErrorCodes@)">
            <summary>
            Recalculates the Correction table using offset values measured for galvanometer scanner angles of 0
            </summary>
            <param name="dx">Tilt dx (mm)</param>
            <param name="dy">Tilt dy (mm)</param>
            <param name="inputCtFileName">Source(Input) correction file</param>
            <param name="inputCtReadMeFileName">README file of source(input) correction file (ctbName_ReadMe.txt or ct5Name_ct5_ReadMe.txt)</param>
            <param name="outputCtFileName">Target(Output) correction file</param>
            <param name="returnCode">Error code if failed</param>
            <returns>Success or failed</returns>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.RtcCorrection3D">
            <summary>
            RtcCorrection3D
            <para>
            Configure related program path at first: 
            <c>Config.StretchCorreXion5ProgramPath</c> and <c>Config.CorrectionFileCoverterProgramPath</c>
            </para>
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius2.Scanner.Rtc.RtcCorrection3D.OnConverted">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcCorrection3D.Rows">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcCorrection3D.Cols">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcCorrection3D.SourceCorrectionFile">
            <inheritdoc/>  
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.RtcCorrection3D.sourceCorrectionFile">
            <summary>
            Source correction file
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcCorrection3D.TargetCorrectionFile">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcCorrection3D.Interval">
            <summary>
            Interval (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcCorrection3D.KFactor">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcCorrection3D.ZLower">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcCorrection3D.ZUpper">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcCorrection3D.DataLower">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcCorrection3D.DataUpper">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcCorrection3D.IsDeleteDatFile">
            <summary>
            Delete temporary created .dat file or not
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcCorrection3D.ResultMessage">
            <inheritdoc/>  
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.RtcCorrection3D.kFactor">
            <summary>
            KFactor (bits/mm)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.RtcCorrection3D.interval">
            <summary>
            Interval (mm)
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.RtcCorrection3D.ExitCode">
            <summary>
            exit code 
            ref : stretch correction.pdf by SCANLAB
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcCorrection3D.#ctor(System.Double,System.Int32,System.Int32,System.Double,System.Double,System.Double,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="kFactor">Bits/mm</param>
            <param name="rows">Rows</param>
            <param name="cols">Cols</param>
            <param name="interval">Interval (mm)</param>
            <param name="zUpper">Z upper (mm)</param>
            <param name="zLower">Z lower (mm)</param>
            <param name="srcCtFile">Source(input) correction file</param>
            <param name="targetCtFile">Target(output) correction file</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcCorrection3D.AddAbsolute(System.Int32,System.Int32,System.Numerics.Vector3,System.Numerics.Vector3)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcCorrection3D.AddRelative(System.Int32,System.Int32,System.Numerics.Vector3,System.Numerics.Vector3)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcCorrection3D.Clear(SpiralLab.Sirius2.Scanner.Rtc.Planes)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcCorrection3D.Convert">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcCorrection3D.ConvertFromDatFile(System.String)">
            <summary>
            Convert correction file by dat file
            </summary>
            <param name="datFileFullPath">DAT file</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcCorrection3D.InternalConvert">
            <summary>
            Convert from ct5 format
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcCorrection3D.NotifyResult(System.Boolean)">
            <summary>
            Notify result
            </summary>
            <param name="success">Success or fail</param>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.RtcMeasurementHelper">
            <summary>
            Measurement helper
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcMeasurementHelper.Save(System.String,SpiralLab.Sirius2.Scanner.Rtc.IRtcMeasurement,System.Boolean)">
            <summary>
            Save measurement result into file
            </summary>
            <param name="fileName">Filename</param>
            <param name="rtcMeasurement"><c>IRtcMeasurement</c></param>
            <param name="isRawData">Raw data (or human readable data)</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcMeasurementHelper.Plot(System.String,System.String)">
            <summary>
            Plot measurement data by gnuplot program.
            Download <see href="http://tmacchant33.starfree.jp/gnuplot_bin.html">gnuplot</see>
            </summary>
            <remarks>
            Executed program path: <see cref="P:SpiralLab.Sirius2.Config.MeasurementGNUPlotProgramPath">Config.MeasurementGNUPlotProgramPath</see>. <br/>
            Copy gnuplot program into plot directory. (For example: \plot\gnuplot\gnuplot.exe) <br/>
            </remarks>
            <param name="fileName">Measurement filename</param>
            <param name="title">Title</param>
            <returns>Success or failed</returns>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.RtcStreamParserHelper">
            <summary>
            (Experimental!) RtcStreamParserHelper
            </summary>
            <remarks>
            Experimental version. <br/>
            Used with SCANLAB StreamParser v1.1 <br/>
            Used with <see cref="T:SpiralLab.Sirius2.Scanner.Rtc.Rtc6Ethernet">Rtc6Ethernet</see> only. <br/>
            </remarks>
        </member>
        <member name="E:SpiralLab.Sirius2.Scanner.Rtc.RtcStreamParserHelper.OnConnected">
            <summary>
            Event for client has connected
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius2.Scanner.Rtc.RtcStreamParserHelper.OnReceived">
            <summary>
            Event for when channel data has receive(or arrived)
            <code>
            
            </code>
            </summary>
            <remarks>
            With package buffer data
            </remarks>
        </member>
        <member name="E:SpiralLab.Sirius2.Scanner.Rtc.RtcStreamParserHelper.OnDisconnected">
            <summary>
            Event for client has disconnected
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius2.Scanner.Rtc.RtcStreamParserHelper.OnSaveChannels">
            <summary>
            Event for when saving channels data at each rows
            </summary>
            <remarks>
            Event will be fired when <c>StopAndSave</c> has called. <br/>
            Event will be fired with channels data at each rows. <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcStreamParserHelper.Index">
            <summary>
            Index
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcStreamParserHelper.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcStreamParserHelper.IsConnected">
            <summary>
            Connected (or not)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcStreamParserHelper.Rtc">
            <summary>
            Target <c>Rtc6Ethernet</c>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcStreamParserHelper.IPAddress">
            <summary>
            Target IP address
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcStreamParserHelper.Tag">
            <summary>
            User data
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcStreamParserHelper.#ctor(System.Int32,System.String,SpiralLab.Sirius2.Scanner.Rtc.Rtc6Ethernet)">
            <summary>
            Constructor
            </summary>
            <param name="index">Index (0,1,2,...)</param>
            <param name="name">Name</param>
            <param name="rtc6e"><c>Rtc6Ethernet</c></param>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcStreamParserHelper.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="index">Index (0,1,2,...)</param>
            <param name="name">Name</param>
            <param name="ipAddress">IP address</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcStreamParserHelper.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcStreamParserHelper.Dispose">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcStreamParserHelper.Dispose(System.Boolean)">
            <summary>
            Dispose internal resources
            </summary>
            <param name="disposing">Explicit dispose or not</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcStreamParserHelper.Connect">
            <summary>
            Start(or connect) stream 
            </summary>
            <remarks>
            Used with <c>Rtc6Ethernet.CtlWaveFormStreaming</c> by internally. <br/>
            </remarks>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcStreamParserHelper.Save(System.String,System.Boolean)">
            <summary>
            Save stream
            </summary>
            <remarks>
            Trying to save channels data into target output file. <br/>
            Also, <see cref="E:SpiralLab.Sirius2.Scanner.Rtc.RtcStreamParserHelper.OnSaveChannels">OnSaveChannels</see> event handler will be fired. <br/>
            Finally, internal channel data are removed at all. <br/>
            If assigned <see cref="T:SpiralLab.Sirius2.Scanner.Rtc.Rtc6Ethernet">Rtc6Ethernet</see>, then saved format is matched with <see cref="M:SpiralLab.Sirius2.Scanner.Rtc.RtcMeasurementHelper.Save(System.String,SpiralLab.Sirius2.Scanner.Rtc.IRtcMeasurement,System.Boolean)">RtcMeasurementHelper.Save</see> (Human readable data) <br/>
            If not assigned <see cref="T:SpiralLab.Sirius2.Scanner.Rtc.Rtc6Ethernet">Rtc6Ethernet</see>, then saved format is raw data. <br/>
            </remarks>
            <param name="fileName">Filename (Saved into <see cref="P:SpiralLab.Sirius2.Config.MeasurementPath">Config.MeasurementPath</see> <br/>Like as 'streamparser.txt'<br/></param>
            <param name="isAppend"><c>True</c> to append data to the file.<br/><c>False</c> to overwrite the file.<br/></param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcStreamParserHelper.Disconnect">
            <summary>
            Stop(or disconnect) stream
            </summary>
            <remarks>
            Used with <see cref="M:SpiralLab.Sirius2.Scanner.Rtc.Rtc6Ethernet.CtlStreamParserWaveFormStreaming(System.Boolean)">Rtc6Ethernet.CtlStreamParserWaveFormStreaming</see> by internally. <br/>
            </remarks>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcStreamParserHelper.NotifyConnected">
            <summary>
            Notify client has connected
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcStreamParserHelper.NotifyDisconnected">
            <summary>
            Notify client has disconnected
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcStreamParserHelper.NotifyReceived(System.Collections.Generic.List{System.IntPtr})">
            <summary>
            Notify channels data has received
            </summary>
            <param name="streamBuffer">Stream buffer</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcStreamParserHelper.NotifySaveChannels(System.Int32[])">
            <summary>
            Notify channels data has saved
            </summary>
            <param name="channelData">Measured channel raw data</param>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual">
            <summary>
            RtcVirtual
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.PropertyChanged">
            <inheritdoc/>
        </member>
        <member name="E:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.OnJob">
            <inheritdoc/>
        </member>
        <member name="E:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.OnCorrectionTable">
            <inheritdoc/>
        </member>
        <member name="E:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.OnEncoderChanged">
            <inheritdoc/>  
        </member>
        <member name="E:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.OnJumpTo">
            <summary>
            Event handler for jump to x,y,z position with transformation
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.OnMarkTo">
            <summary>
            Event handler for mark to x,y,z position with transformation
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.NotifyPropertyChanged(System.String)">
            <summary>
            Nofity property value has changed
            </summary>
            <param name="propertyName">Property name</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.NotifyJob(SpiralLab.Sirius2.Scanner.IJob)">
            <summary>
            Notify job status has changed(or job has created)
            </summary>
            <param name="job"><c>IJob</c></param>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.NotifyCorrectionTable(SpiralLab.Sirius2.Scanner.Rtc.CorrectionTables,System.String)">
            <summary>
            Notify correction file has loaded into specific table
            </summary>
            <param name="table"><c>CorrectionTables</c></param>
            <param name="fileName">Correction filename</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.NotifyEncoderChanged(System.Int32,System.Int32)">
            <summary>
            Nofity encoder value has changed
            </summary>
            <param name="encX">Encoder x</param>
            <param name="encY">Encoder y</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.NotifyJumpTo(System.Numerics.Vector3)">
            <summary>
            Notification jump to x,y,z position with transformation
            </summary>
            <param name="v">Jump x,y,z position</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.NotifyMarkTo(System.Numerics.Vector3)">
            <summary>
            Notification mark to x,y,z position with transformation
            </summary>
            <param name="v">Mark x,y,z position</param>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.Count">
            <summary>
            Count of instance(s)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.Index">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.Name">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.RtcType">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.MatrixStack">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.KFactor">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.EffectiveFieldSize">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.FieldSizeLimit">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.LaserMode">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.IsReady">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.IsBusy">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.IsError">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.InitLaser12SignalLevel">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.InitLaserOnSignalLevel">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.LaserControlSignal">
            <summary>
            ILaserControlSignal
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.ExternalControlMode">
            <summary>
            IRtcExternalControlMode
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.ExternalControlMaxCounts">
            <summary>
            RtcExternalControlMaxCounts
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.MarkingInfo">
            <summary>
            IRtcMarkingInfo
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.StartStopInfo">
            <summary>
            IRtcStartStopInfo
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.JumpMode">
            <summary>
            Jump Mode
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.Job">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.JobQueue">
            <summary>
            Job queue for <c>JobRtc</c>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.JobHistory">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.Frequency">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.PulseWidth">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.DelayOn">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.DelayOff">
            <inheritdoc/> 
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.DelayJump">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.DelayMark">
            <inheritdoc/> 
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.DelayPolygon">
            <inheritdoc/> 
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.SpeedJump">
            <inheritdoc/> 
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.SpeedMark">
            <inheritdoc/> 
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.Fpk">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.QSwitchDelay">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.ListType">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.IsMoF">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.Is2ndHead">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.Is3D">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.IsScanAhead">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.IsUFPM">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.IsSyncAxis">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.CorrectionFiles">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.PrimaryHeadTable">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.SecondaryHeadTable">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.DistanceToSecondaryHead">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.PrimaryHeadBaseOffset">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.PrimaryHeadUserOffset">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.SecondaryHeadBaseOffset">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.SecondaryHeadUserOffset">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.IsDirectMode3D">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.ZOffset">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.ZDefocus">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.CoefA">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.CoefB">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.CoefC">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.KZFactor">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.KZScale">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.AlcSignal">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.Alc100PercentageValue">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.AlcMinValue">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.AlcMaxValue">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.MeasurementChannels">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.SamplingFrequency">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.MoFType">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.EncXCountsPerMm">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.EncYCountsPerMm">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.EncXSimulatedSpeed">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.EncYSimulatedSpeed">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.EncCountsPerRevolution">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.EncSimulatedAngularSpeed">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.MofAngularCenter">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.IsDateTimeOffset">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.DateTimeOffsetDays">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.DateTimeOffsetHours">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.DateTimeOffsetMinutes">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.DateTimeOffsetSeconds">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.DateTimeOrigin">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.SerialStartNo">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.SerialIncrementStep">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.SerialCurrentNo">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.SerialMaxNo">
            <inheritdoc/>  
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.cardId">
            <summary>
            RTC card's identifier no (for multiple cards)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.vPhysical">
            <summary>
            Physical (or Calculated) x,y,z position
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.#ctor(System.Int32,System.Double,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="index">RTC Controller identifier (0,1,2,...)</param>
            <param name="kFactor">K-Factor (bits/mm)</param>
            <param name="ctFileName">Field correction file at Table1</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.Dispose">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.Dispose(System.Boolean)">
            <summary>
            Dispose internal resources
            </summary>
            <param name="disposing">Explicit dispose or not</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.ToString">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.Initialize">
            <inheritdoc/>     
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.CtlLoadCorrectionFile(SpiralLab.Sirius2.Scanner.Rtc.CorrectionTables,System.String)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.CtlSelectCorrection(SpiralLab.Sirius2.Scanner.Rtc.CorrectionTables,SpiralLab.Sirius2.Scanner.Rtc.CorrectionTables)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.CtlLaserMode(SpiralLab.Sirius2.Scanner.Rtc.LaserModes)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.CtlLaserOn">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.CtlLaserOff">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.CtlLaserSignal(System.Boolean)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.CtlMoveTo(System.Numerics.Vector2,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.CtlFrequency(System.Double,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.CtlDelay(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.CtlDelayVariablePolygonTable(System.Collections.Generic.KeyValuePair{System.Double,System.Double}[])">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.CtlDelayVariableJumpTable(System.Collections.Generic.KeyValuePair{System.Double,System.Double}[])">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.CtlDelayVariable(System.Boolean,System.Boolean,System.Double,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.CtlSpeed(System.Double,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.CtlWriteData``1(SpiralLab.Sirius2.Scanner.Rtc.ExtensionChannels,``0)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.CtlWriteExtDO16(System.UInt16,System.Boolean)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.CtlReadData``1(SpiralLab.Sirius2.Scanner.Rtc.ExtensionChannels,``0@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.CtlGetStatus(SpiralLab.Sirius2.Scanner.Rtc.RtcStatus)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.CtlBusyWait">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.CtlAbort">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.CtlReset">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.ListBegin(SpiralLab.Sirius2.Scanner.Rtc.ListTypes)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.ListSelectCorrection(SpiralLab.Sirius2.Scanner.Rtc.CorrectionTables,SpiralLab.Sirius2.Scanner.Rtc.CorrectionTables)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.ListFrequency(System.Double,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.ListDelay(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.ListDelayVariable(System.Boolean,System.Double,System.Boolean,System.Double,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.ListSpeed(System.Double,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.ListWait(System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.ListLaserOn(System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.ListLaserOn">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.ListLaserOff">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.ListJumpTo(System.Numerics.Vector2,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.ListMarkTo(System.Numerics.Vector2,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.ListArcTo(System.Numerics.Vector2,System.Double,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.ListMarksTo(System.Numerics.Vector2[],System.Double[])">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.ListWriteData``1(SpiralLab.Sirius2.Scanner.Rtc.ExtensionChannels,``0)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.ListWriteExtDO16(System.UInt16,System.Boolean)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.ListEnd">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.ListExecute(System.Boolean)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.IsDuplicated(System.Numerics.Vector2)">
            <summary>
            Check for duplicated position x,y to merge
            </summary>
            <param name="position">position</param>
            <returns>Is duplicated or not</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.IsListReady(System.UInt32)">
            <summary>
            Check list buffer availability for flow control
            </summary>
            <param name="count">counts of list commands</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.CtlHomePosition(System.Numerics.Vector2)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.CtlStandBy(System.Double,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.CtlFirstPulseKiller(System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.CtlQSwitchDelay(System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.CtlLaserControlSignal(SpiralLab.Sirius2.Scanner.Rtc.ILaserControlSignal)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.CtlExternalControl(SpiralLab.Sirius2.Scanner.Rtc.IRtcExternalControlMode,System.UInt32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.CtlSimulatedExternalStart">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.CtlExternalStartCounts(System.UInt32@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.CtlJumpMode(SpiralLab.Sirius2.Scanner.Rtc.RtcJumpMode)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.CtlLoadedCorrectionInfo(SpiralLab.Sirius2.Scanner.Rtc.CorrectionTables,SpiralLab.Sirius2.Scanner.Rtc.CorrectionFileHeaderParams,System.Double@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.CtlCorrectionReadABC(System.String,System.Double@,System.Double@,System.Double@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.CtlCorrectionWriteABC(System.String,System.Double,System.Double,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.CtlMarkingInfo(SpiralLab.Sirius2.Scanner.Rtc.IRtcMarkingInfo@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.CtlStartStopInfo(SpiralLab.Sirius2.Scanner.Rtc.IRtcStartStopInfo@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.CtlTrackingError(SpiralLab.Sirius2.Scanner.Rtc.ScannerHeads,System.Double,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.CtlPulseSynchronization(System.Boolean,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.CtlListPause">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.CtlListContinue">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.ListFirstPulseKiller(System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.ListQSwitchDelay(System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.ListSkyWritingBegin(SpiralLab.Sirius2.Scanner.Rtc.SkyWritingMode,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.ListSkyWritingEnd">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.ListRasterLine(SpiralLab.Sirius2.Scanner.Rtc.RasterModes,System.Double,System.Numerics.Vector2,System.UInt32,SpiralLab.Sirius2.Scanner.Rtc.ExtensionChannels)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.ListRasterPixel(System.Double,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.ListWobbelDefine(System.Collections.Generic.KeyValuePair{System.Numerics.Vector2,System.UInt32}[],System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.ListWobbelBegin(System.Double,System.Double,System.Double,SpiralLab.Sirius2.Scanner.Rtc.WobbelShapes)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.ListWobbelEnd">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.ListWriteExtDO16If(System.UInt32,System.UInt32,System.UInt32,System.Boolean)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.ListReadExtDI16WaitUntil(System.UInt32,System.UInt32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.ListJumpMode(SpiralLab.Sirius2.Scanner.Rtc.JumpModeFlags)">
            <inheritdoc/> 
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.ListJumpHard(System.Numerics.Vector2,System.Double,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.ListJumpHard(System.Numerics.Vector3,System.Double,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.ListJumpAndDrill(System.Numerics.Vector2,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.CtlGetMeasurement(SpiralLab.Sirius2.Scanner.Rtc.MeasurementChannels,System.Int32[]@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.CtlConvertMeasurement(SpiralLab.Sirius2.Scanner.Rtc.MeasurementChannels,System.Int32,System.Double@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.ListMeasurementBegin(System.Double,SpiralLab.Sirius2.Scanner.Rtc.MeasurementChannels[])">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.ListMeasurementEnd">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.CtlAlcByPositionTable(System.Collections.Generic.KeyValuePair{System.Double,System.Double}[])">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.CtlAlc``1(SpiralLab.Sirius2.Scanner.Rtc.AutoLaserControlSignals,SpiralLab.Sirius2.Scanner.Rtc.AutoLaserControlModes,``0,``0,``0)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.ListAutoLaserControl``1(``0,``0,``0)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.ListAlcByVectorBegin``1(SpiralLab.Sirius2.Scanner.Rtc.AutoLaserControlSignals,``0)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.ListAlcByVectorEnd">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.CtlHeadOffset(SpiralLab.Sirius2.Scanner.Rtc.ScannerHeads,SpiralLab.Sirius2.Mathematics.Offset)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.ListHeadOffset(SpiralLab.Sirius2.Scanner.Rtc.ScannerHeads,SpiralLab.Sirius2.Mathematics.Offset)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.CtlMoveTo(System.Numerics.Vector3,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.CtlZDefocus(System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.CtlLoadZTable(System.Double,System.Double,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.CtlZDistance(System.Numerics.Vector3,System.Double@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.ListZDefocus(System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.ListJumpTo(System.Numerics.Vector3,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.ListMarkTo(System.Numerics.Vector3,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.ListArcTo(System.Numerics.Vector3,System.Double,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.ListMarksTo(System.Numerics.Vector3[],System.Double[])">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.ListRasterLine(SpiralLab.Sirius2.Scanner.Rtc.RasterModes,System.Double,System.Numerics.Vector3,System.UInt32,SpiralLab.Sirius2.Scanner.Rtc.ExtensionChannels)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.IsDuplicated(System.Numerics.Vector3)">
            <summary>
            Check for duplicated position x,y.z to merge
            </summary>
            <param name="position">x,y,z position</param>
            <returns>Is duplicated or not</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.IsInFov(System.Numerics.Vector2)">
            <summary>
            Check for position x,y in fov range  
            </summary>
            <param name="position">x,y position</param>
            <returns>Is in fov range or not</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.IsInFov(System.Numerics.Vector3)">
            <summary>
            Check for position x,y,z in fov range  
            </summary>
            <param name="position">x,y,z position</param>
            <returns>Is in fov range or not</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.AdjustBits(System.Int32@,System.Int32@)">
            <summary>
            Adjust x,y position bits within range
            </summary>
            <param name="xBits"></param>
            <param name="yBits"></param>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.AdjustBits(System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Adjust x,y,z position bits within range
            </summary>
            <param name="xBits"></param>
            <param name="yBits"></param>
            <param name="zBits"></param>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.CtlMofEncoderReset(System.Double,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.CtlMofGetEncoder(System.Int32@,System.Int32@,System.Double@,System.Double@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.CtlMofEncoderSpeed(System.Double,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.CtlMofTrackingError(System.Double,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.CtlMofCompensateTable(System.Collections.Generic.KeyValuePair{System.Numerics.Vector2,System.Numerics.Vector2}[])">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.CtlMofExternalControlDelay(SpiralLab.Sirius2.Scanner.Rtc.RtcEncoders,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.CtlMofGetAngularEncoder(System.Int32@,System.Double@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.CtlMofAngularCenter(System.Numerics.Vector2)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.CtlMofEncoderAngularSpeed(System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.CtlMofOverflowClear">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.ListMofBegin(System.Boolean)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.ListMofAngularBegin(System.Numerics.Vector2,System.Boolean)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.ListMofOverflowClear">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.ListMofLimitIf(SpiralLab.Sirius2.Scanner.Rtc.RtcEncoders,SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderRangeConditions)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.ListMofExternalControlDelay(SpiralLab.Sirius2.Scanner.Rtc.RtcEncoders,System.Double)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.ListMofWait(SpiralLab.Sirius2.Scanner.Rtc.RtcEncoders,System.Double,SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderWaitConditions)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.ListMofAngularWait(System.Double,SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderWaitConditions)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.ListMofWaitRange(System.Numerics.Vector2,System.Numerics.Vector2)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.ListMofLimits(System.Numerics.Vector2,System.Numerics.Vector2)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.ListMofEnd(System.Numerics.Vector2)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.ListMofEnd(System.Numerics.Vector3)">
            <summary>
            <para>List x,y (or rotate) MoF end</para>
            </summary>
            <param name="vJumpPosition">Jump x,y,z position (mm)</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.ListRepeatCall(System.UInt32,System.UInt32)">
            <inheritdoc/>  
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.MaxCharacterSetCount">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.CtlCharacterSetBegin(SpiralLab.Sirius2.Scanner.Rtc.CharacterSets)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.CtlCharacterBegin(System.UInt32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.CtlCharacterEnd">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.CtlCharacterSetEnd">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.CtlCharacterSetIsExist(System.UInt32,SpiralLab.Sirius2.Scanner.Rtc.CharacterSets)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.CtlCharacterSetClear(SpiralLab.Sirius2.Scanner.Rtc.CharacterSets)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.CtlSerialNoReset(System.UInt32,System.UInt32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.ListText(System.String,SpiralLab.Sirius2.Scanner.Rtc.CharacterSets)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.ListDate(SpiralLab.Sirius2.Scanner.Rtc.DateFormats,System.Boolean,SpiralLab.Sirius2.Scanner.Rtc.CharacterSets)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.ListTime(SpiralLab.Sirius2.Scanner.Rtc.TimeFormats,System.Boolean,SpiralLab.Sirius2.Scanner.Rtc.CharacterSets)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.ListSerialNo(System.UInt32,SpiralLab.Sirius2.Scanner.Rtc.SerialNoFormats,SpiralLab.Sirius2.Scanner.Rtc.CharacterSets)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.CtlSerialConfig(System.UInt32)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.CtlSerialWrite(System.Byte[])">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.CtlSerialWrite(System.String)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.CtlSerialRead(System.Byte[]@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.CtlSerialRead(System.String@)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.ListSerialWrite(System.Byte[])">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcVirtual.ListSerialWrite(System.String)">
            <inheritdoc/>  
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.RtcSignalLevels">
            <summary>
            RTC output signal (LASER 1,2 and LASER ON) levels
            <para>Above RTC5</para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.RtcSignalLevels.ActiveHigh">
            <summary>
            Active High
            <code>
                          .-----------------------.  
            LASER  1:     |                       | 
            LASER  2:     |                       | 
            LASER ON:   __|.......................|__
            </code>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.RtcSignalLevels.ActiveLow">
            <summary>
            Active Low
            <code>
                        __.........................__
            LASER  1:     |                       | 
            LASER  2:     |                       | 
            LASER ON:     |_______________________|  
            </code>
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.ListTypes">
            <summary>
            RTC List Types
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.ListTypes.Single">
            <summary>
            Single list buffered.
            <para>RTC4: max 8000 buffer size</para>
            <para>RTC5: max 2^20 buffer size</para>
            <para>RTC6: max 2^23 buffer size</para>
            </summary>
            <remarks>
            List commands are executed when <see cref="M:SpiralLab.Sirius2.Scanner.Rtc.IRtc.ListExecute(System.Boolean)">ListExecute</see> has called. <br/>
            Use buffer as giant single memory. so there is a limitation of data counts. <br/>
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.ListTypes.Auto">
            <summary>
            Double list buffered. 
            <para>Buffers are executed automatically and exchanged if full enough</para>
            </summary>
            <remarks>
            List commands are executed when buffer if full enough. <br/>
            Use 2 buffers for swap each other. so there is no limitation of data counts. <br/>
            </remarks>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.LaserModes">
            <summary>
            RTC Laser Modes
            <para>Timing of LASER1, LASER2, LASERON pin-out signals</para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.LaserModes.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.LaserModes.Co2">
            <summary>
            CO2
            <para>LASERON: On</para>
            <para>LASER1: Q switch frequency and pulse width (with pulse completion)</para>
            <para>LASER2: Standby frequency and pulse width with phase shift</para>
            <code>
            
                                    | ON DELAY |                 | OFF DELAY |
                                               ._____________________________.
                                               |                             | 
                                               |                             | 
            LASER ON:  ________________________|                             |________...
            
                                               | PW |  
                         |&lt;-STANDBY-&gt;|         |&lt;- 1/ FREQ -&gt;|                  |&lt;-STANDBY-&gt;|
                         .__.        .__.      .____.        .____.        ._.  .__.
                         |  |        |  |      |    |        |    |        | |  |  |
                         |  |        |  |      |    |        |    |        | |  |  |
            LASER  1:  __|  |___.____|  |______|    |___.____|    |________| |__|  |___...
                         .      .                       .
                         .      .                       | PW |  
                         .      |&lt;-STANDBY-&gt;|           |&lt;- 1/ FREQ -&gt;|                  |&lt;-STANDBY-&gt;|
                         .      .__.        .__.        .____.        .____.             .__.
                         .      |  |        |  |        |    |        |    |             |  |
                         .      |  |        |  |        |    |        |    |             |  |
            LASER  2:  __.______|  |________|  |________|    |________|    |_____________|  |___...
                         .      .
                         |PHASE |
                         | SHIFT|
            </code>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.LaserModes.Yag1">
            <summary>
            YAG1
            <para>LASERON: On</para>
            <para>LASER1: Q switch frequency and pulse width + standby frequency (LASERON is not overlapped)</para>
            <para>LASER2: FPK (Q switch is overlapped)</para>
            <code>
            
                                    | ON DELAY |                 | OFF DELAY |
                                               ._____________________________.
                                               |                             | 
                                               |                             | 
            LASER ON:  ________________________|                             |________...
            
                                               | PW |  
                         |&lt;-STANDBY-&gt;|         |&lt;- 1/ FREQ -&gt;|                  |&lt;-STANDBY-&gt;|
                         .__.        .__.      .____.        .____.        ._.  .__.
                         |  |        |  |      |    |        |    |        | |  |  |
                         |  |        |  |      |    |        |    |        | |  |  |
            LASER  1:  __|  |________|  |______|    |________|    |________| |__|  |___...
             
                                               |&lt;-FPK-&gt;|
                                               ._______. 
                                               |       | 
                                               |       | 
            LASER  2:  ________________________|       |_______________________________...
            </code>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.LaserModes.Yag2">
            <summary>
            YAG2
            <para>LASERON: On</para>
            <para>LASER1: Q switch frequency and pulse width + standby frequency (LASERON is not overlapped)</para>
            <para>LASER2: FPK (Q wwitch is not overlapped)</para>
            <code>
            
                                    | ON DELAY |                 | OFF DELAY |
                                               ._____________________________.
                                               |                             | 
                                               |                             | 
            LASER ON:  ________________________|                             |________...
                                               .
                                               .       | PW |  
                         |&lt;-STANDBY-&gt;|         .       |&lt;- 1/ FREQ -&gt;|  
                         .__.        .__.      .       .____.        .____.        .__.
                         |  |        |  |      .       |    |        |    |        |  |
                         |  |        |  |      .       |    |        |    |        |  |
            LASER  1:  __|  |________|  |______._______|    |________|    |________|  |_...
             
                                               |&lt;-FPK-&gt;|
                                               ._______. 
                                               |       | 
                                               |       | 
            LASER  2:  ________________________|       |_______________________________...
            </code>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.LaserModes.Yag3">
            <summary>
            YAG3 
            <para>LASERON: On</para>
            <para>LASER1: Q switch frequency and pulse width with pulse completion + standby frequency (LASERON is not overlapped)</para>
            <para>LASER2: FPK (Delayed 10 usec and overlapped with Q switch)</para>
            <code>
            
                                    | ON DELAY |                 | OFF DELAY |
                                               ._____________________________.
                                               |                             | 
                                               |                             | 
            LASER ON:  ________________________|                             |________...
                                               .
                                               .      | PW |  
                         |&lt;-STANDBY-&gt;|         |10usec|&lt;- 1/ FREQ -&gt;|             |&lt;-STANDBY-&gt;|
                         .__.        .__.      .      .____.        .____.        .__.
                         |  |        |  |      .      |    |        |    |        |  |
                         |  |        |  |      .      |    |        |    |        |  |
            LASER  1:  __|  |________|  |______.______|    |________|    |________|  |___...
             
                                               |&lt;-FPK-&gt;|
                                               ._______. 
                                               |       | 
                                               |       | 
            LASER  2:  ________________________|       |_______________________________...
            </code>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.LaserModes.Mode4">
            <summary>
            MODE4
            <para>LASERON: On</para>
            <para>LASER1: Standby frequency and 2x half period duation</para>
            <para>LASER2: FPK (Standby frequency is overlapped)</para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.LaserModes.Yag5">
            <summary>
            YAG5 
            <para>LASERON: On</para>
            <para>LASER1: Q switch frequency and pulse width (Configurable Q switch delay and with pulse completion) + standby frequency (LASERON is not overlapped)</para>
            <para>LASER2: FPK (Q switch is overlapped)</para>
            <para>above RTC5</para>
            <code>
            
                                    | ON DELAY |                 | OFF DELAY |
                                               ._____________________________.
                                               |                             | 
                                               |                             | 
            LASER ON:  ________________________|                             |__________...
                                               .
                                               .      | PW |  
                         |&lt;-STANDBY-&gt;|         |Qdelay|&lt;- 1/ FREQ -&gt;|             |&lt;-STANDBY-&gt;|
                         .__.        .__.      .      .____.        .____.        .__.
                         |  |        |  |      .      |    |        |    |        |  |
                         |  |        |  |      .      |    |        |    |        |  |
            LASER  1:  __|  |________|  |______.______|    |________|    |________|  |___...
             
                                               |&lt;-FPK-&gt;|
                                               ._______. 
                                               |       | 
                                               |       | 
            LASER  2:  ________________________|       |_________________________________...
            </code>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.LaserModes.Mode6">
            <summary>
            MODE6
            <para>LASERON: On with pulse completion</para>
            <para>LASER1: Standby frequency and pulse width </para>
            <para>LASER2: FPK (Stanby frequency is overlapped)</para>
            <para>above RTC5 </para>
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.ScannerHeads">
            <summary>
            RTC scan heads
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.ScannerHeads.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.ScannerHeads.Primary">
            <summary>
            Primary scan head
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.ScannerHeads.Secondary">
            <summary>
            Secondary(2nd) scan head
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.CorrectionTables">
            <summary>
            RTC correction tables
            </summary>
            <remarks>
            RTC5: Max. 4<br/>
            RTC6: Max. 8<br/>
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.CorrectionTables.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.CorrectionTables.Table1">
            <summary>
            Table 1
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.CorrectionTables.Table2">
            <summary>
            Table 2
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.CorrectionTables.Table3">
            <summary>
            Table 3
            <para>above RTC5</para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.CorrectionTables.Table4">
            <summary>
            Table 4
            <para>above RTC5</para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.CorrectionTables.Table5">
            <summary>
            Table 5
            <para>above RTC6</para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.CorrectionTables.Table6">
            <summary>
            Table 6
            <para>above RTC6</para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.CorrectionTables.Table7">
            <summary>
            Table 7
            <para>above RTC6</para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.CorrectionTables.Table8">
            <summary>
            Table 8
            <para>above RTC6</para>
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.ExtensionChannels">
            <summary>
            RTC extension channels (or ports)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.ExtensionChannels.ExtDI2">
            <summary>
            2 bits digital input at LASER connector
            <para>above RTC5</para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.ExtensionChannels.ExtDO2">
            <summary>
            2 bits digital output at LASER connector
            <para>above RTC5</para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.ExtensionChannels.ExtDO8">
            <summary>
            8 bits digital output at EXTENSION 2 port
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.ExtensionChannels.ExtDO16">
            <summary>
            16 bits digital output at EXTENSION 1 port
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.ExtensionChannels.ExtDI16">
            <summary>
            16 bits digital input at EXTENSION 1 port
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.ExtensionChannels.ExtAO1">
            <summary>
            ANALOG 1 port
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.ExtensionChannels.ExtAO2">
            <summary>
            ANALOG 2 port
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.RtcStatus">
            <summary>
            RTC controller status
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.RtcStatus.Aborted">
            <summary>
            Aborted (Stopped) 
            </summary>
            <remarks>
            Also, error status. <br/>
            Need to reset by <see cref="M:SpiralLab.Sirius2.Scanner.Rtc.IRtc.CtlReset">CtlReset</see>. <br/>
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.RtcStatus.NoError">
            <summary>
            No error
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.RtcStatus.NotBusy">
            <summary>
            Not busy
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.RtcStatus.Busy">
            <summary>
            Busy
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.RtcStatus.List1Busy">
            <summary>
            List 1 busy
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.RtcStatus.List2Busy">
            <summary>
            List 2 busy
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.RtcStatus.PositionAckOK">
            <summary>
            Position acknowledge OK or not
            </summary>
            <remarks>
            Position Acknowledge = Position error(Command - Actual) over than 0.25% (default). <br/>
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.RtcStatus.PowerOK">
            <summary>
            Power has supplied scan head or not
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.RtcStatus.TempOK">
            <summary>
            Temperature OK or not
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.RtcStatus.MofOutOfRange">
            <summary>
            Out of range 
            </summary>
            <remarks>
            Used with <see cref="P:SpiralLab.Sirius2.Scanner.Rtc.IRtc.IsMoF">IRtc.IsMoF(Processing On The Fly)</see> 
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.RtcStatus.EthernetOk">
            <summary>
            Ethernet communication OK or not
            </summary>
            <remarks>
            Used with above RTC6 and for RTC6e only. <br/>
            </remarks>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.RtcTypes">
            <summary>
            RTC card types
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.RtcTypes.RtcVirtual">
            <summary>
            Vritual
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.RtcTypes.Rtc4">
            <summary>
            Not supported
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.RtcTypes.Rtc5">
            <summary>
            RTC5 (<see cref="F:SpiralLab.Sirius2.Scanner.Rtc.RtcTypes.Rtc5">Rtc5)</see>)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.RtcTypes.Rtc6">
            <summary>
            RTC6 (<see cref="F:SpiralLab.Sirius2.Scanner.Rtc.RtcTypes.Rtc6">Rtc6)</see>)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.RtcTypes.Rtc6e">
            <summary>
            RTC6 ethernet (<see cref="T:SpiralLab.Sirius2.Scanner.Rtc.Rtc6Ethernet">Rtc6Ethernet)</see>)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.RtcTypes.Rtc6SyncAxis">
            <summary>
            XL-SCAN (<see cref="F:SpiralLab.Sirius2.Scanner.Rtc.RtcTypes.Rtc6SyncAxis">Rtc6SyncAxis)</see>)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.RtcTypes.UserDefined1">
            <summary>
            User defined type
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.RtcTypes.UserDefined2">
            <summary>
            User defined type
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.RtcTypes.UserDefined3">
            <summary>
            User defined type
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.RtcTypes.UserDefined4">
            <summary>
            User defined type
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.RtcTypes.UserDefined5">
            <summary>
            User defined type
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.RtcTypes.UserDefined6">
            <summary>
            User defined type
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.RtcTypes.UserDefined7">
            <summary>
            User defined type
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.RtcTypes.UserDefined8">
            <summary>
            User defined type
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.RtcTypes.UserDefined9">
            <summary>
            User defined type
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.ILaserControlSignal">
            <summary>
            RTC laser control signal
            </summary>
            <remarks>
            RTC5: <see cref="T:SpiralLab.Sirius2.Scanner.Rtc.Rtc5LaserControlSignal">Rtc5LaserControlSignal</see> <br/>
            RTC6: <see cref="T:SpiralLab.Sirius2.Scanner.Rtc.Rtc6LaserControlSignal">Rtc6LaserControlSignal</see> <br/>
            </remarks>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.ILaserControlSignal.ToUInt">
            <summary>
            32bits uint data
            </summary>
            <returns>uint</returns>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.IRtcExternalControlMode">
            <summary>
            RTC external control mode
            </summary>
            <remarks>
            RTC5: <see cref="T:SpiralLab.Sirius2.Scanner.Rtc.Rtc5ExternalControlMode">Rtc5ExternalControlMode</see> <br/>
            RTC6: <see cref="T:SpiralLab.Sirius2.Scanner.Rtc.Rtc6ExternalControlMode">Rtc6ExternalControlMode</see> <br/>
            </remarks>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcExternalControlMode.ToUInt">
            <summary>
            32bits uint data
            </summary>
            <returns>uint</returns>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.IRtcStartStopInfo">
            <summary>
            RTC start stop info
            </summary>
            <remarks>
            RTC5: <see cref="T:SpiralLab.Sirius2.Scanner.Rtc.Rtc5StartStopInfo">Rtc5StartStopInfo</see> <br/>
            RTC6: <see cref="T:SpiralLab.Sirius2.Scanner.Rtc.Rtc6StartStopInfo">Rtc6StartStopInfo</see> <br/>
            </remarks>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcStartStopInfo.ToUInt">
            <summary>
            32bits uint data
            </summary>
            <returns>uint</returns>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.RtcCorrectionFile">
            <summary>
            RTC correction files
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcCorrectionFile.FileName">
            <summary>
            File name
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcCorrectionFile.ToString">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcCorrectionFile.#ctor(SpiralLab.Sirius2.Scanner.Rtc.IRtc,SpiralLab.Sirius2.Scanner.Rtc.CorrectionTables)">
            <summary>
            Constructor
            </summary>
            <param name="rtc"><c>IRtc</c></param>
            <param name="tableIndex"><c>CorrectionTableIndex</c></param>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.JobRtc">
            <summary>
            JobRtc
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.JobRtc.ID">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.JobRtc.Name">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.JobRtc.Description">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.JobRtc.Result">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.JobRtc.ListTotalCounts">
            <summary>
            Total counts of list commands
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.JobRtc.StartTime">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.JobRtc.EndTime">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.JobRtc.ExecutionTime">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.JobRtc.Tag">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.JobRtc.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.JobRtc.#ctor(System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="id">Job id</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.JobRtc.ToString">
            <inheritdoc/>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.IRtc">
            <summary>
            IRtc interface
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius2.Scanner.Rtc.IRtc.OnJob">
            <summary>
            Event for job status has changed(or job has created)
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius2.Scanner.Rtc.IRtc.OnCorrectionTable">
            <summary>
            Event for correction file has loaded into specific table
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.IRtc.Index">
            <summary>
            Identifier (0,1,2,...)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.IRtc.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.IRtc.RtcType">
            <summary>
            Rtc type
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.IRtc.Job">
            <summary>
            Current(or last) job        
            </summary>
            <remarks>
            RTC5: <see cref="T:SpiralLab.Sirius2.Scanner.Rtc.JobRtc">JobRtc</see> <br/>
            RTC6: <see cref="T:SpiralLab.Sirius2.Scanner.Rtc.JobRtc">JobRtc</see> <br/>
            SyncAXIS: <see cref="T:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.JobSyncAxis">JobSyncAxis</see> <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.IRtc.JobHistory">
            <summary>
            Array of <see cref="T:SpiralLab.Sirius2.Scanner.IJob">IJob</see>
            </summary>
            <remarks>
            RTC5: <see cref="T:SpiralLab.Sirius2.Scanner.Rtc.JobRtc">JobRtc</see> <br/>
            RTC6: <see cref="T:SpiralLab.Sirius2.Scanner.Rtc.JobRtc">JobRtc</see> <br/>
            SyncAXIS: <see cref="T:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.JobSyncAxis">JobSyncAxis</see> <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.IRtc.KFactor">
            <summary>
            K-Factor (bits/mm)
            <remarks>
            RTC5: 20 bits <br/>
            RTC6: 20 bits <br/>
            Position x, y are multiply this scale value to get(or calculate) to bits value. <br/>
            </remarks>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.IRtc.EffectiveFieldSize">
            <summary>
            Effective scan field size (mm)
            </summary>
            <remarks>        
            RTC5: 2^20 / <see cref="P:SpiralLab.Sirius2.Scanner.Rtc.IRtc.KFactor">KFactor</see> <br/>
            RTC6: 2^20 / <see cref="P:SpiralLab.Sirius2.Scanner.Rtc.IRtc.KFactor">KFactor</see> <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.IRtc.FieldSizeLimit">
            <summary>
            User limited work area 
            </summary>
            <remarks>
            Size limit for width, height (mm) <br/>
            Out of range would be checked if value has assigned. <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.IRtc.LaserMode">
            <summary>
            Laser mode
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.IRtc.CorrectionFiles">
            <summary>
            Array of scanner field correction files
            </summary>
            <remarks>
            RTC5: 4 Tables (0~3) <br/>
            RTC6: 8 Tables (0~7) <br/>
            Use <see cref="M:SpiralLab.Sirius2.Scanner.Rtc.IRtc.CtlLoadCorrectionFile(SpiralLab.Sirius2.Scanner.Rtc.CorrectionTables,System.String)">CtlLoadCorrectionFile</see> to load correction file into table. <br/>
            Use <see cref="M:SpiralLab.Sirius2.Scanner.Rtc.IRtc.CtlSelectCorrection(SpiralLab.Sirius2.Scanner.Rtc.CorrectionTables,SpiralLab.Sirius2.Scanner.Rtc.CorrectionTables)">CtlSelectCorrection</see> to select correction table. <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.IRtc.PrimaryHeadTable">
            <summary>
            Primary head's correction table index
            </summary>
            Use <see cref="M:SpiralLab.Sirius2.Scanner.Rtc.IRtc.CtlSelectCorrection(SpiralLab.Sirius2.Scanner.Rtc.CorrectionTables,SpiralLab.Sirius2.Scanner.Rtc.CorrectionTables)">CtlSelectCorrection</see> to select correction table. <br/>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.IRtc.SecondaryHeadTable">
            <summary>
            Secondary head's correction table index
            </summary>
            <remarks>
            Used with <see cref="T:SpiralLab.Sirius2.Scanner.Rtc.IRtc2ndHead">IRtc2ndHead</see> or <see cref="T:SpiralLab.Sirius2.Scanner.Rtc.IRtc3D">IRtc3D</see>. <br/>
            Use <see cref="M:SpiralLab.Sirius2.Scanner.Rtc.IRtc.CtlSelectCorrection(SpiralLab.Sirius2.Scanner.Rtc.CorrectionTables,SpiralLab.Sirius2.Scanner.Rtc.CorrectionTables)">CtlSelectCorrection</see> to select correction table. <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.IRtc.MatrixStack">
            <summary>
            4x4 matrix stack
            </summary>
            <remarks>
            Matrix transformation will applied every jump and mark commands. <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.IRtc.IsMoF">
            <summary>
            MoF option
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.IRtc.Is2ndHead">
            <summary>
            2nd head option
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.IRtc.Is3D">
            <summary>
            3d option (VarioScan, VarioScan-II, Z-Shift)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.IRtc.IsScanAhead">
            <summary>
            ScanAhead option 
            </summary>
            <remarks>
            Only for ExcelliSCAN scanner product <br/>
            Also, above RTC6 <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.IRtc.IsUFPM">
            <summary>
            Ultra fast pulse modulation option
            </summary>
            <remarks>
            Above RTC6 <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.IRtc.IsSyncAxis">
            <summary>
            SyncAxis option
            </summary>
            <remarks>
            Above RTC6 and ACS controller <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.IRtc.Fpk">
            <summary>
            First pulse killer (usec)
            </summary>
            <remarks>
            Used with <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.LaserModes.Yag1">LaserModes.Yag1</see>, <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.LaserModes.Yag2">LaserModes.Yag2</see>, <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.LaserModes.Yag3">LaserModes.Yag3</see>, <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.LaserModes.Mode4">LaserModes.Mode4</see> and <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.LaserModes.Yag5">LaserModes.Yag5</see> only. <br/>
            Min. time resolution: * 10usec <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.IRtc.Frequency">
            <summary>
            Last Frequency (Hz)
            </summary>
            <remarks>
            Do not 'set' operation. its used by internally. <br/>
            Use <see cref="M:SpiralLab.Sirius2.Scanner.Rtc.IRtc.CtlFrequency(System.Double,System.Double)">CtlFrequency</see> instead. <br/>
            Min. time resolution: 1/128(= 0.0078125) usec. Max. 128MHz<br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.IRtc.PulseWidth">
            <summary>
            Last Pulse width (usec)
            </summary>
            <remarks>
            Do not 'set' operation. its used by internally. <br/>
            Use <see cref="M:SpiralLab.Sirius2.Scanner.Rtc.IRtc.CtlFrequency(System.Double,System.Double)">CtlFrequency</see> instead. <br/>
            Min. time resolution: 1/64(= 0.01562) usec <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.IRtc.DelayOn">
            <summary>
            Last Laser on delay (usec)
            </summary>
            <remarks>
            RTC5: Min. time resolution: 1/2(= 0.5) usec <br/>
            RTC6: Min. time resolution: 1/64(= 0.01562) usec <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.IRtc.DelayOff">
            <summary>
            Last Laser off delay (usec)
            </summary>
            <remarks>
            RTC5: Min. time resolution: 1/2(= 0.5) usec <br/>
            RTC6: Min. time resolution: 1/64(= 0.01562) usec <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.IRtc.DelayJump">
            <summary>
            Last Scanner jump delay (usec)
            </summary>
            <remarks>
            Min. time resolution: 10 usec <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.IRtc.DelayMark">
            <summary>
            Last Scanner mark delay (usec)
            </summary>
            <remarks>
            Min. time resolution: 10 usec <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.IRtc.DelayPolygon">
            <summary>
            Last Scanner polygon delay (usec)
            </summary>
            <remarks>
            Min. time resolution: 10 usec <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.IRtc.SpeedJump">
            <summary>
            Last Jump speed (mm/s)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.IRtc.SpeedMark">
            <summary>
            Last Mark speed (mm/s)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.IRtc.ListType">
            <summary>
            Last List type
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.IRtc.IsReady">
            <summary>
            Ready status
            </summary>
            <remarks>
            Same result with <see cref="M:SpiralLab.Sirius2.Scanner.Rtc.IRtc.CtlGetStatus(SpiralLab.Sirius2.Scanner.Rtc.RtcStatus)">CtlGetStatus(RtcStatus.NoError)</see> <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.IRtc.IsBusy">
            <summary>
            Busy status
            </summary>
            <remarks>
            Same result with <see cref="M:SpiralLab.Sirius2.Scanner.Rtc.IRtc.CtlGetStatus(SpiralLab.Sirius2.Scanner.Rtc.RtcStatus)">CtlGetStatus(RtcStatus.Busy)</see> <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.IRtc.IsError">
            <summary>
            Error status
            </summary>
            <remarks>
            Same result with <see cref="M:SpiralLab.Sirius2.Scanner.Rtc.IRtc.CtlGetStatus(SpiralLab.Sirius2.Scanner.Rtc.RtcStatus)">CtlGetStatus(RtcStatus.Aborted)</see> <br/>
            </remarks>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtc.Initialize">
            <summary>
            Initialize RTC controller
            <code>
            var fov = 60.0; // Fied of view: 60mm
            var kfactor = Math.Pow(2, 20) / fov;
            var correctionFile = Path.Combine(Config.CorrectionPath, "cor_1to1.ct5");
            var rtc = ScannerFactory.CreateRtc6(0, kfactor, LaserModes.Yag5, RtcSignalLevels.ActiveHigh, RtcSignalLevels.ActiveHigh, correctionFile);
            bool success = true;
            success &amp;= rtc.Initialize();
            success &amp;= rtc.CtlFrequency(50 * 1000, 2); // 50 KHz, 2 usec
            success &amp;= rtc.CtlSpeed(100, 100); // 100 mm/s
            success &amp;= rtc.CtlDelay(10, 100, 200, 200, 0); // Delays (usec)
            ...
            success &amp;= rtc.CtlSetStagePosition(Vector2.Zero);
            success &amp;= rtc.ListBegin();
            success &amp;= rtc.ListJumpTo(Vector2.Zero);
            success &amp;= rtc.ListMarkTo(new Vector2(10, 0));
            success &amp;= rtc.ListEnd();
            if (success)
                success &amp;= rtc.ListExecute(true);
            ...
            </code>
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtc.CtlLoadCorrectionFile(SpiralLab.Sirius2.Scanner.Rtc.CorrectionTables,System.String)">
            <summary>
            Load scanner field correction file into target table
            </summary>
            <remarks>
            Should be called when <see cref="M:SpiralLab.Sirius2.Scanner.Rtc.IRtc.CtlGetStatus(SpiralLab.Sirius2.Scanner.Rtc.RtcStatus)">CtlGetStatus(RtcStatus.NotBusy)</see>. <br/>
            Notify <see cref="E:SpiralLab.Sirius2.Scanner.Rtc.IRtc.OnCorrectionTable">OnCorrectionTable</see> event. <br/>
            </remarks>
            <param name="tableIndex"><c>CorrectionTableIndex</c></param>
            <param name="ctFileName">Correction filename</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtc.CtlSelectCorrection(SpiralLab.Sirius2.Scanner.Rtc.CorrectionTables,SpiralLab.Sirius2.Scanner.Rtc.CorrectionTables)">
            <summary>
            Select scanner field correction table at specific scan head
            </summary>
            <param name="primaryHeadTableIndex"><c>CorrectionTableIndex</c> at primary scan head</param>
            <param name="secondaryHeadTableIndex"><c>CorrectionTableIndex</c> at secondary scan head</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtc.CtlLaserMode(SpiralLab.Sirius2.Scanner.Rtc.LaserModes)">
            <summary>
            Laser mode
            </summary>
            <param name="mode"><c>LaserMode</c></param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtc.CtlLaserOn">
            <summary>
            Laser output signal on by manually
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtc.CtlLaserOff">
            <summary>
            Laser output signal off by manually
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtc.CtlLaserSignal(System.Boolean)">
            <summary>
            Enable(or Disable) laser output signals
            </summary>
            <remarks>
            Signal pins: LASER1, LASER2 and LASERON. <br/>
            </remarks>
            <param name="onOff">Enable/Disable</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtc.CtlFrequency(System.Double,System.Double)">
            <summary>
            Frequency and pulse width
            </summary>
            <remarks>
            Should be called when <see cref="M:SpiralLab.Sirius2.Scanner.Rtc.IRtc.CtlGetStatus(SpiralLab.Sirius2.Scanner.Rtc.RtcStatus)">CtlGetStatus(RtcStatus.NotBusy)</see> <br/>
            </remarks>
            <param name="frequency">Frequency (Hz)<br/>Min. time resolution: 1/128(= 0.0078125) usec<br/>Max. 128MHz<br/></param>
            <param name="pulseWidth">Pulse width (usec)<br/>Min. time resolution: 1/64(= 0.01562) usec</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtc.CtlDelay(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Scanner and Laser delays
            </summary>
            <remarks>
            Scanner delays: Compensate inertia of scanner's dynamics (aka. tracking error) <br/>
            Laser delays: Compensate latency for laser source's optical output. <br/>
            Should be called when <see cref="M:SpiralLab.Sirius2.Scanner.Rtc.IRtc.CtlGetStatus(SpiralLab.Sirius2.Scanner.Rtc.RtcStatus)">CtlGetStatus(RtcStatus.NotBusy)</see> <br/>
            </remarks>
            <param name="laserOn">Laser on delay (usec)<br/>RTC5: Min. time resolution: 1/2(= 0.5) usec<br/>RTC6: Min. time resolution: 1/64(= 0.01562) usec<br/></param>
            <param name="laserOff">Laser off delay (usec)<br/>RTC5: Min. time resolution: 1/2(= 0.5) usec<br/>RTC6: Min. time resolution: 1/64(= 0.01562) usec<br/></param>
            <param name="scannerJump">Scanner jump delay (usec)<br/>Min. time resolution: 10 usec</param>
            <param name="scannerMark">Scanner mark(or arc) delay (usec)<br/>Min. time resolution: 10 usec</param>
            <param name="scannerPolygon">Scanner polygon(or corner) delay (usec)<br/>Min. time resolution: 10 usec</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtc.CtlSpeed(System.Double,System.Double)">
            <summary>
            Scanner jump and mark speed
            </summary>
            <param name="jump">Scanner jump speed (mm/s)</param>
            <param name="mark">Scanner mark(or arc) speed (mm/s)</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtc.CtlWriteData``1(SpiralLab.Sirius2.Scanner.Rtc.ExtensionChannels,``0)">
            <summary>
            Write data at EXTENSION port (<see cref="T:SpiralLab.Sirius2.Scanner.Rtc.ExtensionChannels">ExtensionChannels</see>)
            </summary>
            <typeparam name="T"><c>uint</c> or <c>double</c></typeparam>
            <param name="ch"><c>ExtensionChannels</c></param>
            <param name="data">Write data</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtc.CtlWriteExtDO16(System.UInt16,System.Boolean)">
            <summary>
            Toggle 1 bit digital output data at EXTENSION 1 port (<see cref="F:SpiralLab.Sirius2.Scanner.Rtc.ExtensionChannels.ExtDO16">ExtensionChannels</see>)
            </summary>
            <param name="bitPosition">0~15</param>
            <param name="onOff">On/Off</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtc.CtlReadData``1(SpiralLab.Sirius2.Scanner.Rtc.ExtensionChannels,``0@)">
            <summary>
            Read data at EXTENSION port (<see cref="T:SpiralLab.Sirius2.Scanner.Rtc.ExtensionChannels">ExtensionChannels</see>)
            </summary>
            <typeparam name="T"><c>uint</c> or <c>double</c></typeparam>
            <param name="ch"><c>ExtensionChannels</c></param>
            <param name="data">Read data</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtc.CtlGetStatus(SpiralLab.Sirius2.Scanner.Rtc.RtcStatus)">
             <summary>
             Get status of RTC controller
             </summary>
             <param name="rtcStatus"><c>RtcStatus</c></param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtc.CtlBusyWait">
            <summary>
            Wait until list commands has complete (or done)
            </summary>
            <remarks>
            Used when need to wait for job has complete after <see cref="M:SpiralLab.Sirius2.Scanner.Rtc.IRtc.ListExecute(System.Boolean)">ListExecute</see>.
            </remarks>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtc.CtlAbort">
            <summary>
            Abort list executing commands
            </summary>
            <remarks>
            Need to reset status by <see cref="M:SpiralLab.Sirius2.Scanner.Rtc.IRtc.CtlReset">CtlReset</see> <br/>
            </remarks>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtc.CtlReset">
            <summary>
            Reset for error 
            </summary>
            <remarks>
            Clear abort(or error) status. <br/>
            </remarks>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtc.ListBegin(SpiralLab.Sirius2.Scanner.Rtc.ListTypes)">
            <summary>
            List begin
            </summary>
            <remarks>
            If <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.ListTypes.Auto">ListTypes.Auto</see> has used, list commands would be executed when buffer has loaded enough by automatically. <br/>
            If <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.ListTypes.Single">ListTypes.Single</see> has used, list commands would be inserted into RTC buffer and executed by <see cref="M:SpiralLab.Sirius2.Scanner.Rtc.IRtc.ListExecute(System.Boolean)">ListExecute</see>. <br/>
            All followed list commands must be consider as its working within async threads. <br/>
            </remarks>
            <param name="listType"><c>ListType</c></param>
            <returns>Success or failed<br/>If return failed, marker would be stopped(or aborted) immediately. <br/></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtc.ListSelectCorrection(SpiralLab.Sirius2.Scanner.Rtc.CorrectionTables,SpiralLab.Sirius2.Scanner.Rtc.CorrectionTables)">
            <summary>
            List select correction table at specific scan head
            </summary>
            <param name="primaryHeadTableIndex"><c>CorrectionTableIndex</c> at primary scan head</param>
            <param name="secondaryHeadTableIndex"><c>CorrectionTableIndex</c> at secondary scan head</param>
            <returns>Success or failed<br/>If return failed, marker would be stopped(or aborted) immediately. <br/></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtc.ListFrequency(System.Double,System.Double)">
            <summary>
            List frequency and pulse width
            </summary>
            <param name="frequency">Frequency (Hz)<br/>Min. time resolution: 1/128(= 0.0078125) usec<br/>Max. 128MHz<br/></param>
            <param name="pulseWidth">Pulse width (usec)<br/>Min. time resolution: 1/64(= 0.01562) usec</param>
            <returns>Success or failed<br/>If return failed, marker would be stopped(or aborted) immediately. <br/></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtc.ListDelay(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            List laser and scanner delays
            </summary>
            <remarks>
            Laser delays: To compensate laser on/off latency. <br/>
            Scanner delays: To compensate scanner's tracking error. <br/>
            </remarks>
            <param name="laserOn">Laser on delay (usec)<br/>RTC5: Min. time resolution: 1/2(= 0.5) usec<br/>RTC6: Min. time resolution: 1/64(= 0.01562) usec<br/></param>
            <param name="laserOff">Laser off delay (usec)<br/>RTC5: Min. time resolution: 1/2(= 0.5) usec<br/>RTC6: Min. time resolution: 1/64(= 0.01562) usec<br/></param>
            <param name="scannerJump">Scanner jump delay (usec)<br/>Min. time resolution: 10 usec</param>
            <param name="scannerMark">Scanner mark(or arc) delay (usec)<br/>Min. time resolution: 10 usec</param>
            <param name="scannerPolygon">Scanner polygon(or corner) delay (usec)<br/>Min. time resolution: 10 usec</param>
            <returns>Success or failed<br/>If return failed, marker would be stopped(or aborted) immediately. <br/></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtc.ListSpeed(System.Double,System.Double)">
            <summary>
            List Scanner jump and mark speed
            </summary>
            <param name="jump">Scanner jump speed (mm/s)</param>
            <param name="mark">Scanner mark/arc speed (mm/s)</param>
            <returns>Success or failed<br/>If return failed, marker would be stopped(or aborted) immediately. <br/></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtc.ListWait(System.Double)">
            <summary>
            List wait during specific time
            </summary>
            <param name="msec">Time (msec)<br/>Min. time resolution: 10 usec<br/></param>
            <returns>Success or failed<br/>If return failed, marker would be stopped(or aborted) immediately. <br/></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtc.ListLaserOn(System.Double)">
            <summary>
            List laser on during specific time
            </summary>
            <param name="msec">Time (msec)<br/>Min. time resolution: 10 usec<br/></param>
            <returns>Success or failed<br/>If return failed, marker would be stopped(or aborted) immediately. <br/></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtc.ListLaserOn">
            <summary>
            List laser on by manually
            </summary>
            <returns>Success or failed<br/>If return failed, marker would be stopped(or aborted) immediately. <br/></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtc.ListLaserOff">
            <summary>
            Laser laser off by manually
            </summary>
            <returns>Success or failed<br/>If return failed, marker would be stopped(or aborted) immediately. <br/></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtc.ListWriteData``1(SpiralLab.Sirius2.Scanner.Rtc.ExtensionChannels,``0)">
            <summary>
            List write data at EXTENSION port (<see cref="T:SpiralLab.Sirius2.Scanner.Rtc.ExtensionChannels">ExtensionChannels</see>)
            </summary>
            <typeparam name="T"><c>uint</c> or <c>double</c></typeparam>
            <param name="ch"><c>ExtensionChannels</c></param>
            <param name="data">Write data</param>
            <returns>Success or failed<br/>If return failed, marker would be stopped(or aborted) immediately. <br/></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtc.ListWriteExtDO16(System.UInt16,System.Boolean)">
            <summary>
            List toggle 1 bit digital output data at EXTENSION 1 port (<see cref="F:SpiralLab.Sirius2.Scanner.Rtc.ExtensionChannels.ExtDO16">ExtensionChannels.ExtDO16</see>) 
            </summary>
            <param name="bitPosition">0~15</param>
            <param name="onOff">On/Off</param>
            <returns>Success or failed<br/>If return failed, marker would be stopped(or aborted) immediately. <br/></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtc.ListEnd">
            <summary>
            List end
            </summary>
            <returns>Success or failed<br/>If return failed, marker would be stopped(or aborted) immediately. <br/></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtc.ListExecute(System.Boolean)">
            <summary>
            List execute
            </summary>
            <remarks>
            If <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.ListTypes.Auto">ListTypes.Auto</see> used, list commands would be executed already and execute last buffer. <br/>
            If <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.ListTypes.Single">ListTypes.Single</see> used, list commands are ready for execution. <br/>
            Do NOT call this function to execute by external /START trigger.<br/>
            To use external /START trigger, configure <see cref="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcExtension.CtlExternalControl(SpiralLab.Sirius2.Scanner.Rtc.IRtcExternalControlMode,System.UInt32)">IRtcExtension.CtlExternalControl</see>. <br/>
            Notify <see cref="E:SpiralLab.Sirius2.Scanner.Rtc.IRtc.OnJob">OnJob</see> event. <br/>
            </remarks>
            <param name="busyWait">Wait until list commands has done or not.<br/>If <c>True</c>, function would be blocked until done. It also same feature with <see cref="M:SpiralLab.Sirius2.Scanner.Rtc.IRtc.CtlBusyWait">CtlBusyWait</see>.<br/>If <c>False</c>, function would be returned at immediately.<br/></param>
            <returns>Success or failed<br/>If return failed, marker would be stopped(or aborted) immediately. <br/></returns>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.IRtc2ndHead">
            <summary>
            IRtc2ndHead interface
            </summary>
            <remarks>
            <img src="images/rtc6pciex.png"/><br/>
            Used with 2.SCANHEAD connector at Fig 7.<br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.IRtc2ndHead.DistanceToSecondaryHead">
            <summary>
            Distance dx, dy between primary and secondary head (mm)
            <code>
                     Primary Head       Secondary Head
                          |                   |
                          |                   |
                          |                   |
                ----------+--------|-|--------+---------
                |                  | |                 |
                |                  |o|                 |
                |                  |v|                 |      
                |                  |e|                 |
                |         +        |r|        +        |
                |                  |l|                 |
                |                  |a|                 |
                |                  |p|                 |
                |                  | |                 |
                ----------+--------|-|--------+---------
                          |                   |
                          |                   |
                          |                   |
                          |----- Distance --->|
            </code>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.IRtc2ndHead.PrimaryHeadBaseOffset">
            <summary>
            Primary head's base offset
            </summary>
            <remarks>
            Dx(mm), Dy(mm), Dz(mm) and Angle(°) <br/>
            Total offset = <see cref="P:SpiralLab.Sirius2.Scanner.Rtc.IRtc2ndHead.PrimaryHeadBaseOffset">PrimaryHeadBaseOffset</see> + <see cref="P:SpiralLab.Sirius2.Scanner.Rtc.IRtc2ndHead.PrimaryHeadUserOffset">PrimaryHeadUserOffset</see> <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.IRtc2ndHead.PrimaryHeadUserOffset">
            <summary>
            Primary head's user offset
            </summary>
            <remarks>
            Dx(mm), Dy(mm), Dz(mm) and Angle(°) <br/>
            Total offset = <see cref="P:SpiralLab.Sirius2.Scanner.Rtc.IRtc2ndHead.PrimaryHeadBaseOffset">PrimaryHeadBaseOffset</see> + <see cref="P:SpiralLab.Sirius2.Scanner.Rtc.IRtc2ndHead.PrimaryHeadUserOffset">PrimaryHeadUserOffset</see> <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.IRtc2ndHead.SecondaryHeadBaseOffset">
            <summary>
            Secondary head's base offset
            </summary>
            <remarks>
            Dx(mm), Dy(mm), Dz(mm) and Angle(°) <br/>
            Total offset = <see cref="P:SpiralLab.Sirius2.Scanner.Rtc.IRtc2ndHead.SecondaryHeadBaseOffset">SecondaryHeadBaseOffset</see> + <see cref="P:SpiralLab.Sirius2.Scanner.Rtc.IRtc2ndHead.SecondaryHeadUserOffset">SecondaryHeadUserOffset</see> <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.IRtc2ndHead.SecondaryHeadUserOffset">
            <summary>
            Secondary head's user offset
            </summary>
            <remarks>
            Dx(mm), Dy(mm), Dz(mm) and Angle(°) <br/>
            Total offset = <see cref="P:SpiralLab.Sirius2.Scanner.Rtc.IRtc2ndHead.SecondaryHeadBaseOffset">SecondaryHeadBaseOffset</see> + <see cref="P:SpiralLab.Sirius2.Scanner.Rtc.IRtc2ndHead.SecondaryHeadUserOffset">SecondaryHeadUserOffset</see> <br/>
            </remarks>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtc2ndHead.CtlHeadOffset(SpiralLab.Sirius2.Scanner.Rtc.ScannerHeads,SpiralLab.Sirius2.Mathematics.Offset)">
            <summary>
            Scan head total offset
            </summary>
            <remarks>
            Total offset = base offset + user offset <br/>
            </remarks>
            <param name="head"><c>ScannerHead</c></param>
            <param name = "offset">Dx(mm), Dy(mm), Dz(mm) and Angle(°)</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtc2ndHead.ListHeadOffset(SpiralLab.Sirius2.Scanner.Rtc.ScannerHeads,SpiralLab.Sirius2.Mathematics.Offset)">
            <summary>
            List scan head total offset
            </summary>
            <remarks>
            Total offset = base offset + user offset <br/>
            </remarks>
            <param name="head"><c>ScannerHead</c></param>
            <param name="offset">Dx(mm), Dy(mm), Dz(mm) and Angle(°)</param>
            <returns>Success or failed<br/>If return failed, marker would be stopped(or aborted) immediately. <br/></returns>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.IRtc3D">
            <summary>
            IRtc3D interface
            <para>Used with VarioScan, VarioScan II, excelliSHIFT products</para>
            </summary>
            <remarks>
            <img src="images/rtc6pciex.png"/><br/>
            Used with 2.SCANHEAD connector at Fig 7.<br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.IRtc3D.IsDirectMode3D">
            <summary>
            DirectMove3D
            </summary>
            <remarks>
            If <c>False</c>, the z output is changed to its end-value in such a way that the focus is kept in one plane during the entire jump. <br/>
            If <c>True</c>, the z output is changed directly (linearly) to its end value during a jump. <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.IRtc3D.ZOffset">
            <summary>
            ZOffset (mm)
            </summary>
            <remarks>
            Z offset = <see cref="P:SpiralLab.Sirius2.Scanner.Rtc.IRtc2ndHead.PrimaryHeadBaseOffset">PrimaryHeadBaseOffset.Dz</see> + <see cref="P:SpiralLab.Sirius2.Scanner.Rtc.IRtc2ndHead.PrimaryHeadUserOffset">PrimaryHeadUserOffset.Dz</see> <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.IRtc3D.ZDefocus">
            <summary>
            ZDefocus
            </summary>
            <remarks>
            3D Z defocus (mm) <br/>
            +: Upper, - : Lower <br/>
            A focus shift causes a defocusing of the laser focus relative to the working plane. <br/>
            A positive value increases the focal length of the Dynamic focusing unit and shifts the focus position. <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.IRtc3D.CoefA">
            <summary>
            3D Coefficient A
            </summary>
            <remarks>
            Zout = A + Bl + Cl² <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.IRtc3D.CoefB">
            <summary>
            3D Coefficient B
            </summary>
            <remarks>
            Zout = A + Bl + Cl² <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.IRtc3D.CoefC">
            <summary>
            3D Coefficient C
            </summary>
            <remarks>
            Zout = A + Bl + Cl² <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.IRtc3D.KZFactor">
            <summary>
            KZ-factor factor (bits/mm)
            </summary>
            <remarks>
            RTC5: 16 bits = KFactor/16 <br/>
            RTC6: 20 bits = KFactor <br/>
            Position z commands are multiply this scale value to get(or convert) to bits value. <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.IRtc3D.KZScale">
            <summary>
            KZ-Factor scale factor
            </summary>
            <remarks>
            Default: 1,1 <br/>
            Negative(-), Positive(+) <br/>
            Position z commands (likes as <c>ListJumpTo</c>, <c>ListMarkTo</c>, ... ) are multiply this scale value.
            </remarks>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtc3D.CtlZDefocus(System.Double)">
            <summary>
            Z defocus
            </summary>
            <remarks>
            +: Upper, - : Lower <br/>
            A focus shift causes a defocusing of the laser focus relative to the working plane. <br/>
            A positive value increases the focal length of the dynamic focusing unit and shifts the focus position. <br/>
            </remarks>
            <param name="zDefocus">Defocus (mm)</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtc3D.CtlLoadZTable(System.Double,System.Double,System.Double)">
            <summary>
            Load z table
            </summary>
            <remarks>
            Zout = A + Bl + Cl² <br/>
            </remarks>
            <param name="coefA">Coefficient a</param>
            <param name="coefB">Coefficient b</param>
            <param name="coefC">Coefficient c</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtc3D.CtlZDistance(System.Numerics.Vector3,System.Double@)">
            <summary>
            Get z distance from position
            </summary>
            <param name="position">X,Y,Z position</param>
            <param name="distance">Distance (mm)</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtc3D.ListZDefocus(System.Double)">
            <summary>
            List z defocus
            </summary>
            <remarks>
            +: Upper, - : Lower <br/>
            A focus shift causes a defocusing of the laser focus relative to the working plane. <br/>
            A positive value increases the focal length of the dynamic focusing unit and shifts the focus position. <br/>
            </remarks>
            <param name="zDefocus">Z defocus (mm)</param>
            <returns>Success or failed<br/>If return failed, marker would be stopped(or aborted) immediately. <br/></returns>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.AutoLaserControlModes">
            <summary>
            Automatic laser control modes (aka. Ramp)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.AutoLaserControlModes.Disabled">
            <summary>
            Disabled
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.AutoLaserControlModes.SetVelocity">
            <summary>
            Set(or command) velocity
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.AutoLaserControlModes.ActualVelocity">
            <summary>
            Actual(or feedback) velocity
            </summary>
            <remarks>
            Used with iDRIVE scanner products only. <br/>
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.AutoLaserControlModes.EncoderSpeed">
            <summary>
            Encoder speed (for MoF)
            </summary>
            <remarks>
            Used with <c>IRtcMoF</c> <br/>
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.AutoLaserControlModes.ActualVelocityAndEncoderSpeed">
            <summary>
            Actual velocity + Encoder speed
            </summary>
            <remarks>
            Used with iDRIVE scanner products only. (like as intelliSCAN series) <br/>
            Used with <c>IRtcMoF</c> <br/>
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.AutoLaserControlModes.ActualVelocityWithSCANAhead">
            <summary>
            Actual velocity + SCANAhead + EncoderSpeed 
            </summary>
            <remarks>
            Used with SCANAhead scanner products only. (like as ExcelliSCAN or intelliSCAN IV) <br/>
            Used with <c>Rtc6</c> + SCANahead option only. <br/>
            </remarks>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.AutoLaserControlSignals">
            <summary>
            Automatic laser control signals (aka. Ramp signal)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.AutoLaserControlSignals.Disabled">
            <summary>
            Disabled
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.AutoLaserControlSignals.Analog1">
            <summary>
            Analog 1
            <para>double: voltage (0~10)</para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.AutoLaserControlSignals.Analog2">
            <summary>
            Analog 2 
            <para>double: voltage (0~10)</para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.AutoLaserControlSignals.ExtDO8">
            <summary>
            Extension2 port 
            <para>uint: 8bits (0~255)</para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.AutoLaserControlSignals.PulseWidth">
            <summary>
            Pulse width
            <para>double: usec</para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.AutoLaserControlSignals.Frequency">
            <summary>
            Frequency 
            <para>double: Hz</para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.AutoLaserControlSignals.ExtDO16">
            <summary>
            Extension1 port 
            <para>uint: 16 bits (0~65535)</para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.AutoLaserControlSignals.FocusShift">
            <summary>
            Focus shift (aka. Defocus)
            <para>double: mm</para>
            </summary>
            <remarks>
            Focus shift controlled by z movement with 3D. <br/>
            Used with automatic laser control by defined vector only. (= used with <see cref="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcAutoLaserControl.ListAlcByVectorBegin``1(SpiralLab.Sirius2.Scanner.Rtc.AutoLaserControlSignals,``0)">IRtcAutoLaserControl.ListAlcByVectorBegin</see>). <br/>
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.AutoLaserControlSignals.SpotDistance">
            <summary>
            Spot distance
            <para>double: distance (mm)</para>
            <para>above RTC6 + SCANAhead</para>
            </summary>
            <remarks>
            Spot distance controlled to the current mark speed by automatically. <br/>
            Used with <c>AutoLaserControlModes.ActualVelocityWithSCANAhead</c> only. <br/>
            Not used with automatic laser control by defined vector. (= not used with <see cref="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcAutoLaserControl.ListAlcByVectorBegin``1(SpiralLab.Sirius2.Scanner.Rtc.AutoLaserControlSignals,``0)">IRtcAutoLaserControl.ListAlcByVectorBegin</see>) <br/>
            Spot distance is configured by <see cref="P:SpiralLab.Sirius2.Scanner.Rtc.IRtcAutoLaserControl.Alc100PercentageValue">Alc100PercentageValue</see> (<see cref="P:SpiralLab.Sirius2.Scanner.Rtc.IRtcAutoLaserControl.AlcMinValue">AlcMinValue</see>, <see cref="P:SpiralLab.Sirius2.Scanner.Rtc.IRtcAutoLaserControl.AlcMaxValue">AlcMaxValue</see> are not used.) <br/>
            </remarks>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.IRtcAutoLaserControl">
            <summary>
            IRtcAutoLaserControl interface 
            </summary>
            <remarks>
            Automatic laser control(aka. Ramp) by control output signals. <br/>
            1. Position-dependent. <br/>
            2. Speed-dependent. <br/>
            3. Defined-vector. <br/>
            <img src="images/ramp.png"/><br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.IRtcAutoLaserControl.AlcSignal">
            <summary>
            Active(or last) ALC(Automatic Laser Control) signal
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.IRtcAutoLaserControl.Alc100PercentageValue">
            <summary>
            Active(or last) ALC(Automatic Laser Control) signal 100% value
            </summary>
            <remarks>
            If <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.AutoLaserControlSignals.Analog1">AutoLaserControlSignals.Analog1</see>, value is analog voltage(V). <br/>
            If <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.AutoLaserControlSignals.Analog2">AutoLaserControlSignals.Analog2</see>, value is analog voltage(V). <br/>
            If <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.AutoLaserControlSignals.ExtDO8">AutoLaserControlSignals.ExtDO8</see>, value is 8bits (0~255). <br/>
            If <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.AutoLaserControlSignals.ExtDO16">AutoLaserControlSignals.ExtDO16</see>, value is 16bits (0~65535). <br/>
            If <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.AutoLaserControlSignals.PulseWidth">AutoLaserControlSignals.PulseWidth</see>, value is pulse width (usec). <br/>
            If <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.AutoLaserControlSignals.Frequency">AutoLaserControlSignals.Frequency</see>, value is frequency (Hz). <br/>
            If <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.AutoLaserControlSignals.SpotDistance">AutoLaserControlSignals.SpotDistance</see>, spot distance (mm). <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.IRtcAutoLaserControl.AlcMinValue">
            <summary>
            Active(or last) ALC(Automatic Laser Control) signal min value
            </summary>
            <remarks>
            If <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.AutoLaserControlSignals.Analog1">AutoLaserControlSignals.Analog1</see>, value is analog voltage(V). <br/>
            If <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.AutoLaserControlSignals.Analog2">AutoLaserControlSignals.Analog2</see>, value is analog voltage(V). <br/>
            If <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.AutoLaserControlSignals.ExtDO8">AutoLaserControlSignals.ExtDO8</see>, value is 8bits (0~255). <br/>
            If <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.AutoLaserControlSignals.ExtDO16">AutoLaserControlSignals.ExtDO16</see>, value is 16bits (0~65535). <br/>
            If <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.AutoLaserControlSignals.PulseWidth">AutoLaserControlSignals.PulseWidth</see>, value is pulse width (usec). <br/>
            If <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.AutoLaserControlSignals.Frequency">AutoLaserControlSignals.Frequency</see>, value is frequency (Hz). <br/>
            If <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.AutoLaserControlSignals.SpotDistance">AutoLaserControlSignals.SpotDistance</see>, not used. <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.IRtcAutoLaserControl.AlcMaxValue">
            <summary>
            Active(or last) ALC(Automatic Laser Control) signal max value
            </summary>
            <remarks>
            If <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.AutoLaserControlSignals.Analog1">AutoLaserControlSignals.Analog1</see>, value is analog voltage(V). <br/>
            If <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.AutoLaserControlSignals.Analog2">AutoLaserControlSignals.Analog2</see>, value is analog voltage(V). <br/>
            If <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.AutoLaserControlSignals.ExtDO8">AutoLaserControlSignals.ExtDO8</see>, value is 8bits (0~255). <br/>
            If <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.AutoLaserControlSignals.ExtDO16">AutoLaserControlSignals.ExtDO16</see>, value is 16bits (0~65535). <br/>
            If <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.AutoLaserControlSignals.PulseWidth">AutoLaserControlSignals.PulseWidth</see>, value is pulse width (usec). <br/>
            If <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.AutoLaserControlSignals.Frequency">AutoLaserControlSignals.Frequency</see>, value is frequency (Hz). <br/>
            If <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.AutoLaserControlSignals.SpotDistance">AutoLaserControlSignals.SpotDistance</see>, not used. <br/>
            </remarks>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcAutoLaserControl.CtlAlcByPositionTable(System.Collections.Generic.KeyValuePair{System.Double,System.Double}[])">
            <summary>
            Position dependent ALC(Automatic Laser Control) table
            <code>
                                      ████████████                        
                               ██████░░░░░░░░░░░░██████                  
                           ████░░░░░░░░░░░░░░░░░░░░░░░░████              
                         ██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██            
                       ██░░░░░░      ░░░░░░░░░░░░░░░░░░░░░░░░██          
                     ██░░░░░░          ░░░░░░░░░░░░░░░░░░░░░░░░██        
                   ██░░░░░░░░          ░░░░░░░░░░░░░░░░░░░░░░▒▒░░██      
                 ██░░░░░░░░░░          ░░░░░░░░░░░░░░░░░░░░░░░░▒▒░░██    
                 ██░░░░░░░░░░░░      ░░░░░░░░░░░░░░░░░░░░░░░░░░▒▒░░██    
               ██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░▒▒▒▒░░██  
               ██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░.░░░░░░░░░░░░░░▒▒▒▒░░██  
               ██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░/░░░░░░░░░░░░░░░▒▒▒▒░░██  
             ██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░/░░░░░░░░░░░░░░░░▒▒▒▒▒▒░░██
             ██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░Radius░░░░░░░░░░░░▒▒▒▒▒▒░░██
             ██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░/░░░░░░░░░░░░░░░░▒▒▒▒▒▒▒▒░░██
             ██░░░░░░░░░░░░░░░░░░░░░░░░░░░░+░░░░░░░░░░░░░░░░░▒▒▒▒▒▒▒▒░░██
             ██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░▒▒▒▒▒▒▒▒▒▒░░██
             ██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░▒▒▒▒▒▒▒▒▒▒░░██
               ██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░▒▒▒▒▒▒▒▒▒▒░░██  
               ██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░▒▒▒▒▒▒▒▒▒▒▒▒░░██  
               ██░░▒▒░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒░░██  
                 ██░░▒▒▒▒░░░░░░░░░░░░░░░░░░░░░░░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░░██    
                 ██░░▒▒▒▒▒▒▒▒▒▒░░░░░░░░░░░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░░██    
                   ██░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░░██      
                     ██░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░░██        
                       ██░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░░██          
                         ██░░░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░░░░██            
                           ████░░░░░░▒▒▒▒▒▒▒▒▒▒▒▒░░░░░░████              
                               ██████░░░░░░░░░░░░██████                  
                                     ████████████
            
            // distance(or radius) (mm), scale (0~4)
            var kvList = new List&lt;KeyValuePair&lt;double, double&gt;&gt;();
            kvList.Add(new KeyValuePair&lt;double, double&gt;(5, 0.9));
            kvList.Add(new KeyValuePair&lt;double, double&gt;(10, 1));
            kvList.Add(new KeyValuePair&lt;double, double&gt;(15, 1.1));
            rtcAlc.CtlAlcByPositionTable(kvList.ToArray());
            //or clear
            rtcAlc.CtlAlcByPositionTable(null);
            </code>
            </summary>
            <remarks>
            Radius is distance from origin of scanner to target location. <br/>
            Should be called when <see cref="M:SpiralLab.Sirius2.Scanner.Rtc.IRtc.CtlGetStatus(SpiralLab.Sirius2.Scanner.Rtc.RtcStatus)">CtlGetStatus(RtcStatus.NotBusy)</see>  <br/>
            </remarks>
            <param name="kvList">Array of radius(mm), scale(0~4)</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcAutoLaserControl.CtlAlc``1(SpiralLab.Sirius2.Scanner.Rtc.AutoLaserControlSignals,SpiralLab.Sirius2.Scanner.Rtc.AutoLaserControlModes,``0,``0,``0)">
            <summary>
            Velocity dependent ALC(Automatic Laser Control)
            <code>
            var rtcAlc = rtc as IRtcAutoLaserControl;
            
            // Set velocity with analog1: 5V (100%: 5V, Min: 4V, Max: 6V)
            rtcAlc.CtlAlc&lt;double&gt;(AutoLaserControlSignals.Analog1, AutoLaserControlModes.SetVelocity, 5, 4, 6);
            // or Actual velocity with frequency: 50KHz (100%: 50KHz, Min: 40KHz, Max: 60KHz)
            rtcAlc.CtlAlc&lt;double&gt;(AutoLaserControlSignals.Frequency, AutoLaserControlModes.ActualVelocity, 50 * 1000, 40 * 1000, 60 * 1000);
            // or Encoder speed with pulse width: 50usec (100%: 50usec, Min: 25usecKHz, Max: 75KHz)
            rtcAlc.CtlAlc&lt;double&gt;(AutoLaserControlSignals.PulseWidth, AutoLaserControlModes.EncoderSpeed, 50, 25, 75);
            // or Spot distance control (100%: 0.1mm) (RTC6 + SCANahead only)
            double distance = 0.1; 
            rtcAlc.CtlAlc&lt;double&gt;(AutoLaserControlSignals.SpotDistance, AutoLaserControlModes.ActualVelocityWithSCANAhead, distance);
            </code>
            </summary>
            <typeparam name="T"><c>uint</c> or <c>double</c></typeparam>
            <param name="ctrl"><c>AutoLaserControlSignal</c></param>
            <param name="mode"><c>AutoLaserControlMode</c></param>
            <param name="percentage100">100% value</param>
            <param name="min">Min value</param>
            <param name="max">Max value</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcAutoLaserControl.ListAutoLaserControl``1(``0,``0,``0)">
            <summary>
            List velocity dependent ALC(Automatic Laser Control)
            </summary>
            <remarks>
            See also. <see cref="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcAutoLaserControl.CtlAlc``1(SpiralLab.Sirius2.Scanner.Rtc.AutoLaserControlSignals,SpiralLab.Sirius2.Scanner.Rtc.AutoLaserControlModes,``0,``0,``0)"><c>CtlAlc</c></see> function. <br/>
            </remarks>
            <typeparam name="T"><c>uint</c> or <c>double</c></typeparam>
            <param name="percentage100">100% value</param>
            <param name="min">Min value</param>
            <param name="max">Max value</param>
            <returns>Success or failed<br/>If return failed, marker would be stopped(or aborted) immediately. <br/></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcAutoLaserControl.ListAlcByVectorBegin``1(SpiralLab.Sirius2.Scanner.Rtc.AutoLaserControlSignals,``0)">
            <summary>
            List defined-vector by ALC(Automatic Laser Control) control begin.
            <code>
            var rtcAlc = rtc as IRtcAutoLaserControl;
            float x1 = 0;
            float y1 = 0;
            float x2 = 10;
            float y2 = 0;
            rtc.ListBegin();
            rtcAlc.ListAlcByVectorBegin&lt;double&gt;(AutoLaserControlSignals.Analog1, 5); // 5V
            rtc.ListJumpTo(new Vector2(x1, y1), 0.5); // 5 * 0.5 = 2.5V
            rtc.ListMarkTo(new Vector2(x2, y2), 1.5); // 5 * 1.5 = 7.5V
            rtcAlc.ListAlcByVectorEnd();
            rtc.ListJumpTo(Vector2.Zero);
            rtc.ListEnd();
            rtc.ListExecute(true);
            </code>
            </summary>
            <typeparam name="T"><c>uint</c> or <c>double</c></typeparam>
            <param name="ctrl"><c>AutoLaserControlSignal</c></param>
            <param name="startingValue">Starting value of <c>AutoLaserControlSignal</c></param>
            <returns>Success or failed<br/>If return failed, marker would be stopped(or aborted) immediately. <br/></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcAutoLaserControl.ListAlcByVectorEnd">
            <summary>
            List defined-vector by ALC(Automatic Laser Control) end
            </summary>
            <returns>Success or failed<br/>If return failed, marker would be stopped(or aborted) immediately. <br/></returns>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.CharacterSets">
            <summary>
            Character sets (aka. Font family)
            </summary>
            <remarks>
            Character sets are registered(or downloaded) into RTC buffer memory (list3). <br/>
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.CharacterSets.Unknown">
            <summary>
            Unknown(or not set)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.CharacterSets._0">
            <summary>
            0
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.CharacterSets._1">
            <summary>
            1
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.CharacterSets._2">
            <summary>
            2
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.CharacterSets._3">
            <summary>
            3
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.DateFormats">
            <summary>
            Date formats
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.DateFormats.Year2Digits">
            <summary>
            Year (2 Digits)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.DateFormats.Day">
            <summary>
            Day
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.DateFormats.Year4Digits">
            <summary>
            Year (4 Digits)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.DateFormats.Month">
            <summary>
            Month
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.TimeFormats">
            <summary>
            Time formats
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.TimeFormats.Hours24">
            <summary>
            Hours (24)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.TimeFormats.Minutes">
            <summary>
            Minutes
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.TimeFormats.Seconds">
            <summary>
            Seconds
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.TimeFormats.Hours12">
            <summary>
            Hours (12)
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.SerialNoFormats">
            <summary>
            Serialno formats
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.SerialNoFormats.LeadingWithZero">
            <summary>
            Leading with zero (left aligned)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.SerialNoFormats.NoLeadingAndLeftAligned">
            <summary>
            No leading (left aligned)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.SerialNoFormats.LeadingWithBlank">
            <summary>
            Leading with blank (right aligned)
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.IRtcCharacterSet">
            <summary>
            IRtcCharacterSet interface
            </summary>
            <remarks>
            Used with <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.ListTypes.Single">ListTypes.Single</see> only. <br/>
            Used RTC list3 buffer. <br/>
            Above RTC5. <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.IRtcCharacterSet.MaxCharacterSetCount">
            <summary>
            Max. character set counts
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.IRtcCharacterSet.IsDateTimeOffset">
            <summary>
            Enable(or disable) DateTime offset
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.IRtcCharacterSet.DateTimeOffsetDays">
            <summary>
            Offset +- days 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.IRtcCharacterSet.DateTimeOffsetHours">
            <summary>
            Offset +- hours 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.IRtcCharacterSet.DateTimeOffsetMinutes">
            <summary>
            Offset +- minutes
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.IRtcCharacterSet.DateTimeOffsetSeconds">
            <summary>
            Offset +- seconds
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.IRtcCharacterSet.DateTimeOrigin">
            <summary>
            Origin datetime
            </summary>
            <remarks>
            Reset <c>DateTimeOrigin</c> as current datetime whenever <see cref="M:SpiralLab.Sirius2.Scanner.Rtc.IRtc.ListBegin(SpiralLab.Sirius2.Scanner.Rtc.ListTypes)">ListBegin</see> has called by automatically. 
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.IRtcCharacterSet.SerialStartNo">
            <summary>
            Starting serial no
            </summary>
            <remarks>
            Default: 0 <br/>
            </remarks>   
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.IRtcCharacterSet.SerialIncrementStep">
            <summary>
            Increment step of serial no
            </summary>
            <remarks>
            Default: 1 <br/>
            </remarks>       
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.IRtcCharacterSet.SerialCurrentNo">
            <summary>
            Current(or next target) serial no
            </summary>
            <remarks>
            Default: 0 <br/>
            Current serial number will be marked at next mark. <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.IRtcCharacterSet.SerialMaxNo">
            <summary>
            Max serial no
            </summary>
            <remarks>
            Default: 0 <br/>
            Deactivated if value is 0 <br/>
            After mark serial no and has reached to <see cref="P:SpiralLab.Sirius2.Scanner.Rtc.IRtcCharacterSet.SerialMaxNo">SerialMaxNo</see>, it will be reset as <see cref="P:SpiralLab.Sirius2.Scanner.Rtc.IRtcCharacterSet.SerialStartNo">SerialStartNo</see> with <see cref="P:SpiralLab.Sirius2.Scanner.Rtc.IRtcCharacterSet.SerialIncrementStep">SerialIncrementStep</see>. <br/>
            </remarks>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcCharacterSet.CtlCharacterSetBegin(SpiralLab.Sirius2.Scanner.Rtc.CharacterSets)">
            <summary>
            Begin register(or download) character set into RTC 
            <code>
            var rtcCharSet = rtc as IRtcCharacterSet;
            rtcCharSet.CtlCharacterSetBegin(CharacterSets._0) 
            rtcCharSet.CtlCharacterBegin('0'); // '0'
            rtc.ListJumpTo(new Vector2(5, 10));
            rtc.ListMarkTo(new Vector2(5 + 0, 10 - 5));
            rtc.ListMarkTo(new Vector2(5 + 0 + 0, 10 - 5 - 5));
            rtc.ListMarkTo(new Vector2(5 + 0 + 0 - 5, 10 - 5 - 5));
            rtc.ListMarkTo(new Vector2(5 + 0 + 0 - 5, 10 - 5 - 5 + 5));
            rtc.ListMarkTo(new Vector2(5 + 0 + 0 - 5 + 0, 10 - 5 - 5 + 5 + 5));
            rtc.ListMarkTo(new Vector2(5 + 0 + 0 - 5 + 0 + 5, 10 - 5 - 5 + 5 + 5 + 0));
            rtc.ListJumpTo(new Vector2(5 + 0 + 0 - 5 + 0 + 5 + 5, 10 - 5 - 5 + 5 + 5 + 0 - 10));
            rtcCharSet.CtlCharacterEnd();
            rtcCharSet.CtlCharacterBegin('1'); // '1'
            rtc.ListJumpTo(new Vector2(5, 0));
            rtc.ListMarkTo(new Vector2(5 + 0, 0 + 10));
            rtc.ListJumpTo(new Vector2(5 + 0 + 5, 0 + 10 - 10));
            rtcCharSet.CtlCharacterEnd();
            //Download more font data 
            // for 2,3,4, ...
            // for A,B,C, ...
            // for a,b,c ...
            // for !,@,#, ...
            rtcCharSet.CtlCharacterBegin(' '); // ' '
            rtc.ListJumpTo(new Vector2(5, 0));
            rtcCharSet.CtlCharacterEnd();
            rtcCharSet.CtlCharacterSetEnd();
            </code>
            <remarks>
            Used with internal List3 buffer. <br/>
            RTC5: Max buffer size <c>RTC5_LIST3_BUFFER_SIZE</c><br/>
            RTC6: Max buffer size <c>RTC6_LIST3_BUFFER_SIZE</c><br/>
            </remarks>
            </summary>
            <param name="characterSet"><c>CharacterSets</c></param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcCharacterSet.CtlCharacterBegin(System.UInt32)">
            <summary>
            Begin register(or download) single glyph(or character) into RTC 
            </summary>
            <param name="asciiCode">Code value (ASCII: 0~255, Max: ~1024)</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcCharacterSet.CtlCharacterEnd">
            <summary>
            End register(or download) single glyph(or character) into RTC 
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcCharacterSet.CtlCharacterSetEnd">
            <summary>
            End register(or download) character set 
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcCharacterSet.CtlCharacterSetIsExist(System.UInt32,SpiralLab.Sirius2.Scanner.Rtc.CharacterSets)">
            <summary>
            Check single glyph(or character) is exist at character set or not
            </summary>
            <param name="asciiCode">Code value (ASCII: 0~255, Max: ~1024)</param>
            <param name="characterSet"><c>CharacterSet</c></param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcCharacterSet.CtlCharacterSetClear(SpiralLab.Sirius2.Scanner.Rtc.CharacterSets)">
            <summary>
            Clear(or unregister) specific character set (whole characters) at RTC 
            </summary>
            <param name="characterSet"><c>CharacterSet</c></param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcCharacterSet.CtlSerialNoReset(System.UInt32,System.UInt32)">
            <summary>
            Reset serial no
            </summary>
            <param name="serialNo">Start serial no</param>
            <param name="incrementStep">Increment step<br/>Allowed range from 0~9999<br/></param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcCharacterSet.ListText(System.String,SpiralLab.Sirius2.Scanner.Rtc.CharacterSets)">
            <summary>
            List mark text from character set
            <code>
            var rtcCharSet = rtc as IRtcCharacterSet;
            rtc.ListBegin();
            rtc.ListJumpTo(new Vector2(-10, 0));
            rtcCharSet.ListText("123 456 ABC DEF", CharacterSets._0);
            rtc.ListEnd();
            rtc.ListExecute(true);
            </code>
            </summary>
            <remarks>
            <c>IRtc.MatrixStack</c> is not applied. <br/>
            When registering character set, final transformed positions should be calculated and downloaded from <see cref="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcCharacterSet.CtlCharacterBegin(System.UInt32)">CtlCharacterBegin</see>  ~ <see cref="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcCharacterSet.CtlCharacterEnd">CtlCharacterEnd</see>. <br/>
            </remarks>
            <param name="text">text</param>
            <param name="characterSet"><c>CharacterSets</c></param>
            <returns>Success or failed<br/>If return failed, marker would be stopped(or aborted) immediately. <br/></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcCharacterSet.ListDate(SpiralLab.Sirius2.Scanner.Rtc.DateFormats,System.Boolean,SpiralLab.Sirius2.Scanner.Rtc.CharacterSets)">
            <summary>
            List mark date from character set
            <code>
            var rtcCharSet = rtc as IRtcCharacterSet;
            rtc.ListBegin();
            rtc.ListJumpTo(new Vector2(-10, 0));
            rtcCharSet.ListDate(DateFormats.MonthDigit, true, CharacterSets._0);
            rtc.ListJumpTo(new Vector2(10, 0));
            rtcCharSet.ListDate(DateFormats.Day, true, CharacterSets._0);
            rtc.ListEnd();
            rtc.ListExecute(true);
            </code>
            </summary>
            <remarks>
            <c>IRtc.MatrixStack</c> is not applied. <br/>
            When registering character set, final transformed positions should be calculated and downloaded from <see cref="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcCharacterSet.CtlCharacterBegin(System.UInt32)">CtlCharacterBegin</see>  ~ <see cref="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcCharacterSet.CtlCharacterEnd">CtlCharacterEnd</see>. <br/>
            </remarks>
            <param name="dateFormat"><c>DateFormats</c></param>
            <param name="leadingWithZero">Leading with 0 or rnot</param>
            <param name="characterSet"><c>CharacterSets</c></param>
            <returns>Success or failed<br/>If return failed, marker would be stopped(or aborted) immediately. <br/></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcCharacterSet.ListTime(SpiralLab.Sirius2.Scanner.Rtc.TimeFormats,System.Boolean,SpiralLab.Sirius2.Scanner.Rtc.CharacterSets)">
            <summary>
            List mark time from character set
            <code>
            var rtcCharSet = rtc as IRtcCharacterSet;
            rtc.ListBegin();
            rtc.ListJumpTo(new Vector2(-10, 0));
            rtcCharSet.ListTime(TimeFormats.Hours24, true, CharacterSets._0);
            rtc.ListJumpTo(new Vector2(10, 0));
            rtcCharSet.ListTime(TimeFormats.Minutes, true, CharacterSets._0);
            rtc.ListJumpTo(new Vector2(30, 0));
            rtcCharSet.ListTime(TimeFormats.Seconds, true, CharacterSets._0);
            rtc.ListEnd();
            rtc.ListExecute(true);
            </code>
            </summary>
            <remarks>
            <c>IRtc.MatrixStack</c> is not applied. <br/>
            When registering character set, final transformed positions should be calculated and downloaded from <see cref="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcCharacterSet.CtlCharacterBegin(System.UInt32)">CtlCharacterBegin</see>  ~ <see cref="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcCharacterSet.CtlCharacterEnd">CtlCharacterEnd</see>. <br/>
            </remarks>
            <param name="timeFormat"><c>TimeFormatㄴ</c></param>
            <param name="leadingWithZero">Leading with 0 or not</param>
            <param name="characterSet"><c>CharacterSets</c></param>
            <returns>Success or failed<br/>If return failed, marker would be stopped(or aborted) immediately. <br/></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcCharacterSet.ListSerialNo(System.UInt32,SpiralLab.Sirius2.Scanner.Rtc.SerialNoFormats,SpiralLab.Sirius2.Scanner.Rtc.CharacterSets)">
            <summary>
            List mark serial no
            <code>
            var rtcCharSet = rtc as IRtcCharacterSet;
            rtcCharSet.CtlSerialNoReset(1000, 1);
            ...
            rtc.ListBegin();
            rtc.ListJumpTo(new Vector2(-10, 0));
            rtcCharSet.ListSerialNo(4, SerialFormat.LeadingWithZero, CharacterSets._0);
            rtc.ListEnd();
            rtc.ListExecute(true);
            </code>
            </summary>
            <remarks>
            <see cref="P:SpiralLab.Sirius2.Scanner.Rtc.IRtc.MatrixStack">IRtc.MatrixStack</see> is not applied. <br/>
            When registering character set, final transformed positions should be calculated and downloaded from <see cref="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcCharacterSet.CtlCharacterBegin(System.UInt32)">CtlCharacterBegin</see>  ~ <see cref="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcCharacterSet.CtlCharacterEnd">CtlCharacterEnd</see>. <br/>
            </remarks>
            <param name="numOfDigits">Num of digits<br/>Max digits: 12<br/></param>
            <param name="serialFormat"><c>SerialFormats</c></param>
            <param name="characterSet"><c>CharacterSets</c></param>
            <returns>Success or failed<br/>If return failed, marker would be stopped(or aborted) immediately. <br/></returns>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.CorrectionData2D">
            <summary>
            Correction data for 2D
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.CorrectionData2D.Reference">
            <summary>
            Reference x, y position (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.CorrectionData2D.Measured">
            <summary>
            Measured x, y position (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.CorrectionData2D.Delta">
            <summary>
            Error x, y deviation (mm)
            </summary>
            <remarks>
            = <c>Measured</c> - <c>Reference</c>
            </remarks>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.CorrectionData2D.#ctor(System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
            Constructor
            </summary>
            <param name="reference">Reference x, y position (mm)</param>
            <param name="measured">Measured x, y position (mm)</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.CorrectionData2D.ToReferenceString">
            <summary>
            Reference to string
            </summary>
            <returns>Represent to string</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.CorrectionData2D.ToMeasuredString">
            <summary>
            Measured to string
            </summary>
            <returns>Represent to string</returns>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.IRtcCorrection2D">
            <summary>
            Correction 2D interface
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius2.Scanner.Rtc.IRtcCorrection2D.OnConverted">
            <summary>
            Event for convert result (with success or failed result and message)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.IRtcCorrection2D.Rows">
            <summary>
            Rows (Odd: 3,5,7,...)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.IRtcCorrection2D.Cols">
            <summary>
            Columns (Odd: 3,5,7,...)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.IRtcCorrection2D.KFactor">
            <summary>
            K-Factor (bits/mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.IRtcCorrection2D.SourceCorrectionFile">
            <summary>
            Source(Input) correction file
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.IRtcCorrection2D.TargetCorrectionFile">
            <summary>
            Target(Output) correction file
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.IRtcCorrection2D.Data">
            <summary>
            2D array of CorrectionData2D (Z = 0 plane)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.IRtcCorrection2D.ResultMessage">
            <summary>
            Result messages
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcCorrection2D.AddAbsolute(System.Int32,System.Int32,System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
            Absoulte X, Y data from left/top to right/top order
            <code>
            Index No [Row,Col]
            1 [R:0,C:0] 2 [R:0,C:1] 3 [R:0,C:2]
            4 [R:1,C:0] 5 [R:1,C:1] 6 [R:1,C:2]
            7 [R:2,C:0] 8 [R:2,C:1] 9 [R:2,C:2]
            </code>
            </summary>
            <param name="row">Row</param>
            <param name="col">Col</param>
            <param name="reference">Reference x, y position (mm)</param>
            <param name="measured">Measured x, y position (mm)</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcCorrection2D.AddRelative(System.Int32,System.Int32,System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
            Relative dX, dY data from left/top to right/top order
            <code>
            Index No [Row,Col] 
            1 [R:0,C:0] 2 [R:0,C:1] 3 [R:0,C:2]
            4 [R:1,C:0] 5 [R:1,C:1] 6 [R:1,C:2]
            7 [R:2,C:0] 8 [R:2,C:1] 9 [R:2,C:2]
            </code>
            </summary>
            <param name="row">Row</param>
            <param name="col">Col</param>
            <param name="reference">Reference x, y position (mm)</param>
            <param name="error">Error dx, dy position (mm)</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcCorrection2D.Clear">
            <summary>
            Clear data
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcCorrection2D.Convert">
            <summary>
            Convert
            </summary>
            <remarks>
            Notify <see cref="E:SpiralLab.Sirius2.Scanner.Rtc.IRtcCorrection2D.OnConverted">OnConverted</see> event. <br/>
            </remarks>
            <returns>Success or failed</returns>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.CorrectionData3D">
            <summary>
            Correction data for 3D
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.CorrectionData3D.Reference">
            <summary>
            Reference x, y, z position (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.CorrectionData3D.Measured">
            <summary>
            Measured x, y, z position (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.CorrectionData3D.Delta">
            <summary>
            Error x, y, z deviation (mm)
            <para>
            = <c>Measured</c> - <c>Reference</c>
            </para>
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.CorrectionData3D.#ctor(System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            Constructor
            </summary>
            <param name="reference"> Reference x, y position (mm)</param>
            <param name="measured">Measured x, y position (mm)</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.CorrectionData3D.ToReferenceString">
            <summary>
            Reference to string
            </summary>
             <returns>Represent to string</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.CorrectionData3D.ToMeasuredString">
            <summary>
            Measured to string
            </summary>
            <returns>Represent to string</returns>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.Planes">
            <summary>
            Planes for correction 3D
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Planes.All">
            <summary>
            Upper and Lower plane
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Planes.Upper">
            <summary>
            Upper plane
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.Planes.Lower">
            <summary>
            Lower plane
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.IRtcCorrection3D">
            <summary>
            Correction 3D interface
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius2.Scanner.Rtc.IRtcCorrection3D.OnConverted">
            <summary>
            Event for convert result (with success or failed result and message)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.IRtcCorrection3D.Rows">
            <summary>
            Rows (Odd: 3,5,7,...)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.IRtcCorrection3D.Cols">
            <summary>
            Columns Rows (Odd: 3,5,7,...)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.IRtcCorrection3D.KFactor">
            <summary>
            K-Factor (bits/mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.IRtcCorrection3D.SourceCorrectionFile">
            <summary>
            Source(Input) correction file
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.IRtcCorrection3D.TargetCorrectionFile">
            <summary>
            Target(Output) correction file
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.IRtcCorrection3D.ZLower">
            <summary>
            Z lower plane (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.IRtcCorrection3D.ZUpper">
            <summary>
            Z upper plane (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.IRtcCorrection3D.DataLower">
            <summary>
            2D array of CorrectionData3D (Z lower plane)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.IRtcCorrection3D.DataUpper">
            <summary>
            2D array of CorrectionData3D (Z upper plane)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.IRtcCorrection3D.ResultMessage">
            <summary>
            Result messages
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcCorrection3D.AddAbsolute(System.Int32,System.Int32,System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            Absoulte X, Y data from left/top to right/top order
            <code>
            Index No [Row,Col]
            1 [R:0,C:0] 2 [R:0,C:1] 3 [R:0,C:2]
            4 [R:1,C:0] 5 [R:1,C:1] 6 [R:1,C:2]
            7 [R:2,C:0] 8 [R:2,C:1] 9 [R:2,C:2]
            </code>
            </summary>
            <param name="row">Row</param>
            <param name="col">Col</param>
            <param name="reference">Reference x, y position (mm)</param>
            <param name="measured">Measured x, y position (mm)</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcCorrection3D.AddRelative(System.Int32,System.Int32,System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            Relative dX, dY data from left/top to right/top order
            <code>
            Index No [Row,Col]
            1 [R:0,C:0] 2 [R:0,C:1] 3 [R:0,C:2]
            4 [R:1,C:0] 5 [R:1,C:1] 6 [R:1,C:2]
            7 [R:2,C:0] 8 [R:2,C:1] 9 [R:2,C:2]
            </code>
            </summary>
            <param name="row">Row</param>
            <param name="col">Col</param>
            <param name="reference">Reference x, y position (mm)</param>
            <param name="error">Error dx, dy position (mm)</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcCorrection3D.Clear(SpiralLab.Sirius2.Scanner.Rtc.Planes)">
            <summary>
            Clear data
            </summary>
            <param name="plane">Target plane</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcCorrection3D.Convert">
            <summary>
            Convert
            </summary>
            <remarks>
            Notify <see cref="E:SpiralLab.Sirius2.Scanner.Rtc.IRtcCorrection3D.OnConverted">OnConverted</see> event. <br/>
            </remarks>
            <returns>Success or failed</returns>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.CorrectionFileHeaderParams">
            <summary>
            Correction File Header Parameters
            </summary>
            <remarks>
            Above RTC5 (.ct5) <br/>
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.CorrectionFileHeaderParams.CorrectionTable">
            <summary>
            2D/3D
            <para>0 = 2D</para>
            <para>1 = 3D</para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.CorrectionFileHeaderParams.KFactor">
            <summary>
            Calibration factor Kxy [bit/mm]
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.CorrectionFileHeaderParams.FocalLengthOrWorkingDistance">
            <summary>
            <remarks>
            For a configuration with a scan objective: the effective focal length of the objective [mm]. <br/>
            For a configuration without a scan objective: the working distance A [mm]. <br/>
            A = distance from the optical axis of the incident laser beam at the first deflection mirror to the image plane.<br/>
            </remarks>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.CorrectionFileHeaderParams.StretchFactorX">
            <summary>
            Stretch factor for the x direction. <br/>
            Compensates the pyramid-shaped image field change which exists in the z direction of 3D markings.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.CorrectionFileHeaderParams.StretchFactorY">
            <summary>
            Stretch factor for the y direction. <br/>
            Compensates the pyramid-shaped image field change which exists in the z direction of 3D markings.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.CorrectionFileHeaderParams.CoefficientA">
            <summary>
            Bits ! 
            Coefficient A of the polynomial for z axis control, offset part, ±26 Bit.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.CorrectionFileHeaderParams.CoefficientB">
            <summary>
            Bits ! 
            Coefficient B of the polynomial for z axis control, linear part, ±11 Bit.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.CorrectionFileHeaderParams.CoefficientC">
            <summary>
            Bits ! 
            Coefficient C of the polynomial for z axis control, square part, ±4 Bit.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.CorrectionFileHeaderParams.NumOfCorrectionFile">
            <summary>
            <para>
            Number of the correction file. <br/>
            With correction files supplied by SCANLAB, the parameter corresponds to the number in the file name <br/>
            (for example, 145 for D2_145.ct5 or D3_145.ct5)
            </para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.CorrectionFileHeaderParams.DifferentiationFThetaObjective">
            <summary>
            Differentiation between correction with or without an F-Theta objective.
            <remarks>
            The following applies: <br/>
            Parameter = 10 * PObj + PTyp with<br/>
            – PObj = 0: Correction without F-Theta objective<br/>
              PObj = 1: Correction with F-Theta objective<br/>
            – if correction with F-Theta objective:<br/>
              PTyp = 0.0: without distortion data<br/>
              PTyp = 1.0: with F-Theta’s F-stop progression condition<br/>
              PTyp = 2.0: with image height table<br/>
            </remarks>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.CorrectionFileHeaderParams.IndicatorFortheSourceOfTheCorrectionFile">
            <summary>
            Indicator for the source of the correction file.
            <remarks>
            The following applies: Parameter = 1000 * POrig + PVer with<br/>
            • POrig = 10000: Originally calculated file<br/>
              POrig = 20000: converted from ctb file<br/>
              POrig = 30000: reconstructed from txt file<br/>
              By manipulating a correction file using correction programs available from SCANLAB, POrig is increased by 1 in each case.<br/>
               – PVer = Version number of the program used to create the correction file<br/>
            </remarks>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.CorrectionFileHeaderParams.InverseTable">
            <summary>
            Information about the inverse table.
            <remarks>
            The following applies: Parameter = PExist + 2 × PCalc with<br/>
            • PExist = 1.0: valid inverse table is present<br/>
              PExist = 0.0: no valid inverse table present<br/>
            • If valid inverse table is present:<br/>
              PCalc = 0: inverse table calculated ab initio<br/>
              PCalc = 1: inverse table numerically calculated<br/>
            </remarks>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.CorrectionFileHeaderParams.AngleCalibration">
            <summary>
            Angle calibration of the scan system.
            <para>
            Mechanical angle deflection in [± °] at 96% of the maximum control.
            </para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.CorrectionFileHeaderParams.ScanHeadGeometry">
            <summary>
            Code for the scan head geometry used for the calculation (for internal use only), for example,
            <remarks>
            • = –1.0: unknown geometry (for example, for a table converted from a ctb file)<br/>
            • = 0.0: standard geometry<br/>
            </remarks>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.CorrectionFileHeaderParams.ProtectiveWindow">
            <summary>
            Indicator for whether an additional protective window has been taken into account.
            <remarks>
            The following applies: Parameter = 1,000,000 × PT + 1,000 × PI with<br/>
            • PT = Protective window thickness in mm (max. 2 decimal places)<br/>
            • PI = Refraction index(max. 3 decimal places)<br/>
            Example: The value 3,521,450.0 corresponds to a protective window thickness of 3.52 mm and a refraction index of 1.450.<br/>
            </remarks>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.CorrectionFileHeaderParams.ImageFieldSizeLimited">
            <summary>
            Indicator for whether the image field size has been limited in the correction file.
            <remarks>
            • = 0.0: without field size limit<br/>
            • = 2.0: with field size limit<br/>
            </remarks>
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.IRtcMarkingInfo">
            <summary>
            Marking Info 
            </summary>
            <remarks>
            RTC5: Used with <see cref="T:SpiralLab.Sirius2.Scanner.Rtc.Rtc5MarkingInfo">Rtc5MarkingInfo</see> <br/>
            RTC6: Used with <see cref="T:SpiralLab.Sirius2.Scanner.Rtc.Rtc6MarkingInfo">Rtc6MarkingInfo</see> <br/>
            </remarks>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcMarkingInfo.ToUInt">
            <summary>
            32 bits
            </summary>
            <returns>uint</returns>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.IRtcExtension">
            <summary>
            IRtcExtension interface
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.IRtcExtension.InitLaser12SignalLevel">
            <summary>
            Signal level Laser1(Pin1), Laser2(Pin9) at LASER Port 
            </summary>
            <remarks>
            Default: <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.RtcSignalLevels.ActiveHigh">RtcSignalLevels.ActiveHigh</see>. <br/>
            Assign signal level before <see cref="M:SpiralLab.Sirius2.Scanner.Rtc.IRtc.Initialize">IRtc.Initialize</see> has called at first. <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.IRtcExtension.InitLaserOnSignalLevel">
            <summary>
            Signal level LaserOn(Pin2) at LASER Port 
            </summary>
            <remarks>
            Default: <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.RtcSignalLevels.ActiveHigh">RtcSignalLevels.ActiveHigh</see>. <br/>
            Assign signal level before <see cref="M:SpiralLab.Sirius2.Scanner.Rtc.IRtc.Initialize">IRtc.Initialize</see> has called at first. <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.IRtcExtension.QSwitchDelay">
            <summary>
            Q switch delay (usec)
            </summary>
            <remarks>
            <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.LaserModes.Yag1">LaserModes.Yag1</see>: 0 <br/>
            <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.LaserModes.Yag2">LaserModes.Yag2</see>: by FPK value <br/>
            <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.LaserModes.Yag3">LaserModes.Yag3</see>: 10 usec fixed <br/>
            <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.LaserModes.Yag5">LaserModes.Yag5</see>: by this value <br/>
            </remarks>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcExtension.CtlStandBy(System.Double,System.Double)">
            <summary>
            Stand by frequency and pulse width
            </summary>
            <remarks>
            Output stand-by signal by LASER1 pin. <br/>
            </remarks>
            <param name="frequency">Stanby frequency (Hz)<br/>Min. time resolution: 1/128(= 0.0078125) usec <br/></param>
            <param name="pulseWidth">Stanby pulse width (usec)<br/>Min. time resolution: 1/64(= 0.01562) usec <br/></param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcExtension.CtlFirstPulseKiller(System.Double)">
            <summary>
            First pulse killer (usec)
            </summary>
            <remarks>
            Output stand-by signal by LASER2 pin. <br/>
            </remarks>
            <param name="usec">Time (usec)<br/>Min. time resolution: 1/64(= 0.01562) usec <br/></param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcExtension.CtlQSwitchDelay(System.Double)">
            <summary>
            Q switch delay (usec)
            </summary>
            <remarks>
            <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.LaserModes.Co2">LaserModes.Co2</see>: not used <br/>
            <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.LaserModes.Yag1">LaserModes.Yag1</see>: 0 <br/>
            <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.LaserModes.Yag2">LaserModes.Yag2</see>: by FPK value <br/>
            <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.LaserModes.Yag3">LaserModes.Yag3</see>: 10 usec fixed <br/>
            <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.LaserModes.Mode4">LaserModes.Mode4</see>: Not used <br/>
            <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.LaserModes.Yag5">LaserModes.Yag5</see>: by this value <br/>
            </remarks>
            <param name="usec">Time (usec)<br/> Min. time resolution: 1/64(= 0.01562) usec <br/></param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcExtension.CtlLaserControlSignal(SpiralLab.Sirius2.Scanner.Rtc.ILaserControlSignal)">
            <summary>
            Laser control signal by <c>ILaserControlSignal</c>
            </summary>
            <remarks>
            RTC5: <see cref="T:SpiralLab.Sirius2.Scanner.Rtc.Rtc5LaserControlSignal">Rtc5LaserControlSignal</see> <br/>
            RTC6: <see cref="T:SpiralLab.Sirius2.Scanner.Rtc.Rtc6LaserControlSignal">Rtc6LaserControlSignal</see> <br/>
            Used with above RTC5 <br/>
            </remarks>
            <param name="laserControlSignal"><c>ILaserControlSignal</c></param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcExtension.CtlExternalControl(SpiralLab.Sirius2.Scanner.Rtc.IRtcExternalControlMode,System.UInt32)">
            <summary>
            External control by <c>IRtcExternalControlMode</c>
            </summary>
            <remarks>
            RTC5: <see cref="T:SpiralLab.Sirius2.Scanner.Rtc.Rtc5ExternalControlMode">Rtc5ExternalControlMode</see> <br/>
            RTC6: <see cref="T:SpiralLab.Sirius2.Scanner.Rtc.Rtc6ExternalControlMode">Rtc6ExternalControlMode</see> <br/>
            </remarks>
            <param name="mode"><c>IRtcExternalControlMode</c></param>
            <param name="maxStartCounts">Max /START external trigger counts (0 is unlimited)</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcExtension.CtlSimulatedExternalStart">
            <summary>
            Causes a simulated external /START trigger
            </summary>
            <remarks>
            Used with if <see cref="T:SpiralLab.Sirius2.Scanner.Rtc.Rtc5ExternalControlMode">Rtc5ExternalControlMode.DisableSimulateExtCtrl</see> is <c>True</c>. <br/>
            Used with if <see cref="T:SpiralLab.Sirius2.Scanner.Rtc.Rtc6ExternalControlMode">Rtc6ExternalControlMode.DisableSimulateExtCtrl</see> is <c>True</c>. <br/>
            </remarks>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcExtension.CtlExternalStartCounts(System.UInt32@)">
            <summary>
            Counts of external /START triggered
            </summary>
            <param name="counts">counts</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcExtension.CtlLoadedCorrectionInfo(SpiralLab.Sirius2.Scanner.Rtc.CorrectionTables,SpiralLab.Sirius2.Scanner.Rtc.CorrectionFileHeaderParams,System.Double@)">
            <summary>
            Loaded correction table information
            </summary>
            <param name="tableIndex"><c>CorrectionTableIndex</c></param>
            <param name="parameter"><c>CorrectionFileHeaderParam</c></param>
            <param name="data">Data</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcExtension.CtlCorrectionReadABC(System.String,System.Double@,System.Double@,System.Double@)">
            <summary>
            Read A,B,C coefficients from correction file
            </summary>
            <remarks>
            Zout = A + Bl + Cl² <br/>
            </remarks>
            <param name="ctFileName">Correction filename</param>
            <param name="coefA">Coeffecient A</param>
            <param name="coefB">Coeffecient B</param>
            <param name="coefC">Coeffecient C</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcExtension.CtlCorrectionWriteABC(System.String,System.Double,System.Double,System.Double)">
            <summary>
            Write A,B,C coefficients into correction file
            </summary>
            <remarks>
            Zout = A + Bl + Cl² <br/>
            </remarks>
            <param name="ctFileName">Correction filename</param>
            <param name="coefA">Coeffecient A</param>
            <param name="coefB">Coeffecient B</param>
            <param name="coefC">Coeffecient C</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcExtension.CtlMarkingInfo(SpiralLab.Sirius2.Scanner.Rtc.IRtcMarkingInfo@)">
            <summary>
            IRtcMarkingInfo
            </summary>
            <remarks>
            RTC5: <see cref="T:SpiralLab.Sirius2.Scanner.Rtc.Rtc5MarkingInfo">Rtc5MarkingInfo</see> <br/>
            RTC6: <see cref="T:SpiralLab.Sirius2.Scanner.Rtc.Rtc6MarkingInfo">Rtc6MarkingInfo</see>  <br/>
            </remarks>
            <param name="info"><c>IRtcMarkingInfo</c></param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcExtension.CtlStartStopInfo(SpiralLab.Sirius2.Scanner.Rtc.IRtcStartStopInfo@)">
            <summary>
            IRtcStartStopInfo
            </summary>
            <remarks>
            RTC5: <see cref="T:SpiralLab.Sirius2.Scanner.Rtc.Rtc5StartStopInfo">Rtc5StartStopInfo</see> <br/>
            RTC6: <see cref="T:SpiralLab.Sirius2.Scanner.Rtc.Rtc6StartStopInfo">Rtc6StartStopInfo</see> <br/>
            </remarks>
            <param name="info"><c>IRtcStartStopInfo</c></param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcExtension.CtlTrackingError(SpiralLab.Sirius2.Scanner.Rtc.ScannerHeads,System.Double,System.Double)">
            <summary>
            Compensate tracking error time
            </summary>
            <remarks>
            Above. RTC6 only
            </remarks>
            <param name="head"><c>ScannerHead</c> </param>
            <param name="xyUsec">X,Y tracking errror time (usec)<br/>Max. 2550 usec. <br/></param>
            <param name="zUsec">Z tracking error time (usec)<br/>Max. 2550 usec. <br/></param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcExtension.CtlDelayVariable(System.Boolean,System.Boolean,System.Double,System.Double)">
            <summary>
            Variable scanner delays
            </summary>
            <remarks>
            Should be called when <see cref="M:SpiralLab.Sirius2.Scanner.Rtc.IRtc.CtlGetStatus(SpiralLab.Sirius2.Scanner.Rtc.RtcStatus)">CtlGetStatus(RtcStatus.NotBusy)</see> <br/>
            </remarks>
            <param name="variableScannerPolygonDelay">Enable(or disable) variable scanner polygon delay.<br/>If enabled, scale(angle) = 1 – Cos(angle)<br/></param>
            <param name="variableScannerJumpDelay">Enable(or disable) variable scanner jump delay</param>
            <param name="scannerJumpDelayMin">Variable scanner jump delay min time (usec)</param>
            <param name="scannerJumpDelayLimitLength">Variable scanner jump delay limit length (mm)</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcExtension.CtlDelayVariablePolygonTable(System.Collections.Generic.KeyValuePair{System.Double,System.Double}[])">
            <summary>
            Variable scanner polygon delay table
            </summary>
            <remarks>
            Default: scale(°) = 1 – cosine(°) <br/>
            Polygon delay = input polygon delay * scale(°) <br/>
            Should be called when <c>CtlGetStatus(RtcStatus.NotBusy)</c> <br/>
            </remarks>
            <param name="kvList">Array of angle(0~180), scale(0~2)</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcExtension.CtlDelayVariableJumpTable(System.Collections.Generic.KeyValuePair{System.Double,System.Double}[])">
            <summary>
            Variable scanner jump delay table
            </summary>
            <remarks>
            Used with <see cref="T:SpiralLab.Sirius2.Scanner.Rtc.IRtcJumpMode">IRtcJumpMode</see> <br/>
            Should be called when <see cref="M:SpiralLab.Sirius2.Scanner.Rtc.IRtc.CtlGetStatus(SpiralLab.Sirius2.Scanner.Rtc.RtcStatus)">CtlGetStatus(RtcStatus.NotBusy)</see> <br/>
            </remarks>
            <param name="kvList">Array of distance(mm), delay(usec)</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcExtension.CtlHomePosition(System.Numerics.Vector2)">
            <summary>
            Assign home(parking) position
            </summary>
            <remarks>
            Position x,y is not applied matrix <br/>
            </remarks>
            <param name="position">X, Y (mm)</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcExtension.CtlPulseSynchronization(System.Boolean,System.Double)">
            <summary>
            Enable(or disable) pulse synchronization 
            </summary>
            <remarks>
            Above RTC6 <br/>
            LASER1 output pulses are synchnized by D.IN1 at LASER port. <br/>
            Min. pulse holding time: 80 nsec. <br/>
            Pulse rising/falling edge is configurable by <see cref="T:SpiralLab.Sirius2.Scanner.Rtc.ILaserControlSignal">ILaserControlSignal</see> bit5: <c>ExtPulseSignalRisingEdge</c>. <br/>
            </remarks>
            <param name="enable">Enable(or Disable)</param>
            <param name="delayTime">Delay time (usec). (Must be shorter than laser output period)</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcExtension.CtlListPause">
            <summary>
            Pause list execution
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcExtension.CtlListContinue">
            <summary>
            Continue list execution if paused
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcExtension.ListFirstPulseKiller(System.Double)">
            <summary>
            List first pulse killer (usec)
            </summary>
            <param name="usec">Time (usec)<br/>Min. time resolution: 1/64(= 0.01562) usec <br/></param>
            <returns>Success or failed<br/>If return failed, marker would be stopped(or aborted) immediately. <br/></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcExtension.ListQSwitchDelay(System.Double)">
            <summary>
            List Q switch delay (usec)
            </summary>
            <remarks>
            <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.LaserModes.Yag1">LaserModes.Yag1</see>: 0 <br/>
            <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.LaserModes.Yag2">LaserModes.Yag2</see>: by FPK value <br/>
            <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.LaserModes.Yag3">LaserModes.Yag3</see>: 10 usec fixed <br/>
            <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.LaserModes.Yag5">LaserModes.Yag5</see>: by this value <br/>
            </remarks>
            <param name="usec">Time (usec)<br/> Min. time resolution: 1/64(= 0.01562) usec <br/></param>
            <returns>Success or failed<br/>If return failed, marker would be stopped(or aborted) immediately. <br/></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcExtension.ListDelayVariable(System.Boolean,System.Double,System.Boolean,System.Double,System.Double)">
            <summary>
            List variable polygon, jump delays
            </summary>
            <param name="variableScannerPolygonDelay">Enable(or disable) variable scanner polygon delay.<br/>If enabled, scale(angle) = 1 – Cos(angle)</param>
            <param name="variableScannerPolygonEdgeLevel">Variable scanner polygon delay edge level (usec)</param>
            <param name="variableScannerJumpDelay">Enable(or disable) variable scanner jump delay</param>
            <param name="scannerJumpDelayMin">Variable scanner jump delay min time (usec)</param>
            <param name="scannerJumpDelayLimitLength">Variable scanner jump delay limit length (mm)</param>
            <returns>Success or failed<br/>If return failed, marker would be stopped(or aborted) immediately. <br/></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcExtension.ListWriteExtDO16If(System.UInt32,System.UInt32,System.UInt32,System.Boolean)">
            <summary>
            List write 16 bit digital ouput at EXTENSION 1 port if condition has matched (<c>ExtensionChannels</c>)
            </summary>
            <remarks>
            EXTENSION 1 port: <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.ExtensionChannels.ExtDO16">ExtensionChannels.ExtDO16</see> and <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.ExtensionChannels.ExtDI16">ExtensionChannels.ExtDI16</see> <br/>
            </remarks>
            <param name="inputHighBitMask">Input High BitMask: 1: Care, 0: Don't Care</param>
            <param name="inputLowBitMask">Input Low BitMask: 1: Care, 0: Don't Care</param>
            <param name="outputBitMask">Output BitMask: 1: Care, 0: Don't Care</param>
            <param name="onOff">Output Bit Level: 1: Set, 0: Clear</param>
            <returns>Success or failed<br/>If return failed, marker would be stopped(or aborted) immediately. <br/></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcExtension.ListReadExtDI16WaitUntil(System.UInt32,System.UInt32)">
            <summary>
            List wait until EXTENSION 1 port input condition has matched       
            </summary>
            <remarks>
            EXTENSION 1 port: <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.ExtensionChannels.ExtDO16">ExtensionChannels.ExtDO16</see> and <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.ExtensionChannels.ExtDI16">ExtensionChannels.ExtDI16</see> <br/>
            </remarks>
            <param name="inputHighBitMask">Input High BitMask: 1: Care, 0: Don't Care</param>
            <param name="inputLowBitMask">Input Low BitMask: 1: Care, 0: Don't Care</param>
            <returns>Success or failed<br/>If return failed, marker would be stopped(or aborted) immediately. <br/></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcExtension.ListRepeatCall(System.UInt32,System.UInt32)">
            <summary>
            List call/jump to begin of list (to repeat)
            </summary>
            <remarks>
            Used with <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.ListTypes.Single">ListTypes.Single</see> only <br/>
            </remarks>
            <param name="listPosition">Index of list buffer</param>
            <param name="repeats">Repeats (0: infinitely, >0: assigned value)</param>
            <returns>Success or failed<br/>If return failed, marker would be stopped(or aborted) immediately. <br/></returns>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.JumpModeFlags">
            <summary>
            RTC jump mode flags
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.JumpModeFlags.Disable">
            <summary>
            Disable
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.JumpModeFlags.EnabledButDeactivated">
            <summary>
            Enabled but deactivated
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.JumpModeFlags.EnabledAndActivated">
            <summary>
            Enabled and activated
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.RtcJumpMode">
            <summary>
            RtcJumpMode
            </summary>
            <remarks>
            For scan systems equipped with one or several Jump tunings, you can also activate Jump Mode(and hereby tuning autoswitching) for 2D jumps. <br/>
            The default set start behavior is that the scan system starts with tuning number 0 upon power-up or after a reset. <br/>
            Vector(default) jump mode : <br/>
            The jump length gets subdivided into individually executable Microsteps in accordance with the current jump speed. <br/>
            If the scan system is only equipped with a Jump tuning, then the Microsteps execute using this tuning. <br/>
            A Jump Delay defined by set_scanner_delays is executed before a subsequent list command. <br/>
            <br/>
            Hard jump mode :<br/>
            The entire jump length of the 2D jump is controlled as a “Hard jump” over a time dimensioned jump of 10 µ duration.<br/>
            The target position is executed without Microstepping. <br/>
            At the end of the 2D jump, the RTC5/6 PCI Board automatically switches to a Vector tuning (if the scan system is equipped with one and if a corresponding setting has been made by set_jump_mode) <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcJumpMode.Flag">
            <summary>
            JumpModeFlag
            </summary>
            <remarks>
            Default: <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.JumpModeFlags.EnabledButDeactivated">JumpModeFlags.EnabledButDeactivated</see>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcJumpMode.LimitLength">
            <summary>
            Jump Limit Length (mm)
            </summary>
            <remarks>
            At the end of the 2D jump, a jump-length dependent Jump Delay occurs. <br/>
            This Jump Delay can be specified for the corresponding jump length by load_jump_table_offset or set_jump_table. <br/>
            <see cref="M:SpiralLab.Sirius2.Scanner.Rtc.IRtc.CtlDelay(System.Double,System.Double,System.Double,System.Double,System.Double)">CtlDelay</see> is not taken into account. <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcJumpMode.VectorTuningPrimaryX">
            <summary>
            VA1
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcJumpMode.VectorTuningPrimaryY">
            <summary>
            VA2
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcJumpMode.VectorTuningSecondaryX">
            <summary>
            VB1
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcJumpMode.VectorTuningSecondaryY">
            <summary>
            VB2
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcJumpMode.JumpTuningPrimaryX">
            <summary>
            JA1
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcJumpMode.JumpTuningPrimaryY">
            <summary>
            JA2
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcJumpMode.JumpTuningSecondaryX">
            <summary>
            JB1
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcJumpMode.JumpTuningSecondaryY">
            <summary>
            JB2
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcJumpMode.Tag">
            <summary>
            User data
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.RtcJumpMode.Empty">
            <summary>
            Create empty <c>RtcJumpMode</c> instance by default
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcJumpMode.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.RtcJumpMode.ToString">
            <inheritdoc/>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.IRtcJumpMode">
            <summary>
            IRtcJumpMode interface
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.IRtcJumpMode.JumpMode">
            <summary>
            Enables and activates or disables and deactivates Jump Mode for 2D jumps and sets the related parameters
            </summary>
            <remarks>
            Enabling is only possible if a jump-tuning-equipped intelliSCAN (with scan system firmware version >= 2078) is attached to at least one of the two scan head connectors.<br/>
            </remarks>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcJumpMode.CtlJumpMode(SpiralLab.Sirius2.Scanner.Rtc.RtcJumpMode)">
            <summary>
            Jump mode
            <para>Enables and activates or disables and deactivates Jump Mode for 2D jumps and sets the related parameters</para>
            <para>above RTC5 and iDRIVE(intelliSCAN, intellicube, intelliWELD or intelliDRILL) scan system only</para>
            </summary>
            <remarks>
            Enabling is only possible if a jump-tuning-equipped intelliSCAN (with scan system firmware version >= 2078) is attached to at least one of the two scan head connectors.
            </remarks>
            <param name="rtcJumpMode"><c>RtcJumpMode</c></param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcJumpMode.ListJumpMode(SpiralLab.Sirius2.Scanner.Rtc.JumpModeFlags)">
            <summary>
            List jump mode
            <para>Activate(or Deactivate) Jump Mode for 2D jumps</para>
            <para>Configure jump mode by <c>CtlJumpMode</c> at first</para>
            </summary>
            <param name="jumpModeFlag"><c>JumpModeFlag</c></param>
            <returns>Success or failed<br/>If return failed, marker would be stopped(or aborted) immediately. <br/></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcJumpMode.ListJumpHard(System.Numerics.Vector2,System.Double,System.Double)">
            <summary>
            List hard jump
            </summary>
            <remarks>
            Moves the output point (of the laser focus) by a “Hard jump” (without split-up into Microsteps) directly from the current position to the specified position(absolute coordinate values) within a 2D Image field.<br/>
            By LasOn >= 0 and LasOff >= 0, you can set a new LaserOn Delay or LaserOff Delay for each individual Microvector. <br/>
            Each delay thereby gets set at the end of the clock cycle in which the new position actually gets outputted(this output clock cycle is delayed by a preceding scanner delay).<br/>
            Negative values (LasOn &lt; 0 and LasOff &lt; 0) do not affect Laser Delays. <br/>
            Hereby, the laser can remain on or off across multiple clock cycles (mark and jump simulation).<br/>
            </remarks>
            <param name="position">X, Y (mm)</param>
            <param name="laserOn">Laser on delay (usec)</param>
            <param name="laserOff">Laser off delay (usec)</param>
            <returns>Success or failed<br/>If return failed, marker would be stopped(or aborted) immediately. <br/></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcJumpMode.ListJumpHard(System.Numerics.Vector3,System.Double,System.Double)">
            <summary>
            List hard jump - 3d
            </summary>
            <remarks>
            Moves the output point (of the laser focus) by a “Hard jump” (without split-up into Microsteps) directly from the current position to the specified position(absolute coordinate values) within a 2D Image field. <br/>
            By LasOn >= 0 and LasOff >= 0, you can set a new LaserOn Delay or LaserOff Delay for each individual Microvector. <br/>
            Each delay thereby gets set at the end of the clock cycle in which the new position actually gets outputted(this output clock cycle is delayed by a preceding scanner delay).<br/>
            Negative values (LasOn &lt; 0 and LasOff &lt; 0) do not affect Laser Delays.<br/>
            Hereby, the laser can remain on or off across multiple clock cycles (mark and jump simulation).<br/>
            </remarks>
            <param name="position">X, Y (mm)</param>
            <param name="laserOn">Laser on delay (usec)</param>
            <param name="laserOff">Laser off delay (usec)</param>
            <returns>Success or failed<br/>If return failed, marker would be stopped(or aborted) immediately. <br/></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcJumpMode.ListJumpAndDrill(System.Numerics.Vector2,System.Double)">
            <summary>
            (Experimental) List jump and drills
            </summary>
            <remarks>
            Above RTC5 and iDRIVE(intelliSCAN, intellicube, intelliWELD or intelliDRILL) scan system only. <br/>
            </remarks>
            <param name="position">X, Y (mm)</param>
            <param name="drillTime">Drill time (usec) (x0.5 usec)</param>
            <returns>Success or failed<br/>If return failed, marker would be stopped(or aborted) immediately. <br/></returns>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.MeasurementChannels">
            <summary>
            Measurement channels
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.MeasurementChannels.LaserOn">
            <summary>
            LASERON signal (1 = laser signal on, 0 = laser signal off)
            </summary>
            <remarks>
            Converted(or multipled) by <see cref="P:SpiralLab.Sirius2.Config.MeasurementLaserOnFactor">Config.MeasurementLaserOnFactor</see> scale value. <br/>
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.MeasurementChannels.StatusAX">
            <summary>
            StatusAX (X-axis status signal of the primary scan head connector)
            </summary>
            <remarks>
            Converted bits into mm value. <br/>
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.MeasurementChannels.StatusAY">
            <summary>
            StatusAY (Y-axis status signal of the primary scan head connector)
            </summary>
            <remarks>
            Converted bits into mm value. <br/>
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.MeasurementChannels.StatusBX">
            <summary>
            StatusBX (X-axis status signal of the secondary scan head connector)
            </summary>
            <remarks>
            Converted bits into mm value. <br/>
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.MeasurementChannels.StatusBY">
            <summary>
            StatusBY (Y-axis status signal of the secondary scan head connector)
            </summary>
            <remarks>
            Converted bits into mm value. <br/>
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.MeasurementChannels.SampleX">
            <summary>
            SampleX (X-axis cartesian control value)
            </summary>
            <remarks>
            Converted bits into mm value. <br/>
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.MeasurementChannels.SampleY">
            <summary>
            SampleY (Y-axis cartesian control value)
            </summary>
            <remarks>
            Converted bits into mm value. <br/>
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.MeasurementChannels.SampleZ">
            <summary>
            SampleZ (Z-axis cartesian control value)
            </summary>
            <remarks>
            Converted bits into mm value. <br/>
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.MeasurementChannels.SampleAX_Coor">
            <summary>
            SampleAX_Corr (corrected X-axis control value for the primary scan head connector)
            </summary>
            <remarks>
            Converted bits into mm value. <br/>
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.MeasurementChannels.SampleAY_Coor">
            <summary>
            SampleAY_Corr (corrected Y-axis control value for the primary scan head connector)
            </summary>
            <remarks>
            Converted bits into mm value. <br/>
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.MeasurementChannels.SampleAZ_Coor">
            <summary>
            SampleAZ_Corr (corrected Z-axis control value, if XY are connected to the primary scan head connector <br/>
            Identical to the effective output value for the Z axis) <br/>
            </summary>
            <remarks>
            Converted bits into mm value. <br/>
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.MeasurementChannels.SampleBX_Coor">
            <summary>
            SampleBX_Corr (corrected X-axis control value for the secondary scan head connector)
            </summary>
            <remarks>
            Converted bits into mm value. <br/>
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.MeasurementChannels.SampleBY_Coor">
            <summary>
            SampleBY_Corr (corrected Y-axis control value for the secondary scan head connector)
            </summary>
            <remarks>
            Converted bits into mm value. <br/>
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.MeasurementChannels.SampleBZ_Coor">
            <summary>
            SampleBZ_Corr (corrected Z-axis control value, if XY are connected to the secondary scan head connector<br/>
            Identical to the effective output value for the Z axis)<br/>
            </summary>
            <remarks>
            
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.MeasurementChannels.SampleAX_Out">
            <summary>
            SampleAX_Out (effective X-axis output value for the primary scan head connector; if applicable incl. any scanner offset and gain compensation, see comments; not usable for measuring Z-axis output values)
            </summary>
            <remarks>
            above RTC5. <br/>
            Converted bits into mm value. <br/>
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.MeasurementChannels.SampleAY_Out">
            <summary>
            SampleAY_Out (effective Y-axis output value for the primary scan head connector; not usable for measuring Z-axis output values)
            </summary>
            <remarks>
            above RTC5. <br/>
            Converted bits into mm value. <br/>
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.MeasurementChannels.SampleBX_Out">
            <summary>
            SampleBX_Out (effective X-axis output value for the secondary scan head connector; not usable for measuring Z-axis output values)
            </summary>
            <remarks>
            above RTC5. <br/>
            Converted bits into mm value. <br/>
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.MeasurementChannels.SampleBY_Out">
            <summary>
            SampleBY_Out (effective Y-axis output value for the secondary scan head connector; not usable for measuring Z-axis output values)
            </summary>
            <remarks>
            above RTC5. <br/>
            Converted bits into mm value. <br/>
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.MeasurementChannels.AutomaticLaserControlParam">
            <summary>
            Laser control parameter of automatic laser control (see set_auto_laser_control)
            </summary>
            <remarks>
            above RTC5. <br/>
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.MeasurementChannels.SampleAX_Trans">
            <summary>
            SampleAX_Trans (transformed X-axis control value for the primary scan head connector)
            </summary>
            <remarks>
            above RTC5. <br/>
            Converted bits into mm value. <br/>
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.MeasurementChannels.SampleAY_Trans">
            <summary>
            SampleAY_Trans (transformed Y-axis control value for the primary scan head connector)
            </summary>
            <remarks>
            above RTC5. <br/>
            Converted bits into mm value. <br/>
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.MeasurementChannels.SampleAZ_Trans">
            <summary>
            SampleAZ_Trans (transformed Z-axis control value, if XY are connected to the primary scan head connector)
            </summary>
            <remarks>
            above RTC5. <br/>
            Converted bits into mm value. <br/>
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.MeasurementChannels.SampleBX_Trans">
            <summary>
            SampleBX_Trans (transformed X-axis control value for the secondary scan head connector)
            </summary>
            <remarks>
            above RTC5. <br/>
            Converted bits into mm value. <br/>
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.MeasurementChannels.SampleBY_Trans">
            <summary>
            SampleBY_Trans (transformed Y-axis control value for the secondary scan head connector)
            </summary>
            <remarks>
            above RTC5. <br/>
            Converted bits into mm value. <br/>
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.MeasurementChannels.SampleBZ_Trans">
            <summary>
            SampleBZ_Trans (transformed Z-axis control value, if XY are connected to the secondary scan head connector)
            </summary>
            <remarks>
            above RTC5. <br/>
            Converted bits into mm value. <br/>
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.MeasurementChannels.AutomaticLaserControlByVectorParam">
            <summary>
            Laser control parameter of vector-defined laser control (see set_vector_control)
            </summary>
            <remarks>
            above RTC5. <br/>
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.MeasurementChannels.FocusShift">
            <summary>
            Focus shift (see set_vector_control, set_defocus, set_defocus_list)
            </summary>
            <remarks>
            above RTC5. <br/>
            Converted bits into mm value. <br/>
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.MeasurementChannels.ExtAO1">
            <summary>
            12-bit output value at the ANALOG OUT1 output port (see set_auto_laser_control, set_vector_control and chapter 9.1.4 ”12- Bit Analog Output Ports”)
            </summary>
            <remarks>
            above RTC5. <br/>
            Converted bits into voltage (0~10) value.  <br/>
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.MeasurementChannels.ExtAO2">
            <summary>
            12-bit output value at the ANALOG OUT2 output port (see set_auto_laser_control, set_vector_control and chapter 9.1.4 ”12- Bit Analog Output Ports”) 
            </summary>
            <remarks>
            above RTC5. <br/>
            Converted bits into voltage (0~10) value.  <br/>
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.MeasurementChannels.ExtDO16">
            <summary>
            Output value at the 16-bit digital output port (see set_auto_laser_control, set_vector_control and chapter 9.1.1 ”16- Bit Digital Output Port”)
            </summary>
            <remarks>
            above RTC5. <br/>
            Converted bits into digital (0~65535) value. <br/>
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.MeasurementChannels.ExtDO8">
            <summary>
            Output value at the 8-bit digital output port (see set_auto_laser_control, set_vector_control and chapter 9.1.2 ”8- Bit Digital Output Port”)
            </summary>
            <remarks>
            above RTC5. <br/>
            Converted bits into digital (0~255) value. <br/>
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.MeasurementChannels.PulseLength">
            <summary>
            Pulse length (PulseLength) of the LASER1 and LASER2 laser signals (see set_auto_laser_control, set_vector_control)
            </summary>
            <remarks>
            Converted into pulse width(usec) value. <br/>
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.MeasurementChannels.OutputPeriod">
            <summary>
            Output period (HalfPeriod) of the LASER1 and LASER2 laser signals (see set_auto_laser_control, set_vector_control)
            </summary>
            <remarks>
            above RTC5. <br/>
            Converted bits into frequency(Hz) value. <br/>
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.MeasurementChannels.FreeVariable0">
            <summary>
            FreeVariable0
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.MeasurementChannels.FreeVariable1">
            <summary>
            FreeVariable1
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.MeasurementChannels.FreeVariable2">
            <summary>
            FreeVariable2
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.MeasurementChannels.FreeVariable3">
            <summary>
            FreeVariable3
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.MeasurementChannels.Enc0Counter">
            <summary>
            Counter value of encoder counter Encoder0
            </summary>
            <remarks>
            above RTC5. <br/>
            Converted into mm(if X/Y) or degree(if Angular) value. <br/>
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.MeasurementChannels.Enc1Counter">
            <summary>
            Counter value of encoder counter Encoder1
            </summary>
            <remarks>
            above RTC5. <br/>
            Converted into mm(if X/Y) or degree(if Angular) value. <br/>
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.MeasurementChannels.MarkSpeed">
            <summary>
            Marking speed (from set_mark_speed, set_mark_speed_ctrl)
            </summary>
            <remarks>
            above RTC5 
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.MeasurementChannels.ExtDI16">
            <summary>
            16-bit digital input (EXTENSION 1)
            </summary>
            <remarks>
            above RTC5. <br/>
            Converted bits into digital (0~65535) value. <br/>
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.MeasurementChannels.ZoomValueForIntelliWeld">
            <summary>
            Zoom value (only for intelliWELD II)
            </summary>
            <remarks>
            above RTC5 
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.MeasurementChannels.FreeVariable4">
            <summary>
            FreeVariable4
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.MeasurementChannels.FreeVariable5">
            <summary>
            FreeVariable5
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.MeasurementChannels.FreeVariable6">
            <summary>
            FreeVariable6
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.MeasurementChannels.FreeVariable7">
            <summary>
            FreeVariable7
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.MeasurementChannels.TimeStampCounter">
            <summary>
            Time stamp counter 
            </summary>
            <remarks>
            above RTC5 
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.MeasurementChannels.WobbelAmplitude">
            <summary>
            Wobbel amplitude (see set_wobbel, set_wobbel_mode)
            </summary>
            <remarks>
            above RTC5 
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.MeasurementChannels.ExtAI">
            <summary>
            ReadAnalogIn (see read_analog_in)
            </summary>
            <remarks>
            above RTC5. <br/>
            Converted bits into analog (0~10) value. <br/>
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.MeasurementChannels.ScaledEncoderX">
            <summary>
            Scaled encoder value for X.
            </summary>
            <remarks>
            above RTC6
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.MeasurementChannels.ScaledEncoderY">
            <summary>
            Scaled encoder value for Y.
            </summary>
            <remarks>
            above RTC6
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.MeasurementChannels.ScaledEncoderZ">
            <summary>
            Scaled encoder value for Z.
            </summary>
            <remarks>
            above RTC6
            </remarks>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.IRtcMeasurement">
            <summary>
            IRtcMeasurement 
            <para>Gathering output signals up-to 100KHz sampling rate</para>
            </summary>
            <remarks>
            <img src="images/gnuplot.png"/><br/>
            RTC4: Max 2 channels<br/>
            RTC5: Max 4 channels<br/>
            RTC6: Max 8 channels<br/>
            Default path: Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "gnuplot", "gnuplot.exe").<br/>
            Copy gnuplot program into gnuplot directory. <br/>
            <seealso href="http://tmacchant33.starfree.jp/gnuplot_bin.html">gnuplot download link</seealso><br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.IRtcMeasurement.MeasurementChannels">
            <summary>
            Current(or last) array of measurement channels
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.IRtcMeasurement.SamplingFrequency">
            <summary>
            Current(or last) measurement sampling frequency (Hz)
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcMeasurement.CtlGetMeasurement(SpiralLab.Sirius2.Scanner.Rtc.MeasurementChannels,System.Int32[]@)">
            <summary>
            Get measured data
            </summary>
            <param name="channel"><c>MeasurementChannel</c></param>
            <param name="rawData">Array of raw data</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcMeasurement.CtlConvertMeasurement(SpiralLab.Sirius2.Scanner.Rtc.MeasurementChannels,System.Int32,System.Double@)">
            <summary>
            Convert measured raw data to human readable format
            </summary>
            <param name="channel"><c>MeasurementChannel</c></param>
            <param name="rawData">Raw data</param>
            <param name="convertedValue">Converted value from raw data to human readable format</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcMeasurement.ListMeasurementBegin(System.Double,SpiralLab.Sirius2.Scanner.Rtc.MeasurementChannels[])">
            <summary>
            List measurement begin
            <code>
            var rtcMeasurement = rtc as IRtcMeasurement;
            double sampleRateHz = 10 * 1000; // 10KHz Sample rate (max 100KHz)
            var channels = new MeasurementChannels[4] // Max 4 channels at RTC5
            {
                MeasurementChannels.SampleX, // X commanded
                MeasurementChannels.SampleY, // Y commanded
                MeasurementChannels.LaserOn, // Laser ON
                MeasurementChannels.OutputPeriod, // Converted Raw Data to Frequency(KHz)
            };
            rtc.ListBegin();
            rtcMeasurement.ListMeasurementBegin(sampleRateHz, channels); 
            float width = 10;
            float height = 5;
            for (int i=0; i &lt; 10; i++)
            {
                rtc.ListJumpTo(new Vector2(-width / 2, height / 2));
                rtc.ListMarkTo(new Vector2(width / 2, height / 2));
                rtc.ListMarkTo(new Vector2(width / 2, -height / 2));
                rtc.ListMarkTo(new Vector2(-width / 2, -height / 2));
                rtc.ListMarkTo(new Vector2(-width / 2, height / 2));
            }
            rtcMeasurement.ListMeasurementEnd();
            rtc.ListEnd();
            rtc.ListExecute(true);
            var measurementFile = Path.Combine(Config.MeasurementPath, "measurement_result.txt");
            RtcMeasurementHelper.Save(measurementFile, rtcMeasurement); // Save measurement result into file
            RtcMeasurementHelper.Plot(measurementFile, "Test Run"); // Plot as a graph
            </code>
            </summary>
            <param name="frequency">Sampling frequency (Hz)<br/>Max. frequency: ~100KHz <br/>Min. time resolution: 10 usec<br/></param>
            <param name="channels">Array of <c>MeasurementChannel</c></param>
            <returns>Success or failed<br/>If return failed, marker would be stopped(or aborted) immediately. <br/></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcMeasurement.ListMeasurementEnd">
            <summary>
            List measurement end
            </summary>
            <returns>Success or failed<br/>If return failed, marker would be stopped(or aborted) immediately. <br/></returns>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoders">
            <summary>
            RTC's encoders
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoders.EncX">
            <summary>
            Enc0(or X, Angular)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoders.EncY">
            <summary>
            Enc1(or Y)
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.RtcMoFTypes">
            <summary>
            Rtc MoF types
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.RtcMoFTypes.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.RtcMoFTypes.XY">
            <summary>
            XY (Linear)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.RtcMoFTypes.Angular">
            <summary>
            Angular 
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderWaitConditions">
            <summary>
            Encoder wait conditions
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderWaitConditions.Under">
            <summary>
            Under
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderWaitConditions.Auto">
            <summary>
            Auto
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderWaitConditions.Over">
            <summary>
            Over
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderRangeConditions">
            <summary>
            Encoder range wait conditions
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderRangeConditions.UnderFlow">
            <summary>
            UnderFlow
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderRangeConditions.Boundary">
            <summary>
            Boundary
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderRangeConditions.OverFlow">
            <summary>
            OverFlow
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.IRtcMoF">
            <summary>
            IRtcMoF interface
            </summary>
            <remarks>
            <img src="images/rtc6pciex.png"/><br/>
            Used with MARKING ON THE FLY connector at Fig 3.<br/>
            Aka. processing on the fly (classic version). <br/>
            List commands are can't be combined with <see cref="T:SpiralLab.Sirius2.Scanner.Rtc.IRtcMoFExtension">IRtcMoFExtension</see> functions. <br/>
            </remarks>
        </member>
        <member name="E:SpiralLab.Sirius2.Scanner.Rtc.IRtcMoF.OnEncoderChanged">
            <summary>
            Event handler for encoder(s) changed (enc x counts, enc y counts)
            </summary>
            <remarks>
            Notify when encoder values has changed and consider as its working within async threads. <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.IRtcMoF.MoFType">
            <summary>
            Activated(or last) MoF type
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.IRtcMoF.EncXCountsPerMm">
            <summary>
            Encoder X(or 0) counts/mm
            <code>
                                counts 
            EncXCountsPerMm = ----------
                                  mm  
            </code>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.IRtcMoF.EncYCountsPerMm">
            <summary>
            Encoder Y(or 1) counts/mm
            <code>
                                counts 
            EncYCountsPerMm = ----------
                                  mm  
            </code>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.IRtcMoF.EncXSimulatedSpeed">
            <summary>
            Simulated encoder x(or 0) speed (mm/s)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.IRtcMoF.EncYSimulatedSpeed">
            <summary>
            Simulated encoder y(or 1) speed (mm/s)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.IRtcMoF.EncCountsPerRevolution">
            <summary>
            Encoder X(or 0) counts/rev
            <para>Must be > 100</para>
            <code>
                                        Counts
            EncCountsPerRevolution = ------------
                                         360˚ 
            </code>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.IRtcMoF.EncSimulatedAngularSpeed">
            <summary>
            Simulated encoder x(or 0) angular speed (˚/s)
            </summary>
            <remarks>
            Negative(-) value is not supported. <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.Rtc.IRtcMoF.MofAngularCenter">
            <summary>
            Rotate center x,y position
            <code>
            For example, rotate center at -50, 0 
                                        |                                   
                                        |                                   
                                        |                                   
                                        |                                   
                                        |                                   
                                        |                                   
                                        |                                   
                                        |                                   
                                        |                |--------|--------|                    
                                        |                |        |        |
                                        |                |        |        |       
                                        |                |     (Fixed)     |    
            --------------------- Rotate+Center -------------- Scanner ----|
                                       0, 0              |      50, 0      |    
                                        |                |        |        |      
                                        |                |        |        |
                                        |                |--------|--------|                    
                                        |                         .          
                                        |                        .           
                                        |                       .            
                                        |                     .             
                                        |                   .                
                                        |                .                   
                                        |           . 
                                        |    &lt;-  ClockWise = Angle+ = Enc+ 
                                        |   
            </code>
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcMoF.CtlMofEncoderReset(System.Double,System.Double)">
            <summary>
            Reset encoders
            </summary>
            <param name="offsetX">Encoder X(0) offset (mm)</param>
            <param name="offsetY">Encoder Y(1) offset (mm)</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcMoF.CtlMofGetEncoder(System.Int32@,System.Int32@,System.Double@,System.Double@)">
            <summary>
            Get encoders
            </summary>
            <param name="encX">Encoder X(0) count</param>
            <param name="encY">Encoder Y(1) count</param>
            <param name="encXmm">Encoder X(0) distance (mm)</param>
            <param name="encYmm">Encoder Y(1) distance (mm)</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcMoF.CtlMofEncoderSpeed(System.Double,System.Double)">
            <summary>
            Enable(or disable) simulated encoders
            </summary>
            <remarks>
            Should be called when <see cref="M:SpiralLab.Sirius2.Scanner.Rtc.IRtc.CtlGetStatus(SpiralLab.Sirius2.Scanner.Rtc.RtcStatus)">CtlGetStatus(RtcStatus.NotBusy)</see> <br/>
            </remarks>
            <param name="encXSimulatedSpeed">Simulated X(0) encoder speed (mm/s).<br/>Negative(-) direction is not supported. <br/>0: Disabled. <br/></param>
            <param name="encYSimulatedSpeed">Simulated Y(1) encoder speed (mm/s).<br/>Negative(-) direction is not supported. <br/>0: Disabled. <br/></param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcMoF.CtlMofTrackingError(System.Double,System.Double)">
            <summary>
            Compensate tracking error with MoF.
            </summary>
            <remarks>
            EC = E + (E – EP) * TrackingError <br/>
            E is the current encoder value. <br/>
            EP is that of the previous cycle. <br/> 
            EC is the compensated encoder value(used for Processing-on-the-fly correction). <br/>
            To avoid step-like galvanometer scanner movements, the used encoders should have a sufficiently high resolution (counts per 10 µs cycle)<br/>
            </remarks>
            <param name="xUsec">X tracking error time (usec)<br/>Min. time resolution: 10 usec<br/></param>
            <param name="yUsec">Y tracking error time (usec)<br/>Min. time resolution: 10 usec<br/></param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcMoF.CtlMofCompensateTable(System.Collections.Generic.KeyValuePair{System.Numerics.Vector2,System.Numerics.Vector2}[])">
            <summary>
            Compensate 2D encoder table
            </summary>
            <remarks>
            Not usable with MoF Angluar. MoF X,Y only. <br/>
            </remarks>
            <param name="kvList">Array of position X, Y (mm) and delta X,Y (mm)</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcMoF.CtlMofExternalControlDelay(SpiralLab.Sirius2.Scanner.Rtc.RtcEncoders,System.Double)">
            <summary>
            Delay external /START trigger control
            </summary>
            <param name="enc"><c>RtcEncoders</c></param>
            <param name="distance">Delay distance (mm)</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcMoF.CtlMofGetAngularEncoder(System.Int32@,System.Double@)">
            <summary>
            Get encoders with anuglar
            </summary>
            <param name="enc">Encoder X(0) count</param>
            <param name="angle">Encoder Angular (˚)</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcMoF.CtlMofAngularCenter(System.Numerics.Vector2)">
            <summary>
            Rotate center x,y position
            <code>
            For example, rotate center at -50, 0 
                                        |                                   
                                        |                                   
                                        |                                   
                                        |                                   
                                        |                                   
                                        |                                   
                                        |                                   
                                        |                                   
                                        |                |--------|--------|                    
                                        |                |        |        |
                                        |                |        |        |       
                                        |                |     (Fixed)     |    
            --------------------- Rotate+Center -------------- Scanner ----|
                                       0, 0              |      50, 0      |    
                                        |                |        |        |      
                                        |                |        |        |
                                        |                |--------|--------|                    
                                        |                         .          
                                        |                        .           
                                        |                       .            
                                        |                     .             
                                        |                   .                
                                        |                .                   
                                        |           . 
                                        |    &lt;-  ClockWise = Angle+ = Enc+ 
                                        |   
            </code>
            </summary>
            <param name="center">Rotate center x,y (mm)</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcMoF.CtlMofEncoderAngularSpeed(System.Double)">
            <summary>
            Enable( or disable) simulated angular encoder (x/0)
            </summary>
            <remarks>
            <c>EncSimulatedAngularSpeed</c> value should be assigned at first. <br/>
            Should be called when <see cref="M:SpiralLab.Sirius2.Scanner.Rtc.IRtc.CtlGetStatus(SpiralLab.Sirius2.Scanner.Rtc.RtcStatus)">CtlGetStatus(RtcStatus.NotBusy)</see><br/>
            </remarks>
            <param name="encSimulatedSpeed">Angular speed (˚/s) (negative direction is not supported)</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcMoF.CtlMofOverflowClear">
            <summary>
            Clear overflow warnings
            <para>Detail warnings at <see cref="T:SpiralLab.Sirius2.Scanner.Rtc.IRtcMarkingInfo">IRtcMarkingInfo</see> </para>
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcMoF.ListMofBegin(System.Boolean)">
            <summary>
            List MoF x, y has begin
            <code>
            var rtcMoF = rtc as IRtcMoF;
            rtcMoF.EncXCountsPerMm = 2000;
            rtcMoF.EncYCountsPerMm = 2000;
            ...
            rtcMoF.CtlMofEncoderReset();
            rtc.ListBegin();
            rtcMoF.ListMofBegin(true);
            rtcMoF.ListMofWait(RtcEncoders.EncX, 10, EncoderWaitConditions.Over);
            rtc.ListJumpTo(new Vector2(10, 0));
            rtc.ListArcTo(new Vector2(0, 0), 360.0f);
            rtcMoF.ListMofEnd(Vector2.Zero);
            rtc.ListEnd();
            rtc.ListExecute(true);
            </code>
            </summary>
            <remarks>
            Scanner movements are affected by accumulate encoder values. <br/>
            </remarks>
            <param name="encoderReset">Reset encoders or not(</param>
            <returns>Success or failed<br/>If return failed, marker would be stopped(or aborted) immediately. <br/></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcMoF.ListMofAngularBegin(System.Numerics.Vector2,System.Boolean)">
            <summary>
            List MoF angular has begin
            <para>Scanner movements affected by accumulate encoder values</para>
            <code>
            var rtcMoF = rtc as IRtcMoF;
            rtcMoF.EncCountsPerRevolution = 3600; 
            ...
            rtcMoF.CtlMofEncoderReset();
            rtc.ListBegin();
            var rotateCenter = new Vector2(-50, 0);
            rtcMoF.ListMotfAngularBegin(rotateCenter);
            rtc.ListJumpTo(new Vector2(0, 0));
            rtcMoF.ListMotfAngularWait(0, EncoderWaitCondition.Over); 
            rtc.ListJumpTo(-rotateCenter + new Vector2(10, 0));
            rtc.ListArcTo(-rotateCenter, 360.0f);
            rtcMoF.ListMotfAngularWait(180, EncoderWaitCondition.Over);
            rtc.ListJumpTo(rotateCenter + rotateCenter + new Vector2(10, 0));
            rtc.ListArcTo(rotateCenter + rotateCenter, 360.0f);
            rtcMoF.ListMofEnd(Vector2.Zero);
            rtc.ListEnd();
            rtc.ListExecute(true);
            </code>
            <code>
            For example, rotate center at -50, 0 
                                        |                                   
                                        |                                   
                                        |                                   
                                        |                                   
                                        |                                   
                                        |                                   
                                        |                                   
                                        |                                   
                                        |                |--------|--------|                    
                                        |                |        |        |
                                        |                |        |        |       
                                        |                |     (Fixed)     |    
            --------------------- Rotate+Center -------------- Scanner ----|
                                       0, 0              |      50, 0      |    
                                        |                |        |        |      
                                        |                |        |        |
                                        |                |--------|--------|                    
                                        |                         .          
                                        |                        .           
                                        |                       .            
                                        |                     .             
                                        |                   .                
                                        |                .                   
                                        |           . 
                                        |    &lt;-  ClockWise = Angle+ = Enc+ 
                                        |   
            </code>
            </summary>
            <param name="center">Rotate center x,y position (mm)</param>
            <param name="encoderReset">Reset encoder</param>
            <returns>Success or failed<br/>If return failed, marker would be stopped(or aborted) immediately. <br/></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcMoF.ListMofOverflowClear">
            <summary>
            List clear overflow warnings
            </summary>
            <returns>Success or failed<br/>If return failed, marker would be stopped(or aborted) immediately. <br/></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcMoF.ListMofExternalControlDelay(SpiralLab.Sirius2.Scanner.Rtc.RtcEncoders,System.Double)">
            <summary>
            List delay external /START trigger control
            </summary>
            <param name="enc"><c>RtcEncoders</c></param>
            <param name="distance">Delay distance (mm)</param>
            <returns>Success or failed<br/>If return failed, marker would be stopped(or aborted) immediately. <br/></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcMoF.ListMofLimitIf(SpiralLab.Sirius2.Scanner.Rtc.RtcEncoders,SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderRangeConditions)">
            <summary>
            List encoder range condition 
            </summary>
            <remarks>
            Scanner movement goes to stationary. <br/>
            </remarks>
            <param name="enc"><c>RtcEncoders</c></param>
            <param name="cond"><c>EncoderRangeCondition</c></param>
            <returns>Success or failed<br/>If return failed, marker would be stopped(or aborted) immediately. <br/></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcMoF.ListMofWait(SpiralLab.Sirius2.Scanner.Rtc.RtcEncoders,System.Double,SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderWaitConditions)">
            <summary>
            List wait until a encoder condition has matched
            </summary>
            <remarks>
            Scanner movement goes to stationary. <br/>
            </remarks>
            <param name="enc"><c>RtcEncoders</c></param>
            <param name="position">Position (mm)</param>
            <param name="cond"><c>EncoderWaitConditions</c></param>
            <returns>Success or failed<br/>If return failed, marker would be stopped(or aborted) immediately. <br/></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcMoF.ListMofAngularWait(System.Double,SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderWaitConditions)">
            <summary>
            List wait until angular encoder condition has matched
            </summary>
            <remarks>
            Scanner movement goes to stationary. <br/>
            </remarks>
            <param name="angle">Angle (°)</param>
            <param name="cond"><c>EncoderWaitConditions</c></param>
            <returns>Success or failed<br/>If return failed, marker would be stopped(or aborted) immediately. <br/></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcMoF.ListMofWaitRange(System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
            List wait until x,y encoders reached in-range
            </summary>
            <remarks>
            Scanner movement goes to stationary. <br/>
            </remarks>
            <param name="rangeX">X min/max range (mm)</param>
            <param name="rangeY">Y min/max range (mm)</param>
            <returns>Success or failed<br/>If return failed, marker would be stopped(or aborted) immediately. <br/></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcMoF.ListMofLimits(System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
            <para>List wait until x,y encoders reached in-range</para>
            </summary>
            <param name="rangeX">X range (mm)</param>
            <param name="rangeY">Y range (mm)</param>
            <returns>Success or failed<br/>If return failed, marker would be stopped(or aborted) immediately. <br/></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcMoF.ListMofEnd(System.Numerics.Vector2)">
            <summary>
            List MoF x,y (or angular) has end
            </summary>
            <param name="jumpPosition">Jump x,y position (mm)</param>
            <returns>Success or failed<br/>If return failed, marker would be stopped(or aborted) immediately. <br/></returns>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderAxisExtension">
            <summary>
            RTC encoder axis (aka. fly extension version)
            </summary>
            <remarks>
            Used with RTC6 only <br/>
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderAxisExtension.X">
            <summary>
            X axis
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderAxisExtension.Y">
            <summary>
            Y axis
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderAxisExtension.Z">
            <summary>
            Z axis
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderAxisExtension.Rotary">
            <summary>
            Rotary axis
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension">
            <summary>
            RTC encoder sources (aka. fly extension version)
            </summary>
            <remarks>
            Used with RTC6 only. <br/>
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension.Mode1">
            <summary>
            Encoder source: Encoder0
            </summary>
            <remarks>
            Only for Processing-on-the-fly-correction. <br/>
            Encoder counter “Encoder0”-scaled. <br/>
            PreviewTime-corrected. <br/>
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension.Mode2">
            <summary>
            Encoder source: Encoder1
            </summary>
            <remarks>
            Only for Processing-on-the-fly-correction. <br/>
            Encoder counter “Encoder1”-scaled. <br/>
            PreviewTime-corrected. <br/>
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension.Mode3">
            <summary>
            Encoder source: Encoder2
            </summary>
            <remarks>
            Only for Processing-on-the-fly-correction. <br/>
            Tied to encoder counter “Encoder0”-scaled. <br/>
            PreviewTime-corrected. <br/>
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension.Mode4">
            <summary>
            Encoder source: Encoder2
            </summary>
            <remarks>
            Only for Processing-on-the-fly-correction. <br/>
            Tied to encoder counter “Encoder1”-scaled. <br/>
            PreviewTime-corrected. <br/>
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension.Mode17">
            <summary>
            Encoder source: Encoder0
            </summary>
            <remarks>
            Only for <see cref="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcMoFExtension.ListMofExtWait(SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension,System.Double,SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderRangeConditionsExtension,System.Boolean,System.Boolean)">ListMofExtWait</see>, <see cref="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcMoFExtension.ListMofExtWaitRange(SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension,System.Numerics.Vector2,SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension,System.Numerics.Vector2,System.Boolean,System.Boolean)">ListMofExtensionWaitRange</see>. <br/>
            Not for Processing-on-the-fly corrections. <br/>
            Encoder counter “Encoder0”-unscaled and PreviewTime-corrected. <br/>
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension.Mode18">
            <summary>
            Encoder source: Encoder1
            </summary>
            <remarks>
            Only for <see cref="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcMoFExtension.ListMofExtWait(SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension,System.Double,SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderRangeConditionsExtension,System.Boolean,System.Boolean)">ListMofExtWait</see>, <see cref="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcMoFExtension.ListMofExtWaitRange(SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension,System.Numerics.Vector2,SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension,System.Numerics.Vector2,System.Boolean,System.Boolean)">ListMofExtensionWaitRange</see>. <br/>
            Not for Processing-on-the-fly corrections. <br/>
            Encoder counter “Encoder1”-unscaled and PreviewTime-corrected. <br/>
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension.Mode19">
            <summary>
            Encoder source: Encoder0
            </summary>
            <remarks>
            Like <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension.Mode17">Mode17</see>, but not PreviewTime-corrected. <br/>
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension.Mode20">
            <summary>
            Encoder source: Encoder1
            </summary>
            <remarks>
            Like <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension.Mode18">Mode18</see>, but not PreviewTime-corrected. <br/>
            </remarks>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderRangeConditionsExtension">
            <summary>
            Encoder range wait conditions (aka. fly extension version)
            </summary>
            <remarks>
            Used with RTC6 only. <br/>
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderRangeConditionsExtension.UnderFlow">
            <summary>
            UnderFlow
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderRangeConditionsExtension.Equal">
            <summary>
            Equal
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderRangeConditionsExtension.OverFlow">
            <summary>
            OverFlow
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.IRtcMoFExtension">
            <summary>
            IRtcMoFExtension (aka. fly extension version)
            </summary>
            <remarks>
            <img src="images/rtc6pciex.png"/><br/>
            Used with MARKING ON THE FLY connector at Fig 3.<br/>
            Aka. processing on the fly (fly extension version). <br/>
            Used with RTC6 only. <br/>
            Above RTC6 v.1.6.1 (DLL 617, OUT 617, RBF 623) <br/>
            List commands are can't be combined with <see cref="T:SpiralLab.Sirius2.Scanner.Rtc.IRtcMoF">IRtcMoF</see> functions. <br/>
            </remarks>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcMoFExtension.ListMofExtBegin(SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension,SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension,System.Double,System.Double,System.Boolean)">
            <summary>
            List MoF x, y has begin (aka. fly extension version)
            <code>
            var rtcMoF = rtc as IRtcMoF;
            var rtcMofExt = rtc as IRtcMoFExtension;
            rtcMoF.EncXCountsPerMm = 2000;
            rtcMoF.EncYCountsPerMm = 2000;
            rtcMoF.CtlMofEncoderReset();
            ...
            rtc.ListBegin();
            rtcMofExt.ListMofExtBegin(RtcEncoderSourcesExtension.Mode1, RtcEncoderSourcesExtension.Mode2);
            rtcMofExt.ListMofExtWait(RtcEncoderSourcesExtension.Mode19, RtcEncoderRangeConditionsExtension.Equal, 10);
            rtc.ListJumpTo(new Vector2(10, 0));
            rtc.ListArcTo(new Vector2(0, 0), 360.0f);
            rtcMofExt.ListMofExtEnd(Vector2.Zero);
            rtc.ListEnd();
            rtc.ListExecute(true);
            </code>
            </summary>
            <param name="modeX"><see cref="F:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension.Mode1">Mode1</see> ~ <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension.Mode4">Mode4</see> must not be specified. <br/>Instead <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension.Mode17">Mode17</see> ~ <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension.Mode20">Mode20</see> is to be used. <br/><see cref="F:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension.Mode17">Mode17</see> ~ <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension.Mode18">Mode18</see> is to be used with an scan system with SCANahead control (if waiting is yet to occur withing PreviewTime).<br/>Outside of this, <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension.Mode19">Mode19</see> ~ <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension.Mode20">Mode20</see> can be used. <br/> </param>
            <param name="modeY"><see cref="F:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension.Mode1">Mode1</see> ~ <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension.Mode4">Mode4</see> must not be specified. <br/>Instead <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension.Mode17">Mode17</see> ~ <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension.Mode20">Mode20</see> is to be used. <br/><see cref="F:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension.Mode17">Mode17</see> ~ <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension.Mode18">Mode18</see> is to be used with an scan system with SCANahead control (if waiting is yet to occur withing PreviewTime).<br/>Outside of this, <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension.Mode19">Mode19</see> ~ <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension.Mode20">Mode20</see> can be used. <br/> </param>
            <param name="offsetX">Offset dx (mm).<br/>Used when <c>encoderReset</c> is <c>True</c> only. <br/></param>
            <param name="offsetY">Offset dy (mm).<br/>Used when <c>encoderReset</c> is <c>True</c> only. <br/></param>
            <param name="encoderReset">Reset encoders (or not)</param>
            <returns>Success or failed<br/>If return failed, marker would be stopped(or aborted) immediately. <br/></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcMoFExtension.ListMofExtBegin(SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension,SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension,SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension)">
            <summary>
            List MoF x, y, z has begin (aka. fly extension version)
            <code>
            var rtcMoF = rtc as IRtcMoF;
            var rtcMofExt = rtc as IRtcMoFExtension;
            rtcMoF.EncXCountsPerMm = 2000;
            rtcMoF.EncYCountsPerMm = 2000;
            rtcMoF.CtlMofEncoderReset();
            ...
            rtc.ListBegin();
            rtcMofExt.ListMofExtBegin(RtcEncoderSourcesExtension.Mode1, RtcEncoderSourcesExtension.Mode2, RtcEncoderSourcesExtension.Mode3);
            rtcMofExt.ListMofExtWait(RtcEncoderSourcesExtension.Mode19, RtcEncoderRangeConditionsExtension.Equal, 10);
            rtc.ListJumpTo(new Vector2(10, 0, 1));
            rtc.ListArcTo(new Vector2(0, 0), 360.0f);
            rtcMofExt.ListMofExtEnd(Vector3.Zero);
            rtc.ListEnd();
            rtc.ListExecute(true);
            </code>
            </summary>
            <param name="modeX"><see cref="F:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension.Mode1">Mode1</see> ~ <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension.Mode4">Mode4</see> must not be specified. <br/>Instead <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension.Mode17">Mode17</see> ~ <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension.Mode20">Mode20</see> is to be used. <br/><see cref="F:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension.Mode17">Mode17</see> ~ <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension.Mode18">Mode18</see> is to be used with an scan system with SCANahead control (if waiting is yet to occur withing PreviewTime).<br/>Outside of this, <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension.Mode19">Mode19</see> ~ <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension.Mode20">Mode20</see> can be used. <br/> </param>
            <param name="modeY"><see cref="F:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension.Mode1">Mode1</see> ~ <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension.Mode4">Mode4</see> must not be specified. <br/>Instead <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension.Mode17">Mode17</see> ~ <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension.Mode20">Mode20</see> is to be used. <br/><see cref="F:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension.Mode17">Mode17</see> ~ <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension.Mode18">Mode18</see> is to be used with an scan system with SCANahead control (if waiting is yet to occur withing PreviewTime).<br/>Outside of this, <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension.Mode19">Mode19</see> ~ <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension.Mode20">Mode20</see> can be used. <br/> </param>
            <param name="modeZ"><see cref="F:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension.Mode1">Mode1</see> ~ <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension.Mode4">Mode4</see> must not be specified. <br/>Instead <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension.Mode17">Mode17</see> ~ <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension.Mode20">Mode20</see> is to be used. <br/><see cref="F:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension.Mode17">Mode17</see> ~ <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension.Mode18">Mode18</see> is to be used with an scan system with SCANahead control (if waiting is yet to occur withing PreviewTime).<br/>Outside of this, <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension.Mode19">Mode19</see> ~ <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension.Mode20">Mode20</see> can be used. <br/> </param>
            <returns>Success or failed<br/>If return failed, marker would be stopped(or aborted) immediately. <br/></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcMoFExtension.ListMofExtWait(SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension,System.Double,SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderRangeConditionsExtension,System.Boolean,System.Boolean)">
            <summary>
            List wait until a encoder condition has matched (aka. fly extension version)
            </summary>        
            <param name="mode"><see cref="F:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension.Mode1">Mode1</see> ~ <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension.Mode4">Mode4</see> must not be specified. <br/>Instead <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension.Mode17">Mode17</see> ~ <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension.Mode20">Mode20</see> is to be used. <br/><see cref="F:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension.Mode17">Mode17</see> ~ <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension.Mode18">Mode18</see> is to be used with an scan system with SCANahead control (if waiting is yet to occur withing PreviewTime).<br/>Outside of this, <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension.Mode19">Mode19</see> ~ <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension.Mode20">Mode20</see> can be used. <br/> </param>
            <param name="position">Position (mm)</param>
            <param name="cond"><see cref="T:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderRangeConditionsExtension">RtcEncoderRangeConditionsExtension</see></param>
            <param name="isScannerFollowing">Scanner follow the object movement (or stop)</param>
            <param name="isLaserRemain">Laser remains unchanged (or switched off after a <c>LaserOff</c> delay)</param>
            <returns>Success or failed<br/>If return failed, marker would be stopped(or aborted) immediately. <br/></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcMoFExtension.ListMofExtWaitRange(SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension,System.Numerics.Vector2,SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension,System.Numerics.Vector2,System.Boolean,System.Boolean)">
            <summary>
            List wait until x,y encoders reached in-range (aka. fly extension version)
            </summary>
            <param name="modeX"><see cref="F:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension.Mode1">Mode1</see> ~ <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension.Mode4">Mode4</see> must not be specified. <br/>Instead <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension.Mode17">Mode17</see> ~ <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension.Mode20">Mode20</see> is to be used. <br/><see cref="F:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension.Mode17">Mode17</see> ~ <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension.Mode18">Mode18</see> is to be used with an scan system with SCANahead control (if waiting is yet to occur withing PreviewTime).<br/>Outside of this, <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension.Mode19">Mode19</see> ~ <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension.Mode20">Mode20</see> can be used. <br/> </param>
            <param name="rangeX">X min/max range (mm)</param>
            <param name="modeY"><see cref="F:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension.Mode1">Mode1</see> ~ <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension.Mode4">Mode4</see> must not be specified. <br/>Instead <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension.Mode17">Mode17</see> ~ <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension.Mode20">Mode20</see> is to be used. <br/><see cref="F:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension.Mode17">Mode17</see> ~ <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension.Mode18">Mode18</see> is to be used with an scan system with SCANahead control (if waiting is yet to occur withing PreviewTime).<br/>Outside of this, <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension.Mode19">Mode19</see> ~ <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.RtcEncoderModeExtension.Mode20">Mode20</see> can be used. <br/> </param>
            <param name="rangeY">Y min/max range (mm)</param>
            <param name="isScannerFollowing">Scanner follow the object movement (or stop)</param>
            <param name="isLaserRemain">Laser remains unchanged (or switched off after a <c>LaserOff</c> delay)</param>
            <returns>Success or failed<br/>If return failed, marker would be stopped(or aborted) immediately. <br/></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcMoFExtension.ListMofExtEnd(System.Numerics.Vector2)">
            <summary>
            List MoF x,y (or angular) has end (aka. fly extension version)
            </summary>
            <param name="jumpPosition">Jump x,y position (mm)</param>
            <returns>Success or failed<br/>If return failed, marker would be stopped(or aborted) immediately. <br/></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcMoFExtension.ListMofExtEnd(System.Numerics.Vector3)">
            <summary>
            List MoF x,y,z has end (aka. fly extension version)
            </summary>
            <param name="jumpPosition">Jump x,y,z position (mm)</param>
            <returns>Success or failed<br/>If return failed, marker would be stopped(or aborted) immediately. <br/></returns>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.RasterModes">
            <summary>
            Raster modes
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.RasterModes.JumpAndShoot">
            <summary>
            Move scanner by jumps and shoots with jump delays. (slow but accurate) <br/>
            Jump each pixel and output laser signal during pixel duration time. (pixel period is not used) <br/>
            Output analog at <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.ExtensionChannels.ExtAO1">ExtensionChannels.ExtAO1</see>, <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.ExtensionChannels.ExtAO2">ExtensionChannels.ExtAO2</see> are not used (ignored). <br/>
            LASER ON signal will be on an off. <br/>
            <code>
                           ................................................................  
                           .               output signal by laser mode                    .
                           .                                                              .
            LASER  1:  ____................................................................____...
            
                           |...........|  -> jump time at each pixel pitch 
                           |..|           -> each pixel duration time
                           .__.        .____.      .__.        .__.        .__.        .__.  
                           |  |        |    |      |  |        |  |        |  |        |  |  
                           |  |        |    |      |  |        |  |        |  |        |  |  
            LASER ON:  ____|  |________|    |______|  |________|  |________|  |________|  |____...
            </code>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.RasterModes.MicroVector">
            <summary>
            Move scanner by micro-vectors. (fast but in-accurate) <br/>
            Used with <see cref="T:SpiralLab.Sirius2.Scanner.Rtc.IRtcRaster">IRtcRaster</see> only. <br/>
            <see cref="T:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.IRtcSyncAxis">IRtcSyncAxis</see> is not supported. <br/>
            Pixel period used for calculate pixel speed (mm/s = pixel pitch / pixel period). <br/>
            Output each LASER1 signals during pixel duration time. (LASER1 pulse length will be varied by pixel duration time) <br/>
            Output analog at <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.ExtensionChannels.ExtAO1">ExtensionChannels.ExtAO1</see> or <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.ExtensionChannels.ExtAO2">ExtensionChannels.ExtAO2</see> are usable. <br/>
            LASER ON signal will be keep on. <br/>
            <code>
                           |...........|  -> pixel period
                           |..|           -> each pixel duration time 
                           .__.        .____.      .____.      .__.        .__.        .__.  
                           ||||        ||||||      |    |      |  |        |  |        |  |  
                           ||||        ||||||      |    |      |  |        |  |        |  |  
            LASER  1:  ____||||________||||||______|    |______|  |________|  |________|  |____...
            
                           ................................................................  
                           .                 pixel voltage at each pixel                  . 
                           .                                                              .
            ANALOG1/2: ____................................................................____...
            
                           .______________________________________________________________.  
                           |                                                              |  
                           |                                                              |  
            LASER ON:  ____|                                                              |____...
            </code>
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.IRtcRaster">
            <summary>
            IRtcRaster interface (aka. Bitmap or pixel operation)
            </summary>
            <remarks>
            <img src="images/raster.png"/><br/>
            </remarks>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcRaster.ListRasterLine(SpiralLab.Sirius2.Scanner.Rtc.RasterModes,System.Double,System.Numerics.Vector2,System.UInt32,SpiralLab.Sirius2.Scanner.Rtc.ExtensionChannels)">
            <summary>
            List prepare raster line
            <code>
            // Jumps and shoots
            var rtcRaster = rtc as IRtcRaster;
            var image = System.Drawing.Bitmap.FromFile("sample.bmp") as Bitmap;
            int px = bitmap.Width;
            int py = bitmap.Height;
            float pitch = 0.05f; // Pixel pitch = 50um
            double pixelPeriod = 10*1000; // Pixel period: 10 msec (0.01 s)
            double pixelTime = 200; // Max. pixel duration: 0.2 msec (0.02 s)
            rtc.ListBegin();
            for (int y = 0; y &lt; py; y++)
            {
                rtc.ListJumpTo(new Vector2(0, py * pitch));
                rtcRaster.ListRasterLine(RasterModes.JumpAndShoot, pixelPeriod, xPitch, (uint)px);
                for (int x = 0; x &lt; px; x++)
                {
                    var color = bitmap.GetPixel(x, py - y - 1);
                    double grayScale = 1.0 - (0.3 * color.R + 0.59 * color.G + 0.11 * color.B) / 255.0; 
                    rtcRaster.ListRasterPixel(pixelTime * grayScale);
                }
            }
            rtc.ListEnd();
            rtc.ListExecute(true);
            </code>
            </summary>
            <remarks>
            Usable with <see cref="T:SpiralLab.Sirius2.Scanner.Rtc.IRtcMoF">IRtcMoF</see>. <br/>
            Not usable with <see cref="T:SpiralLab.Sirius2.Scanner.Rtc.IRtcAutoLaserControl">IRtcAutoLaserControl</see>, <see cref="T:SpiralLab.Sirius2.Scanner.Rtc.IRtcWobbel">IRtcWobbel</see> or <see cref="T:SpiralLab.Sirius2.Scanner.Rtc.IRtcSkyWriting">IRtcSkyWriting</see>. <br/>
            Each raster line should be preceded by a jump or mark command to the start point of the line. <br/>
            Activated LASER ON signal during rastering and modulated output pulse width by each pixels time. <br/>
            </remarks>
            <param name="mode"><c>RasterModes</c></param>
            <param name="usec">Pixel period (usec)<br/>Used with <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.RasterModes.MicroVector">RasterModes.MicroVector</see><br/></param>
            <param name="vPitch">Pixel pitch (dx, dy) (mm)</param>
            <param name="pixelCount">Pixel counts per line</param>
            <param name="ext">Output analog channel (1 or 2) (Used with <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.RasterModes.MicroVector">RasterModes.MicroVector</see> only)</param>
            <returns>Success or failed<br/>If return failed, marker would be stopped(or aborted) immediately. <br/></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcRaster.ListRasterPixel(System.Double,System.Double)">
            <summary>
            List raster pixel data
            </summary>
            <remarks>
            Should be called repeatly at <c>ListRasterLine</c>'s pixel count times. <br/>
            If <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.RasterModes.JumpAndShoot">RasterModes.JumpAndShoot</see>, jump to move with jump delay and activate LASER signal with on and off. <br/>
            If <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.RasterModes.MicroVector">RasterModes.MicroVector</see>, move with pixel period speed and activate LASER ON signal during rastering with modulated pulse length. <br/>
            </remarks>
            <param name="usec">Pixel duration (usec)<br/>Should be &lt;= 'pixel period' from <c>ListRasterLine</c><br/>Min. time resolution: 1/128(= 0.0078125) usec<br/></param>
            <param name="analogValue">Output analog voltage value at <c>ExtensionChannels</c><br/>Used with <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.RasterModes.MicroVector">RasterModes.MicroVector</see> only<br/>Min. ADC resolution: 12 bits<br/></param>
            <returns>Success or failed<br/>If return failed, marker would be stopped(or aborted) immediately. <br/></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcRaster.ListRasterLine(SpiralLab.Sirius2.Scanner.Rtc.RasterModes,System.Double,System.Numerics.Vector3,System.UInt32,SpiralLab.Sirius2.Scanner.Rtc.ExtensionChannels)">
            <summary>
            List prepare raster 3d line
            </summary>
            <remarks>
            Usable with <see cref="T:SpiralLab.Sirius2.Scanner.Rtc.IRtcMoF">IRtcMoF</see>. <br/>
            Not usable with <see cref="T:SpiralLab.Sirius2.Scanner.Rtc.IRtcAutoLaserControl">IRtcAutoLaserControl</see>, <see cref="T:SpiralLab.Sirius2.Scanner.Rtc.IRtcWobbel">IRtcWobbel</see> or <see cref="T:SpiralLab.Sirius2.Scanner.Rtc.IRtcSkyWriting">IRtcSkyWriting</see>. <br/>
            Each raster line should be preceded by a jump or mark command to the start point of the line. <br/>
            Activated LASER ON signal during rastering and modulated output pulse width by each pixels time. <br/>
            Pixel pulses (at the LASER1 port) directly by the PulseLength parameter, not the LASERON signal. <br/>
            </remarks>
            <param name="mode"><c>RasterModes</c></param>
            <param name="usec">Pixel period (usec)<br/>Min. time resolution: 1/128(= 0.0078125) usec <br/>Used with <c>RasterModes.MicroVector</c> only<br/></param>
            <param name="vPitch">Pixel pitch (dx, dy, dz) (mm)</param>
            <param name="pixelCount">Pixel counts per line</param>
            <param name="ext">Output analog channel (1 or 2) (Used with <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.RasterModes.MicroVector">RasterModes.MicroVector</see> only)</param>
            <returns>Success or failed<br/>If return failed, marker would be stopped(or aborted) immediately. <br/></returns>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.IRtcSerialComm">
            <summary>
            IRtcSerialComm interface
            </summary>
            <remarks>
            Above RTC5 <br/>
            <img src="images/rtc6pciex.png"/><br/>
            Used with RS232 connector at Fig 9.<br/>
            </remarks>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcSerialComm.CtlSerialConfig(System.UInt32)">
            <summary>
            Config RS-232 port
            </summary>
            <remarks>
            Data bits: 8<br/>
            Start bits: 1<br/>
            Stop bits: 1<br/>
            Parity: None<br/>
            </remarks>
            <param name="baudRate">ex) 9600, ...</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcSerialComm.CtlSerialWrite(System.Byte[])">
            <summary>
            (Experimental) Write data by array of bytes
            </summary>
            <param name="bytes">Array of bytes</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcSerialComm.CtlSerialWrite(System.String)">
            <summary>
            Write data by string
            </summary>
            <param name="text">String</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcSerialComm.CtlSerialRead(System.Byte[]@)">
            <summary>
            (Experimental) Read data by array of bytes
            </summary>
            <param name="bytes">Array of read bytes</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcSerialComm.CtlSerialRead(System.String@)">
            <summary>
            Read data by string (converted bytes array to ASCII)
            </summary>
            <param name="data">Read string</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcSerialComm.ListSerialWrite(System.Byte[])">
            <summary>
            List write data by array of bytes
            </summary>
            <param name="bytes">Array of bytes</param>
            <returns>Success or failed<br/>If return failed, marker would be stopped(or aborted) immediately. <br/></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcSerialComm.ListSerialWrite(System.String)">
            <summary>
            List Write data by string
            </summary>
            <param name="text">text data</param>
            <returns>Success or failed<br/>If return failed, marker would be stopped(or aborted) immediately. <br/></returns>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.SkyWritingMode">
            <summary>
            Skywriting modes
            </summary>
            <remarks>
            <img src="images/skywriting.png"/><br/>
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.SkyWritingMode.Deactivate">
            <summary>
            Deactivate
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.SkyWritingMode.Mode1">
            <summary>
            Mode1
            </summary>
            <remarks>
            In the run-in phase, the vector/arc is preceded by a “forerun” movement performed by the galvanometer scanners at mark speed. <br/>
            After the vector/arc has been processed at mark speed, it is gets a short deceleration and retrace movement of the galvanometer scanners (at mark speed) appended in the run-out phase. <br/>
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.SkyWritingMode.Mode2">
            <summary>
            Mode2
            </summary>
            <remarks>
            Each to-be-executed vector/arc gets preceded and appended with a run-in motion and a run-out motion in extension of the vector/arc at mark speed. <br/>
            Within a Sky Writing Mode 2 marking sequence, however, neither forerun motions (in the run-in phase) nor retrace motions (in the run-out phase) of the galvanometer scanners occur. <br/>
            Instead, the RTC5/6 Board executes Sky Writing jumps (at the currently specified jump speed) from jump vector startpoints to run-in startpoints, from run-out endpoints to run-in startpoints, and from run-out endpoints to jump vector endpoints. <br/>
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.SkyWritingMode.Mode3">
            <summary>
            Mode3
            </summary>
            <remarks>
            The time cost of Sky Writing motions for vectors and arcs having only small directional changes within a Polyline is probably disproportionately high for the gained accuracy. <br/>
            Only for larger angle deviations (Cos(φ) &lt; Limit) between successive Mark commands of a Polyline a Sky Writing motions is executed as in <c>SkyWritingMode.Mode2</c>. <br/>
            </remarks>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.IRtcSkyWriting">
            <summary>
            IRtcSkyWriting interface
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcSkyWriting.ListSkyWritingBegin(SpiralLab.Sirius2.Scanner.Rtc.SkyWritingMode,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            List sky writing begin
            <code>
            var rtcSkywriting = rtc as IRtcSkyWriting;
            rtc.ListBegin();
            float width = 10;
            float height = 5;
            var cosineLimit = Math.Cos(89 * Math.PI / 180.0);
            rtcSkywriting.ListSkyWritingBegin(SkyWritingMode.Mode3, 100, 200, 200 * 0.15, 200 * 0.1, cosineLimit);
            rtc.ListJumpTo(new Vector2(-width / 2, height / 2));
            rtc.ListMarkTo(new Vector2(width / 2, height / 2));
            rtc.ListMarkTo(new Vector2(width / 2, -height / 2));
            rtc.ListMarkTo(new Vector2(-width / 2, -height / 2));
            rtc.ListMarkTo(new Vector2(-width / 2, height / 2));
            rtcSkywriting.ListSkyWritingEnd();
            rtc.ListJumpTo(Vector2.Zero);
            rtc.ListEnd();
            rtc.ListExecute(true);
            </code>
            </summary>
            <remarks>
            Cosine(φ) &lt; Limit (= 0) <br/>
            Not usable with <see cref="T:SpiralLab.Sirius2.Scanner.Rtc.IRtcAutoLaserControl">IRtcAutoLaserControl</see> <br/>
            Used with <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.SkyWritingMode.Mode3">SkyWritingMode.Mode3</see> only<br/>
            </remarks>
            <param name="mode"><c>SkyWritingMode</c></param>
            <param name="laserOnShift">Shift ( >0: Delay) of the point of time, where the are switched on (usec)<br/>Min. time resolution: 1/64 usec<br/></param>
            <param name="timeLag">Tracking error (usec)<br/>Min. time resolution: 1/64 usec<br/></param>
            <param name="prev">Time duration of the run-in phase (usec)<br/>Min. time resolution: 10 usec<br/></param>
            <param name="post">Time duration of the run-out phase (usec)<br/>Min. time resolution: 10 usec<br/></param>
            <param name="cosineLimit">Cosine of the angular limit (-1 ~ +1)<br/>
            <code>
                                       | 1
                                    ,--|--.
                                 ,-'   |   `-.           
                               ,'      |      `.
                             ,'        |        `.
                            /          |          \
             -π            /           |           \             π
             +------------+------------+------------\------------+
             ............/             |0            \............
             .........../              |              \...........   
             .........,'               |               `..........   
             .......,'                 |                 `........   
             ....,-'                   |                   `-.....   
             .--'                      | -1                   `--.
            </code>
            </param>
            <returns>Success or failed<br/>If return failed, marker would be stopped(or aborted) immediately. <br/></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcSkyWriting.ListSkyWritingEnd">
            <summary>
            List sky writing end
            </summary>
            <returns>Success or failed<br/>If return failed, marker would be stopped(or aborted) immediately. <br/></returns>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.WobbelShapes">
            <summary>
            Wobbel shapes
            </summary>
            <remarks>
            <img src="images/wobbel.png"/><br/>
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.WobbelShapes.Ellipse">
            <summary>
            Ellipse Shape
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.WobbelShapes.Perpendicular8">
            <summary>
            Perpendicular8 Shape
            <para>above RTC5</para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.WobbelShapes.Parallel8">
            <summary>
            Parallel8 Shape
            <para>above RTC5</para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.Rtc.WobbelShapes.Defined">
            <summary>
            Freely Defined Shape
            <para>above RTC5</para>
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.Rtc.IRtcWobbel">
            <summary>
            IRtcWobbel interface
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcWobbel.ListWobbelDefine(System.Collections.Generic.KeyValuePair{System.Numerics.Vector2,System.UInt32}[],System.Double)">
            <summary>
            List define wobbel shape
            </summary>
            <remarks>
            Used with <see cref="F:SpiralLab.Sirius2.Scanner.Rtc.WobbelShapes.Defined">WobbelShapes.Defined</see>. <br/>
            </remarks>
            <param name="kvList">Key: X (transverse) (mm), Y (longitudinal) (mm)<br/>Value: Period (counts)</param>
            <param name="powerFactor">Power scale factor (-1 ~ +1). If ALC(Automatic Laser Control) is used</param>
            <returns>Success or failed<br/>If return failed, marker would be stopped(or aborted) immediately. <br/></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcWobbel.ListWobbelBegin(System.Double,System.Double,System.Double,SpiralLab.Sirius2.Scanner.Rtc.WobbelShapes)">
            <summary>
            List wobbel begin
            <code>
            var rtcWobbel = rtc as IRtcWobbel;
            float radius = 5;
            float wobbelFrequency = 50;
            rtc.ListBegin();
            rtcWobbel.ListWobbelBegin(0.5, 0.5, wobbelFrequency, WobbelShapes.Ellipse);
            rtc.ListJumpTo(new Vector2(radius, 0));
            rtc.ListArcTo(Vector2.Zero, 360);
            rtc.ListJumpTo(Vector2.Zero);
            rtcWobbel.ListWobbelEnd();
            rtc.ListEnd();
            rtc.ListExecute(true);
            </code>
            <remarks>
            When defining the wobbel shape and its frequency take the dynamics of the scan head and laser into account. <br/>
            Otherwise, an overheating and even a permanent !!! DAMAGE !!! of the system may occur.  <br/>
            Not usable with <see cref="T:SpiralLab.Sirius2.Scanner.Rtc.IRtcRaster">IRtcRaster</see>, <see cref="T:SpiralLab.Sirius2.Scanner.Rtc.IRtcSkyWriting">IRtcSkyWriting</see>. <br/>
            </remarks>
            </summary>
            <param name="longitudinal">Longitudinal (parallel movement) (mm)</param>
            <param name="transverse">Transverse (perpendicular movement) (mm)</param>
            <param name="frequencyHz">Frequency (Hz)<br/>W A R N I N G ! ! !<br/>Max. Wobbel frequency (Hz): <c>Must be lower than 1/(Tracking error * 10)</c><br/>Ex. BasicCube 10: Tracking Error 0.14ms -> 1/1.4ms = 1/0.0014s = 714 Hz<br/>Ex. IntelliSCAN III 10: Tracking Error 0.11ms -> 1/1.1ms = 1/0.0011s = 909 Hz<br/></param>
            <param name="wobbelShape"><c>WobbelShape</c></param>
            <returns>Success or failed<br/>If return failed, marker would be stopped(or aborted) immediately. <br/></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcWobbel.ListWobbelEnd">
            <summary>
            List wobbel end
            </summary>
            <returns>Success or failed<br/>If return failed, marker would be stopped(or aborted) immediately. <br/></returns>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.JobResults">
            <summary>
            Job results
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.JobResults.Failed">
            <summary>
            Failed
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.JobResults.Aborted">
            <summary>
            Aborted
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.JobResults.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.JobResults.Success">
            <summary>
            Success (Finished)
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.IJob">
            <summary>
            IJob interface
            </summary>
            <remarks>
            Job is a set of list commands to works(or marks). <br/>
            <c>IJob</c> has a information from <see cref="M:SpiralLab.Sirius2.Scanner.Rtc.IRtc.ListBegin(SpiralLab.Sirius2.Scanner.Rtc.ListTypes)">ListBegin</see> to <see cref="M:SpiralLab.Sirius2.Scanner.Rtc.IRtc.ListEnd">ListEnd</see>. <br/>
            <c>Rtc5</c>: Used with <see cref="T:SpiralLab.Sirius2.Scanner.Rtc.JobRtc">JobRtc</see>. <br/>
            <c>Rtc6</c>: Used with <see cref="T:SpiralLab.Sirius2.Scanner.Rtc.JobRtc">JobRtc</see>. <br/>
            <c>Rtc6SyncAxis</c>: Used with <see cref="T:SpiralLab.Sirius2.Scanner.Rtc.SyncAxis.JobSyncAxis">JobSyncAxis</see>. <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.IJob.ID">
            <summary>
            Job id
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.IJob.Name">
            <summary>
            Job name
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.IJob.Description">
            <summary>
            Job description
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.IJob.StartTime">
            <summary>
            Started time
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.IJob.EndTime">
            <summary>
            Ended time
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.IJob.ExecutionTime">
            <summary>
            Execution time (s)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.IJob.Result">
            <summary>
            <see cref="T:SpiralLab.Sirius2.Scanner.JobResults">JobResults</see>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Scanner.IJob.Tag">
            <summary>
            User data
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.IScanLab">
            <summary>
            IScanLab interface
            </summary>
            <remarks>
            Tag for <seealso href="http://scanlab.de">(c)SCANLAB</seealso> <br/>
            </remarks>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.IScanner">
            <summary>
            IScanner interface
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.IScanner.CtlMoveTo(System.Numerics.Vector2,System.Double)">
            <summary>
            Move scanner x,y position
            </summary>
            <param name="position">X, Y (mm)</param>
            <param name="overrideJumpSpeed">Override jump speed (mm/s) (0: No override)</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.IScanner.ListJumpTo(System.Numerics.Vector2,System.Double)">
            <summary>
            List jump (move)
            </summary>
            <param name="position">X, Y position (mm)</param>
            <param name="alcScaleFactor">Ramp factor<br/>Used if <see cref="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcAutoLaserControl.ListAlcByVectorBegin``1(SpiralLab.Sirius2.Scanner.Rtc.AutoLaserControlSignals,``0)">ListAlcByVectorBegin</see> has called</param>
            <returns>Success or failed<br/>If return failed, marker would be stopped(or aborted) immediately. <br/></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.IScanner.ListMarkTo(System.Numerics.Vector2,System.Double)">
            <summary>
            List mark (line)
            </summary>
            <param name="position">X, Y position (mm)</param>
            <param name="alcScaleFactor">Ramp factor<br/>Used if <see cref="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcAutoLaserControl.ListAlcByVectorBegin``1(SpiralLab.Sirius2.Scanner.Rtc.AutoLaserControlSignals,``0)">ListAlcByVectorBegin</see> has called</param>
            <returns>Success or failed<br/>If return failed, marker would be stopped(or aborted) immediately. <br/></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.IScanner.ListArcTo(System.Numerics.Vector2,System.Double,System.Double)">
            <summary>
            List arc at center
            </summary>
            <param name="center">Center x, y (mm)</param>
            <param name="sweepAngleZ">Sweep angle (°) (+: CCW, -: CW)</param>
            <param name="alcScaleFactor">(Unsupported!) Ramp factor<br/>Used if <see cref="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcAutoLaserControl.ListAlcByVectorBegin``1(SpiralLab.Sirius2.Scanner.Rtc.AutoLaserControlSignals,``0)">ListAlcByVectorBegin</see> has called</param>
            <returns>Success or failed<br/>If return failed, marker would be stopped(or aborted) immediately. <br/></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.IScanner.ListMarksTo(System.Numerics.Vector2[],System.Double[])">
            <summary>
            List marks (lines)
            </summary>
            <param name="positions">Array of x, y positions (mm)</param>
            <param name="alcScaleFactors">Array of ramp factors<br/>Used if <see cref="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcAutoLaserControl.ListAlcByVectorBegin``1(SpiralLab.Sirius2.Scanner.Rtc.AutoLaserControlSignals,``0)">ListAlcByVectorBegin</see> has called</param>
            <returns>Success or failed<br/>If return failed, marker would be stopped(or aborted) immediately. <br/></returns>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.IScanner3D">
            <summary>
            IScanner interface
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.IScanner3D.CtlMoveTo(System.Numerics.Vector3,System.Double)">
            <summary>
            Move scanner position to x,y,z 
            </summary>
            <param name="position">X, Y, Z (mm) position</param>
            <param name="overrideJumpSpeed">Override jump speed (mm/s) (0: No override)</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.IScanner3D.ListJumpTo(System.Numerics.Vector3,System.Double)">
            <summary>
            List jump 3d (move 3d)
            </summary>
            <param name="position">X, Y, Z (mm) position</param>
            <param name="alcScaleFactor">Ramp factor<br/>Used if <see cref="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcAutoLaserControl.ListAlcByVectorBegin``1(SpiralLab.Sirius2.Scanner.Rtc.AutoLaserControlSignals,``0)">ListAlcByVectorBegin</see> has called</param>
            <returns>Success or failed<br/>If return failed, marker would be stopped(or aborted) immediately. <br/></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.IScanner3D.ListMarkTo(System.Numerics.Vector3,System.Double)">
            <summary>
            List mark 3d (line 3d)
            </summary>
            <param name="position">x,y,z (mm) position</param>
            <param name="alcScaleFactor">Ramp factor<br/>Used if <see cref="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcAutoLaserControl.ListAlcByVectorBegin``1(SpiralLab.Sirius2.Scanner.Rtc.AutoLaserControlSignals,``0)">ListAlcByVectorBegin</see> has called</param>
            <returns>Success or failed<br/>If return failed, marker would be stopped(or aborted) immediately. <br/></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.IScanner3D.ListArcTo(System.Numerics.Vector3,System.Double,System.Double)">
            <summary>
            List arc 3d at center (arc z)
            </summary>
            <remarks>Do NOT use if matrix stack has pushed rotate tranform by x or y axis. Use <c>ListMarkTo</c> or <c>ListMarksTo</c> instead. Because RTC is not support 3x3 matrix with arc movement.</remarks>
            <param name="center">Center x,y,z (mm)</param>
            <param name="sweepAngleZ">Sweep angle (°) (+: CCW, -: CW)</param>
            <param name="alcScaleFactor">(Unsupported!) Ramp factor<br/>Used if <see cref="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcAutoLaserControl.ListAlcByVectorBegin``1(SpiralLab.Sirius2.Scanner.Rtc.AutoLaserControlSignals,``0)">ListAlcByVectorBegin</see> has called</param>
            <returns>Success or failed<br/>If return failed, marker would be stopped(or aborted) immediately. <br/></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Scanner.IScanner3D.ListMarksTo(System.Numerics.Vector3[],System.Double[])">
            <summary>
            List marks 3d (lines 3d)
            </summary>
            <param name="positions">Array of x,y,z positions (mm)</param>
            <param name="alcScaleFactors">Array of ramp factor<br/>Used if <see cref="M:SpiralLab.Sirius2.Scanner.Rtc.IRtcAutoLaserControl.ListAlcByVectorBegin``1(SpiralLab.Sirius2.Scanner.Rtc.AutoLaserControlSignals,``0)">ListAlcByVectorBegin</see> has called</param>
            <returns>Success or failed<br/>If return failed, marker would be stopped(or aborted) immediately. <br/></returns>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.RTC4Wrap">
            <summary>
            Static RTC4 Wrapper class.
            Notice that the construction of the RTC4Wrap object or an initial
            call of any RTC4Wrap method may throw a TypeInitializationException
            exception, which indicates that the required DLL is missing or the
            import of a particular DLL function failed. In order to analyze and
            properly handle such an error condition you need to catch that
            TypeInitializationException type exception.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_get_waveform">
            <summary>
             void n_get_waveform(ushort n, ushort channel, ushort istop, short[] memptr);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.get_waveform">
            <summary>
             void get_waveform(ushort channel, ushort istop, short[] memptr);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_measurement_status">
            <summary>
             void n_measurement_status(ushort n, out ushort busy, out ushort position);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.measurement_status">
            <summary>
             void measurement_status(out ushort busy, out ushort position);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_set_trigger">
            <summary>
             void n_set_trigger(ushort n, ushort sampleperiod, ushort channel1, ushort channel2);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.set_trigger">
            <summary>
             void set_trigger(ushort sampleperiod, ushort signal1, ushort signal2);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_get_value">
            <summary>
             short n_get_value(ushort n, ushort signal);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.get_value">
            <summary>
             short get_value(ushort signal);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_set_io_bit">
            <summary>
             void n_set_io_bit(ushort n, ushort mask1);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.set_io_bit">
            <summary>
             void set_io_bit(ushort mask1);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_clear_io_bit">
            <summary>
             void n_clear_io_bit(ushort n, ushort mask0);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.clear_io_bit">
            <summary>
             void clear_io_bit(ushort mask0);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_move_to">
            <summary>
             void n_move_to(ushort n, ushort position);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.move_to">
            <summary>
             void move_to(ushort position);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_control_command">
            <summary>
             void n_control_command(ushort n, ushort head, ushort axis, ushort data);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.control_command">
            <summary>
             void control_command(ushort head, ushort axis, ushort data);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_arc_rel">
            <summary>
             void n_arc_rel(ushort n, short dx, short dy, double angle);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.arc_rel">
            <summary>
             void arc_rel(short dx, short dy, double angle);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_arc_abs">
            <summary>
             void n_arc_abs(ushort n, short x, short y, double angle);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.arc_abs">
            <summary>
             void arc_abs(short x, short y, double angle);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.drilling">
            <summary>
             void drilling(short pulsewidth, short relencoderdelay);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.regulation">
            <summary>
             void regulation();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.flyline">
            <summary>
             void flyline(short encoderdelay);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.set_duty_cycle_table">
            <summary>
             void set_duty_cycle_table(ushort index, ushort dutycycle);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_load_varpolydelay">
            <summary>
             short n_load_varpolydelay(ushort n, string stbfilename, ushort tableno);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.load_varpolydelay">
            <summary>
             short load_varpolydelay(string stbfilename, ushort tableno);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_load_program_file">
            <summary>
             short n_load_program_file(ushort n, string name);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.load_program_file">
            <summary>
             short load_program_file(string name);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_load_correction_file">
            <summary>
             short n_load_correction_file(ushort n, string filename, short cortable, double kx, double ky, double phi, double xoffset, double yoffset);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.load_correction_file">
            <summary>
             short load_correction_file(string filename, short cortable, double kx, double ky, double phi, double xoffset, double yoffset);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_load_z_table">
            <summary>
             short n_load_z_table(ushort n, double a, double b, double c);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.load_z_table">
            <summary>
             short load_z_table(double a, double b, double c);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_list_nop">
            <summary>
             void n_list_nop(ushort n);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.list_nop">
            <summary>
             void list_nop();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_set_end_of_list">
            <summary>
             void n_set_end_of_list(ushort n);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.set_end_of_list">
            <summary>
             void set_end_of_list();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_jump_abs_3d">
            <summary>
             void n_jump_abs_3d(ushort n, short x, short y, short z);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.jump_abs_3d">
            <summary>
             void jump_abs_3d(short x, short y, short z);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_jump_abs">
            <summary>
             void n_jump_abs(ushort n, short x, short y);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.jump_abs">
            <summary>
             void jump_abs(short x, short y);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_mark_abs_3d">
            <summary>
             void n_mark_abs_3d(ushort n, short x, short y, short z);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.mark_abs_3d">
            <summary>
             void mark_abs_3d(short x, short y, short z);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_mark_abs">
            <summary>
             void n_mark_abs(ushort n, short x, short y);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.mark_abs">
            <summary>
             void mark_abs(short x, short y);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_jump_rel_3d">
            <summary>
             void n_jump_rel_3d(ushort n, short dx, short dy, short dz);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.jump_rel_3d">
            <summary>
             void jump_rel_3d(short dx, short dy, short dz);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_jump_rel">
            <summary>
             void n_jump_rel(ushort n, short dx, short dy);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.jump_rel">
            <summary>
             void jump_rel(short dx, short dy);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_mark_rel_3d">
            <summary>
             void n_mark_rel_3d(ushort n, short dx, short dy, short dz);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.mark_rel_3d">
            <summary>
             void mark_rel_3d(short dx, short dy, short dz);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_mark_rel">
            <summary>
             void n_mark_rel(ushort n, short dx, short dy);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.mark_rel">
            <summary>
             void mark_rel(short dx, short dy);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_write_8bit_port_list">
            <summary>
             void n_write_8bit_port_list(ushort n, ushort value);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.write_8bit_port_list">
            <summary>
             void write_8bit_port_list(ushort value);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_write_da_1_list">
            <summary>
             void n_write_da_1_list(ushort n, ushort value);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.write_da_1_list">
            <summary>
             void write_da_1_list(ushort value);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_write_da_2_list">
            <summary>
             void n_write_da_2_list(ushort n, ushort value);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.write_da_2_list">
            <summary>
             void write_da_2_list(ushort value);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_set_matrix_list">
            <summary>
             void n_set_matrix_list(ushort n, ushort i, ushort j, double mij);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.set_matrix_list">
            <summary>
             void set_matrix_list(ushort i, ushort j, double mij);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_set_offset_list">
            <summary>
             void n_set_offset_list(ushort n, short xoffset, short yoffset);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.set_offset_list">
            <summary>
             void set_offset_list(short xoffset, short yoffset);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_set_defocus_list">
            <summary>
             void n_set_defocus_list(ushort n, short value);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.set_defocus_list">
            <summary>
             void set_defocus_list(short value);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_set_defocus">
            <summary>
             void n_set_defocus(ushort n, short value);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.set_defocus">
            <summary>
             void set_defocus(short value);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_set_softstart_mode">
            <summary>
             void n_set_softstart_mode(ushort n, ushort mode, ushort number, ushort restartdelay);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.set_softstart_mode">
            <summary>
             void set_softstart_mode(ushort mode, ushort number, ushort resetdelay);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_set_softstart_level">
            <summary>
             void n_set_softstart_level(ushort n, ushort index, ushort level);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.set_softstart_level">
            <summary>
             void set_softstart_level(ushort index, ushort level);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_set_control_mode_list">
            <summary>
             void n_set_control_mode_list(ushort n, ushort mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.set_control_mode_list">
            <summary>
             void set_control_mode_list(ushort mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_set_control_mode">
            <summary>
             void n_set_control_mode(ushort n, ushort mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.set_control_mode">
            <summary>
             void set_control_mode(ushort mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_long_delay">
            <summary>
             void n_long_delay(ushort n, ushort value);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.long_delay">
            <summary>
             void long_delay(ushort value);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_laser_on_list">
            <summary>
             void n_laser_on_list(ushort n, ushort value);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.laser_on_list">
            <summary>
             void laser_on_list(ushort value);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_set_jump_speed">
            <summary>
             void n_set_jump_speed(ushort n, double speed);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.set_jump_speed">
            <summary>
             void set_jump_speed(double speed);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_set_mark_speed">
            <summary>
             void n_set_mark_speed(ushort n, double speed);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.set_mark_speed">
            <summary>
             void set_mark_speed(double speed);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_set_laser_delays">
            <summary>
             void n_set_laser_delays(ushort n, short ondelay, short offdelay);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.set_laser_delays">
            <summary>
             void set_laser_delays(short ondelay, short offdelay);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_set_scanner_delays">
            <summary>
             void n_set_scanner_delays(ushort n, ushort jumpdelay, ushort markdelay, ushort polydelay);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.set_scanner_delays">
            <summary>
             void set_scanner_delays(ushort jumpdelay, ushort markdelay, ushort polydelay);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_set_list_jump">
            <summary>
             void n_set_list_jump(ushort n, ushort position);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.set_list_jump">
            <summary>
             void set_list_jump(ushort position);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_set_input_pointer">
            <summary>
             void n_set_input_pointer(ushort n, ushort pointer);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.set_input_pointer">
            <summary>
             void set_input_pointer(ushort pointer);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_list_call">
            <summary>
             void n_list_call(ushort n, ushort position);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.list_call">
            <summary>
             void list_call(ushort position);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_list_return">
            <summary>
             void n_list_return(ushort n);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.list_return">
            <summary>
             void list_return();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_z_out_list">
            <summary>
             void n_z_out_list(ushort n, short z);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.z_out_list">
            <summary>
             void z_out_list(short z);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_set_standby_list">
            <summary>
             void n_set_standby_list(ushort n, ushort half_period, ushort pulse);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.set_standby_list">
            <summary>
             void set_standby_list(ushort half_period, ushort pulse);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_timed_jump_abs">
            <summary>
             void n_timed_jump_abs(ushort n, short x, short y, double time);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.timed_jump_abs">
            <summary>
             void timed_jump_abs(short x, short y, double time);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_timed_mark_abs">
            <summary>
             void n_timed_mark_abs(ushort n, short x, short y, double time);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.timed_mark_abs">
            <summary>
             void timed_mark_abs(short x, short y, double time);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_timed_jump_rel">
            <summary>
             void n_timed_jump_rel(ushort n, short dx, short dy, double time);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.timed_jump_rel">
            <summary>
             void timed_jump_rel(short dx, short dy, double time);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_timed_mark_rel">
            <summary>
             void n_timed_mark_rel(ushort n, short dx, short dy, double time);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.timed_mark_rel">
            <summary>
             void timed_mark_rel(short dx, short dy, double time);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_set_laser_timing">
            <summary>
             void n_set_laser_timing(ushort n, ushort halfperiod, ushort pulse1, ushort pulse2, ushort timebase);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.set_laser_timing">
            <summary>
             void set_laser_timing(ushort halfperiod, ushort pulse1, ushort pulse2, ushort timebase);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_set_wobbel">
            <summary>
             void n_set_wobbel(ushort n, ushort amplitude, double frequency);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.set_wobbel">
            <summary>
             void set_wobbel(ushort amplitude, double frequency);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_set_wobbel_xy">
            <summary>
             void n_set_wobbel_xy(ushort n, ushort long_wob, ushort trans_wob, double frequency);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.set_wobbel_xy">
            <summary>
             void set_wobbel_xy(ushort long_wob, ushort trans_wob, double frequency);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_set_fly_x">
            <summary>
             void n_set_fly_x(ushort n, double kx);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.set_fly_x">
            <summary>
             void set_fly_x(double kx);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_set_fly_y">
            <summary>
             void n_set_fly_y(ushort n, double ky);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.set_fly_y">
            <summary>
             void set_fly_y(double ky);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_set_fly_rot">
            <summary>
             void n_set_fly_rot(ushort n, double resolution);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.set_fly_rot">
            <summary>
             void set_fly_rot(double resolution);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_fly_return">
            <summary>
             void n_fly_return(ushort n, short x, short y);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.fly_return">
            <summary>
             void fly_return(short x, short y);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_calculate_fly">
            <summary>
             void n_calculate_fly(ushort n, ushort direction, double distance);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.calculate_fly">
            <summary>
             void calculate_fly(ushort direction, double distance);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_write_io_port_list">
            <summary>
             void n_write_io_port_list(ushort n, ushort value);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.write_io_port_list">
            <summary>
             void write_io_port_list(ushort value);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_select_cor_table_list">
            <summary>
             void n_select_cor_table_list(ushort n, ushort heada, ushort headb);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.select_cor_table_list">
            <summary>
             void select_cor_table_list(ushort heada, ushort headb);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_set_wait">
            <summary>
             void n_set_wait(ushort n, ushort value);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.set_wait">
            <summary>
             void set_wait(ushort value);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_simulate_ext_start">
            <summary>
             void n_simulate_ext_start(ushort n, short delay, short encoder);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.simulate_ext_start">
            <summary>
             void simulate_ext_start(short delay, short encoder);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_write_da_x_list">
            <summary>
             void n_write_da_x_list(ushort n, ushort x, ushort value);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.write_da_x_list">
            <summary>
             void write_da_x_list(ushort x, ushort value);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_set_pixel_line">
            <summary>
             void n_set_pixel_line(ushort n, ushort pixelmode, ushort pixelperiod, double dx, double dy);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.set_pixel_line">
            <summary>
             void set_pixel_line(ushort pixelmode, ushort pixelperiod, double dx, double dy);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_set_pixel">
            <summary>
             void n_set_pixel(ushort n, ushort pulswidth, ushort davalue, ushort adchannel);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.set_pixel">
            <summary>
             void set_pixel(ushort pulswidth, ushort davalue, ushort adchannel);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_set_extstartpos_list">
            <summary>
             void n_set_extstartpos_list(ushort n, ushort position);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.set_extstartpos_list">
            <summary>
             void set_extstartpos_list(ushort position);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_laser_signal_on_list">
            <summary>
             void n_laser_signal_on_list(ushort n);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.laser_signal_on_list">
            <summary>
             void laser_signal_on_list();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_laser_signal_off_list">
            <summary>
             void n_laser_signal_off_list(ushort n);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.laser_signal_off_list">
            <summary>
             void laser_signal_off_list();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_set_firstpulse_killer_list">
            <summary>
             void n_set_firstpulse_killer_list(ushort n, ushort fpk);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.set_firstpulse_killer_list">
            <summary>
             void set_firstpulse_killer_list(ushort fpk);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_set_io_cond_list">
            <summary>
             void n_set_io_cond_list(ushort n, ushort mask_1, ushort mask_0, ushort mask_set);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.set_io_cond_list">
            <summary>
             void set_io_cond_list(ushort mask_1, ushort mask_0, ushort mask_set);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_clear_io_cond_list">
            <summary>
             void n_clear_io_cond_list(ushort n, ushort mask_1, ushort mask_0, ushort mask_clear);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.clear_io_cond_list">
            <summary>
             void clear_io_cond_list(ushort mask_1, ushort mask_0, ushort mask_clear);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_list_jump_cond">
            <summary>
             void n_list_jump_cond(ushort n, ushort mask_1, ushort mask_0, ushort position);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.list_jump_cond">
            <summary>
             void list_jump_cond(ushort mask_1, ushort mask_0, ushort position);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_list_call_cond">
            <summary>
             void n_list_call_cond(ushort n, ushort mask_1, ushort mask_0, ushort position);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.list_call_cond">
            <summary>
             void list_call_cond(ushort mask_1, ushort mask_0, ushort position);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_get_input_pointer">
            <summary>
             ushort n_get_input_pointer(ushort n);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.get_input_pointer">
            <summary>
             ushort get_input_pointer();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.select_rtc">
            <summary>
             void select_rtc(ushort cardno);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.rtc4_count_cards">
            <summary>
             ushort rtc4_count_cards();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_get_status">
            <summary>
             void n_get_status(ushort n, out ushort busy, out ushort position);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.get_status">
            <summary>
             void get_status(out ushort busy, out ushort position);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_read_status">
            <summary>
             ushort n_read_status(ushort n);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.read_status">
            <summary>
             ushort read_status();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_get_startstop_info">
            <summary>
             ushort n_get_startstop_info(ushort n);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.get_startstop_info">
            <summary>
             ushort get_startstop_info();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_get_marking_info">
            <summary>
             ushort n_get_marking_info(ushort n);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.get_marking_info">
            <summary>
             ushort get_marking_info();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.get_dll_version">
            <summary>
             ushort get_dll_version();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_set_start_list_1">
            <summary>
             void n_set_start_list_1(ushort n);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.set_start_list_1">
            <summary>
             void set_start_list_1();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_set_start_list_2">
            <summary>
             void n_set_start_list_2(ushort n);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.set_start_list_2">
            <summary>
             void set_start_list_2();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_set_start_list">
            <summary>
             void n_set_start_list(ushort n, ushort listno);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.set_start_list">
            <summary>
             void set_start_list(ushort listno);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_execute_list_1">
            <summary>
             void n_execute_list_1(ushort n);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.execute_list_1">
            <summary>
             void execute_list_1();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_execute_list_2">
            <summary>
             void n_execute_list_2(ushort n);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.execute_list_2">
            <summary>
             void execute_list_2();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_execute_list">
            <summary>
             void n_execute_list(ushort n, ushort listno);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.execute_list">
            <summary>
             void execute_list(ushort listno);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_write_8bit_port">
            <summary>
             void n_write_8bit_port(ushort n, ushort value);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.write_8bit_port">
            <summary>
             void write_8bit_port(ushort value);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_write_io_port">
            <summary>
             void n_write_io_port(ushort n, ushort value);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.write_io_port">
            <summary>
             void write_io_port(ushort value);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_auto_change">
            <summary>
             void n_auto_change(ushort n);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.auto_change">
            <summary>
             void auto_change();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_auto_change_pos">
            <summary>
             void n_auto_change_pos(ushort n, ushort start);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.auto_change_pos">
            <summary>
             void auto_change_pos(ushort start);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.aut_change">
            <summary>
             void aut_change();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_start_loop">
            <summary>
             void n_start_loop(ushort n);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.start_loop">
            <summary>
             void start_loop();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_quit_loop">
            <summary>
             void n_quit_loop(ushort n);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.quit_loop">
            <summary>
             void quit_loop();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_stop_execution">
            <summary>
             void n_stop_execution(ushort n);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.stop_execution">
            <summary>
             void stop_execution();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_read_io_port">
            <summary>
             ushort n_read_io_port(ushort n);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.read_io_port">
            <summary>
             ushort read_io_port();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_write_da_1">
            <summary>
             void n_write_da_1(ushort n, ushort value);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.write_da_1">
            <summary>
             void write_da_1(ushort value);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_write_da_2">
            <summary>
             void n_write_da_2(ushort n, ushort value);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.write_da_2">
            <summary>
             void write_da_2(ushort value);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_set_max_counts">
            <summary>
             void n_set_max_counts(ushort n, int counts);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.set_max_counts">
            <summary>
             void set_max_counts(int counts);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_get_counts">
            <summary>
             int n_get_counts(ushort n);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.get_counts">
            <summary>
             int get_counts();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_set_matrix">
            <summary>
             void n_set_matrix(ushort n, double m11, double m12, double m21, double m22);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.set_matrix">
            <summary>
             void set_matrix(double m11, double m12, double m21, double m22);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_set_offset">
            <summary>
             void n_set_offset(ushort n, short xoffset, short yoffset);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.set_offset">
            <summary>
             void set_offset(short xoffset, short yoffset);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_goto_xyz">
            <summary>
             void n_goto_xyz(ushort n, short x, short y, short z);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.goto_xyz">
            <summary>
             void goto_xyz(short x, short y, short z);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_goto_xy">
            <summary>
             void n_goto_xy(ushort n, short x, short y);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.goto_xy">
            <summary>
             void goto_xy(short x, short y);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_get_hex_version">
            <summary>
             ushort n_get_hex_version(ushort n);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.get_hex_version">
            <summary>
             ushort get_hex_version();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_disable_laser">
            <summary>
             void n_disable_laser(ushort n);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.disable_laser">
            <summary>
             void disable_laser();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_enable_laser">
            <summary>
             void n_enable_laser(ushort n);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.enable_laser">
            <summary>
             void enable_laser();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_stop_list">
            <summary>
             void n_stop_list(ushort n);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.stop_list">
            <summary>
             void stop_list();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_restart_list">
            <summary>
             void n_restart_list(ushort n);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.restart_list">
            <summary>
             void restart_list();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_get_xyz_pos">
            <summary>
             void n_get_xyz_pos(ushort n, out short x, out short y, out short z);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.get_xyz_pos">
            <summary>
             void get_xyz_pos(out short x, out short y, out short z);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_get_xy_pos">
            <summary>
             void n_get_xy_pos(ushort n, out short x, out short y);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.get_xy_pos">
            <summary>
             void get_xy_pos(out short x, out short y);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_select_list">
            <summary>
             void n_select_list(ushort n, ushort list_2);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.select_list">
            <summary>
             void select_list(ushort list_2);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_z_out">
            <summary>
             void n_z_out(ushort n, short z);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.z_out">
            <summary>
             void z_out(short z);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_set_firstpulse_killer">
            <summary>
             void n_set_firstpulse_killer(ushort n, ushort fpk);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.set_firstpulse_killer">
            <summary>
             void set_firstpulse_killer(ushort fpk);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_set_standby">
            <summary>
             void n_set_standby(ushort n, ushort half_period, ushort pulse);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.set_standby">
            <summary>
             void set_standby(ushort half_period, ushort pulse);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_laser_signal_on">
            <summary>
             void n_laser_signal_on(ushort n);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.laser_signal_on">
            <summary>
             void laser_signal_on();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_laser_signal_off">
            <summary>
             void n_laser_signal_off(ushort n);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.laser_signal_off">
            <summary>
             void laser_signal_off();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_set_delay_mode">
            <summary>
             void n_set_delay_mode(ushort n, ushort varpoly, ushort directmove3d, ushort edgelevel, ushort minjumpdelay, ushort jumplengthlimit);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.set_delay_mode">
            <summary>
             void set_delay_mode(ushort varpoly, ushort directmove3d, ushort edgelevel, ushort minjumpdelay, ushort jumplengthlimit);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_set_piso_control">
            <summary>
             void n_set_piso_control(ushort n, ushort l1, ushort l2);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.set_piso_control">
            <summary>
             void set_piso_control(ushort l1, ushort l2);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_select_status">
            <summary>
             void n_select_status(ushort n, ushort mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.select_status">
            <summary>
             void select_status(ushort mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_get_encoder">
            <summary>
             void n_get_encoder(ushort n, out short zx, out short zy);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.get_encoder">
            <summary>
             void get_encoder(out short zx, out short zy);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_select_cor_table">
            <summary>
             void n_select_cor_table(ushort n, ushort heada, ushort headb);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.select_cor_table">
            <summary>
             void select_cor_table(ushort heada, ushort headb);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_execute_at_pointer">
            <summary>
             void n_execute_at_pointer(ushort n, ushort position);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.execute_at_pointer">
            <summary>
             void execute_at_pointer(ushort position);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_get_head_status">
            <summary>
             ushort n_get_head_status(ushort n, ushort head);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.get_head_status">
            <summary>
             ushort get_head_status(ushort head);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_simulate_encoder">
            <summary>
             void n_simulate_encoder(ushort n, ushort channel);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.simulate_encoder">
            <summary>
             void simulate_encoder(ushort channel);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_release_wait">
            <summary>
             void n_release_wait(ushort n);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.release_wait">
            <summary>
             void release_wait();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_get_wait_status">
            <summary>
             ushort n_get_wait_status(ushort n);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.get_wait_status">
            <summary>
             ushort get_wait_status();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_set_laser_mode">
            <summary>
             void n_set_laser_mode(ushort n, ushort mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.set_laser_mode">
            <summary>
             void set_laser_mode(ushort mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_set_ext_start_delay">
            <summary>
             void n_set_ext_start_delay(ushort n, short delay, short encoder);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.set_ext_start_delay">
            <summary>
             void set_ext_start_delay(short delay, short encoder);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_home_position">
            <summary>
             void n_home_position(ushort n, short xhome, short yhome);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.home_position">
            <summary>
             void home_position(short xhome, short yhome);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_set_rot_center">
            <summary>
             void n_set_rot_center(ushort n, int center_x, int center_y);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.set_rot_center">
            <summary>
             void set_rot_center(int center_x, int center_y);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_dsp_start">
            <summary>
             void n_dsp_start(ushort n);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.dsp_start">
            <summary>
             void dsp_start();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_write_da_x">
            <summary>
             void n_write_da_x(ushort n, ushort x, ushort value);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.write_da_x">
            <summary>
             void write_da_x(ushort x, ushort value);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_read_ad_x">
            <summary>
             ushort n_read_ad_x(ushort n, ushort x);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.read_ad_x">
            <summary>
             ushort read_ad_x(ushort x);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_read_pixel_ad">
            <summary>
             ushort n_read_pixel_ad(ushort n, ushort pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.read_pixel_ad">
            <summary>
             ushort read_pixel_ad(ushort pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_get_z_distance">
            <summary>
             short n_get_z_distance(ushort n, short x, short y, short z);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.get_z_distance">
            <summary>
             short get_z_distance(short x, short y, short z);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_get_io_status">
            <summary>
             ushort n_get_io_status(ushort n);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.get_io_status">
            <summary>
             ushort get_io_status();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.load_cor">
            <summary>
             short load_cor(string filename);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.load_pro">
            <summary>
             short load_pro(string filename);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_get_serial_number">
            <summary>
             ushort n_get_serial_number(ushort n);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.get_serial_number">
            <summary>
             ushort get_serial_number();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_get_serial_number_32">
            <summary>
             int n_get_serial_number_32(ushort n);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.get_serial_number_32">
            <summary>
             int get_serial_number_32();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_get_rtc_version">
            <summary>
             ushort n_get_rtc_version(ushort n);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.get_rtc_version">
            <summary>
             ushort get_rtc_version();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_auto_cal">
            <summary>
             short n_auto_cal(ushort n, ushort head, ushort command);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.auto_cal">
            <summary>
             short auto_cal(ushort head, ushort command);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_set_hi">
            <summary>
             void n_set_hi(ushort n, double galvogainx, double galvogainy, short galvooffsetx, short galvooffsety, short head);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.set_hi">
            <summary>
             void set_hi(double galvogainx, double galvogainy, short galvooffsetx, short galvooffsety, short head);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_set_list_mode">
            <summary>
             void n_set_list_mode(ushort n, ushort mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.set_list_mode">
            <summary>
             void set_list_mode(ushort mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_get_list_space">
            <summary>
             ushort n_get_list_space(ushort n);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.get_list_space">
            <summary>
             ushort get_list_space();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_save_and_restart_timer">
            <summary>
             void n_save_and_restart_timer(ushort n);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.save_and_restart_timer">
            <summary>
             void save_and_restart_timer();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_set_ext_start_delay_list">
            <summary>
             void n_set_ext_start_delay_list(ushort n, short delay, short encoder);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.set_ext_start_delay_list">
            <summary>
             void set_ext_start_delay_list(short delay, short encoder);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.n_get_time">
            <summary>
             double n_get_time(ushort n);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.get_time">
            <summary>
             double get_time();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.get_hi_data">
            <summary>
             void get_hi_data(out ushort x1, out ushort x2, out ushort y1, out ushort y2);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC4Wrap.teachin">
            <summary>
             short teachin(string filename, short xin, short yin, short zin, double ll0, out short xout, out short yout, out short zout);
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.RTC5Wrap">
            <summary>
            Notice that the construction of the RTC5Import object or an initial
            call of any RTC5Import method may throw a TypeInitializationException
            exception, which indicates that the required DLL is missing or the
            import of a particular DLL function failed. In order to analyze and
            properly handle such an error condition you need to catch that
            TypeInitializationException type exception.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.Initialized">
            <summary>
            dll 초기화 여부
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.init_rtc5_dll">
            <summary>
             uint init_rtc5_dll();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.free_rtc5_dll">
            <summary>
             void free_rtc5_dll();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_rtc4_mode">
            <summary>
             void set_rtc4_mode();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_rtc5_mode">
            <summary>
             void set_rtc5_mode();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.get_rtc_mode">
            <summary>
             uint get_rtc_mode();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_get_error">
            <summary>
             uint n_get_error(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_get_last_error">
            <summary>
             uint n_get_last_error(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_reset_error">
            <summary>
             void n_reset_error(uint CardNo, uint Code);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_verify">
            <summary>
             uint n_set_verify(uint CardNo, uint Verify);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.get_error">
            <summary>
             uint get_error();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.get_last_error">
            <summary>
             uint get_last_error();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.reset_error">
            <summary>
             void reset_error(uint Code);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_verify">
            <summary>
             uint set_verify(uint Verify);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.verify_checksum">
            <summary>
             uint verify_checksum(string Name);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.read_abc_from_file">
            <summary>
             uint read_abc_from_file(string Name, out double A, out double B, out double C);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.write_abc_to_file">
            <summary>
             uint write_abc_to_file(string Name, double A, double B, double C);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.rtc5_count_cards">
            <summary>
             uint rtc5_count_cards();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.acquire_rtc">
            <summary>
             uint acquire_rtc(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.release_rtc">
            <summary>
             uint release_rtc(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.select_rtc">
            <summary>
             uint select_rtc(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.get_dll_version">
            <summary>
             uint get_dll_version();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_get_serial_number">
            <summary>
             uint n_get_serial_number(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_get_hex_version">
            <summary>
             uint n_get_hex_version(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_get_rtc_version">
            <summary>
             uint n_get_rtc_version(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.get_serial_number">
            <summary>
             uint get_serial_number();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.get_hex_version">
            <summary>
             uint get_hex_version();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.get_rtc_version">
            <summary>
             uint get_rtc_version();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_load_program_file">
            <summary>
             uint n_load_program_file(uint CardNo, string Path);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_sync_slaves">
            <summary>
             void n_sync_slaves(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_get_sync_status">
            <summary>
             uint n_get_sync_status(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_load_correction_file">
            <summary>
             uint n_load_correction_file(uint CardNo, string Name, uint No, uint Dim);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_load_zoom_correction_file">
            <summary>
             uint n_load_zoom_correction_file(uint CardNo, string Name, uint No);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_load_z_table">
            <summary>
             uint n_load_z_table(uint CardNo, double A, double B, double C);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_select_cor_table">
            <summary>
             void n_select_cor_table(uint CardNo, uint HeadA, uint HeadB);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_dsp_mode">
            <summary>
             uint n_set_dsp_mode(uint CardNo, uint Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_load_stretch_table">
            <summary>
             int n_load_stretch_table(uint CardNo, string Name, int No);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_number_of_correction_tables">
            <summary>
             void n_number_of_correction_tables(uint CardNo, uint Number);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_get_head_para">
            <summary>
             double n_get_head_para(uint CardNo, uint HeadNo, uint ParaNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_get_table_para">
            <summary>
             double n_get_table_para(uint CardNo, uint TableNo, uint ParaNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.load_program_file">
            <summary>
             uint load_program_file(string Path);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.sync_slaves">
            <summary>
             void sync_slaves();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.get_sync_status">
            <summary>
             uint get_sync_status();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.load_correction_file">
            <summary>
             uint load_correction_file(string Name, uint No, uint Dim);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.load_zoom_correction_file">
            <summary>
             uint load_zoom_correction_file(string Name, uint No);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.load_z_table">
            <summary>
             uint load_z_table(double A, double B, double C);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.select_cor_table">
            <summary>
             void select_cor_table(uint HeadA, uint HeadB);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_dsp_mode">
            <summary>
             uint set_dsp_mode(uint Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.load_stretch_table">
            <summary>
             int load_stretch_table(string Name, int No);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.number_of_correction_tables">
            <summary>
             void number_of_correction_tables(uint Number);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.get_head_para">
            <summary>
             double get_head_para(uint HeadNo, uint ParaNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.get_table_para">
            <summary>
             double get_table_para(uint TableNo, uint ParaNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_config_list">
            <summary>
             void n_config_list(uint CardNo, uint Mem1, uint Mem2);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_get_config_list">
            <summary>
             void n_get_config_list(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_save_disk">
            <summary>
             uint n_save_disk(uint CardNo, string Name, uint Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_load_disk">
            <summary>
             uint n_load_disk(uint CardNo, string Name, uint Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_get_list_space">
            <summary>
             uint n_get_list_space(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.config_list">
            <summary>
             void config_list(uint Mem1, uint Mem2);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.get_config_list">
            <summary>
             void get_config_list();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.save_disk">
            <summary>
             uint save_disk(string Name, uint Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.load_disk">
            <summary>
             uint load_disk(string Name, uint Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.get_list_space">
            <summary>
             uint get_list_space();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_start_list_pos">
            <summary>
             void n_set_start_list_pos(uint CardNo, uint ListNo, uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_start_list">
            <summary>
             void n_set_start_list(uint CardNo, uint ListNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_start_list_1">
            <summary>
             void n_set_start_list_1(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_start_list_2">
            <summary>
             void n_set_start_list_2(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_input_pointer">
            <summary>
             void n_set_input_pointer(uint CardNo, uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_load_list">
            <summary>
             uint n_load_list(uint CardNo, uint ListNo, uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_load_sub">
            <summary>
             void n_load_sub(uint CardNo, uint Index);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_load_char">
            <summary>
             void n_load_char(uint CardNo, uint Char);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_load_text_table">
            <summary>
             void n_load_text_table(uint CardNo, uint Index);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_get_list_pointer">
            <summary>
             void n_get_list_pointer(uint CardNo, out uint ListNo, out uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_get_input_pointer">
            <summary>
             uint n_get_input_pointer(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_start_list_pos">
            <summary>
             void set_start_list_pos(uint ListNo, uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_start_list">
            <summary>
             void set_start_list(uint ListNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_start_list_1">
            <summary>
             void set_start_list_1();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_start_list_2">
            <summary>
             void set_start_list_2();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_input_pointer">
            <summary>
             void set_input_pointer(uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.load_list">
            <summary>
             uint load_list(uint ListNo, uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.load_sub">
            <summary>
             void load_sub(uint Index);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.load_char">
            <summary>
             void load_char(uint Char);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.load_text_table">
            <summary>
             void load_text_table(uint Index);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.get_list_pointer">
            <summary>
             void get_list_pointer(out uint ListNo, out uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.get_input_pointer">
            <summary>
             uint get_input_pointer();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_execute_list_pos">
            <summary>
             void n_execute_list_pos(uint CardNo, uint ListNo, uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_execute_at_pointer">
            <summary>
             void n_execute_at_pointer(uint CardNo, uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_execute_list">
            <summary>
             void n_execute_list(uint CardNo, uint ListNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_execute_list_1">
            <summary>
             void n_execute_list_1(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_execute_list_2">
            <summary>
             void n_execute_list_2(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_get_out_pointer">
            <summary>
             void n_get_out_pointer(uint CardNo, out uint ListNo, out uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.execute_list_pos">
            <summary>
             void execute_list_pos(uint ListNo, uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.execute_at_pointer">
            <summary>
             void execute_at_pointer(uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.execute_list">
            <summary>
             void execute_list(uint ListNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.execute_list_1">
            <summary>
             void execute_list_1();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.execute_list_2">
            <summary>
             void execute_list_2();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.get_out_pointer">
            <summary>
             void get_out_pointer(out uint ListNo, out uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_auto_change_pos">
            <summary>
             void n_auto_change_pos(uint CardNo, uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_start_loop">
            <summary>
             void n_start_loop(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_quit_loop">
            <summary>
             void n_quit_loop(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_pause_list">
            <summary>
             void n_pause_list(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_restart_list">
            <summary>
             void n_restart_list(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_release_wait">
            <summary>
             void n_release_wait(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_stop_execution">
            <summary>
             void n_stop_execution(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_pause_list_cond">
            <summary>
             void n_set_pause_list_cond(uint CardNo, uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_pause_list_not_cond">
            <summary>
             void n_set_pause_list_not_cond(uint CardNo, uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_auto_change">
            <summary>
             void n_auto_change(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_stop_list">
            <summary>
             void n_stop_list(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_get_wait_status">
            <summary>
             uint n_get_wait_status(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_read_status">
            <summary>
             uint n_read_status(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_get_status">
            <summary>
             void n_get_status(uint CardNo, out uint Status, out uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.auto_change_pos">
            <summary>
             void auto_change_pos(uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.start_loop">
            <summary>
             void start_loop();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.quit_loop">
            <summary>
             void quit_loop();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.pause_list">
            <summary>
             void pause_list();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.restart_list">
            <summary>
             void restart_list();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.release_wait">
            <summary>
             void release_wait();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.stop_execution">
            <summary>
             void stop_execution();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_pause_list_cond">
            <summary>
             void set_pause_list_cond(uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_pause_list_not_cond">
            <summary>
             void set_pause_list_not_cond(uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.auto_change">
            <summary>
             void auto_change();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.stop_list">
            <summary>
             void stop_list();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.get_wait_status">
            <summary>
             uint get_wait_status();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.read_status">
            <summary>
             uint read_status();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.get_status">
            <summary>
             void get_status(out uint Status, out uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_extstartpos">
            <summary>
             void n_set_extstartpos(uint CardNo, uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_max_counts">
            <summary>
             void n_set_max_counts(uint CardNo, uint Counts);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_control_mode">
            <summary>
             void n_set_control_mode(uint CardNo, uint Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_simulate_ext_stop">
            <summary>
             void n_simulate_ext_stop(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_simulate_ext_start_ctrl">
            <summary>
             void n_simulate_ext_start_ctrl(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_get_counts">
            <summary>
             uint n_get_counts(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_get_startstop_info">
            <summary>
             uint n_get_startstop_info(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_extstartpos">
            <summary>
             void set_extstartpos(uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_max_counts">
            <summary>
             void set_max_counts(uint Counts);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_control_mode">
            <summary>
             void set_control_mode(uint Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.simulate_ext_stop">
            <summary>
             void simulate_ext_stop();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.simulate_ext_start_ctrl">
            <summary>
             void simulate_ext_start_ctrl();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.get_counts">
            <summary>
             uint get_counts();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.get_startstop_info">
            <summary>
             uint get_startstop_info();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_copy_dst_src">
            <summary>
             void n_copy_dst_src(uint CardNo, uint Dst, uint Src, uint Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_char_pointer">
            <summary>
             void n_set_char_pointer(uint CardNo, uint Char, uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_sub_pointer">
            <summary>
             void n_set_sub_pointer(uint CardNo, uint Index, uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_text_table_pointer">
            <summary>
             void n_set_text_table_pointer(uint CardNo, uint Index, uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_char_table">
            <summary>
             void n_set_char_table(uint CardNo, uint Index, uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_get_char_pointer">
            <summary>
             uint n_get_char_pointer(uint CardNo, uint Char);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_get_sub_pointer">
            <summary>
             uint n_get_sub_pointer(uint CardNo, uint Index);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_get_text_table_pointer">
            <summary>
             uint n_get_text_table_pointer(uint CardNo, uint Index);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.copy_dst_src">
            <summary>
             void copy_dst_src(uint Dst, uint Src, uint Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_char_pointer">
            <summary>
             void set_char_pointer(uint Char, uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_sub_pointer">
            <summary>
             void set_sub_pointer(uint Index, uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_text_table_pointer">
            <summary>
             void set_text_table_pointer(uint Index, uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_char_table">
            <summary>
             void set_char_table(uint Index, uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.get_char_pointer">
            <summary>
             uint get_char_pointer(uint Char);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.get_sub_pointer">
            <summary>
             uint get_sub_pointer(uint Index);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.get_text_table_pointer">
            <summary>
             uint get_text_table_pointer(uint Index);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_time_update">
            <summary>
             void n_time_update(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_serial_step">
            <summary>
             void n_set_serial_step(uint CardNo, uint No, uint Step);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_select_serial_set">
            <summary>
             void n_select_serial_set(uint CardNo, uint No);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_serial">
            <summary>
             void n_set_serial(uint CardNo, uint No);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_get_serial">
            <summary>
             double n_get_serial(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_get_list_serial">
            <summary>
             double n_get_list_serial(uint CardNo, out uint SetNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.time_update">
            <summary>
             void time_update();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_serial_step">
            <summary>
             void set_serial_step(uint No, uint Step);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.select_serial_set">
            <summary>
             void select_serial_set(uint No);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_serial">
            <summary>
             void set_serial(uint No);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.get_serial">
            <summary>
             double get_serial();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.get_list_serial">
            <summary>
             double get_list_serial(out uint SetNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_write_io_port_mask">
            <summary>
             void n_write_io_port_mask(uint CardNo, uint Value, uint Mask);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_write_8bit_port">
            <summary>
             void n_write_8bit_port(uint CardNo, uint Value);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_read_io_port">
            <summary>
             uint n_read_io_port(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_read_io_port_buffer">
            <summary>
             uint n_read_io_port_buffer(uint CardNo, uint Index, out uint Value, out int XPos, out int YPos, out uint Time);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_get_io_status">
            <summary>
             uint n_get_io_status(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_read_analog_in">
            <summary>
             uint n_read_analog_in(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_write_da_x">
            <summary>
             void n_write_da_x(uint CardNo, uint x, uint Value);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_laser_off_default">
            <summary>
             void n_set_laser_off_default(uint CardNo, uint AnalogOut1, uint AnalogOut2, uint DigitalOut);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_port_default">
            <summary>
             void n_set_port_default(uint CardNo, uint Port, uint Value);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_write_io_port">
            <summary>
             void n_write_io_port(uint CardNo, uint Value);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_write_da_1">
            <summary>
             void n_write_da_1(uint CardNo, uint Value);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_write_da_2">
            <summary>
             void n_write_da_2(uint CardNo, uint Value);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.write_io_port_mask">
            <summary>
             void write_io_port_mask(uint Value, uint Mask);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.write_8bit_port">
            <summary>
             void write_8bit_port(uint Value);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.read_io_port">
            <summary>
             uint read_io_port();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.read_io_port_buffer">
            <summary>
             uint read_io_port_buffer(uint Index, out uint Value, out int XPos, out int YPos, out uint Time);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.get_io_status">
            <summary>
             uint get_io_status();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.read_analog_in">
            <summary>
             uint read_analog_in();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.write_da_x">
            <summary>
             void write_da_x(uint x, uint Value);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_laser_off_default">
            <summary>
             void set_laser_off_default(uint AnalogOut1, uint AnalogOut2, uint DigitalOut);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_port_default">
            <summary>
             void set_port_default(uint Port, uint Value);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.write_io_port">
            <summary>
             void write_io_port(uint Value);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.write_da_1">
            <summary>
             void write_da_1(uint Value);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.write_da_2">
            <summary>
             void write_da_2(uint Value);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_disable_laser">
            <summary>
             void n_disable_laser(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_enable_laser">
            <summary>
             void n_enable_laser(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_laser_signal_on">
            <summary>
             void n_laser_signal_on(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_laser_signal_off">
            <summary>
             void n_laser_signal_off(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_standby">
            <summary>
             void n_set_standby(uint CardNo, uint HalfPeriod, uint PulseLength);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_laser_pulses_ctrl">
            <summary>
             void n_set_laser_pulses_ctrl(uint CardNo, uint HalfPeriod, uint PulseLength);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_firstpulse_killer">
            <summary>
             void n_set_firstpulse_killer(uint CardNo, uint Length);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_qswitch_delay">
            <summary>
             void n_set_qswitch_delay(uint CardNo, uint Delay);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_laser_mode">
            <summary>
             void n_set_laser_mode(uint CardNo, uint Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_laser_control">
            <summary>
             void n_set_laser_control(uint CardNo, uint Ctrl);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_laser_pin_out">
            <summary>
             void n_set_laser_pin_out(uint CardNo, uint Pins);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_get_laser_pin_in">
            <summary>
             uint n_get_laser_pin_in(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_softstart_level">
            <summary>
             void n_set_softstart_level(uint CardNo, uint Index, uint Level);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_softstart_mode">
            <summary>
             void n_set_softstart_mode(uint CardNo, uint Mode, uint Number, uint Delay);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_auto_laser_control">
            <summary>
             uint n_set_auto_laser_control(uint CardNo, uint Ctrl, uint Value, uint Mode, uint MinValue, uint MaxValue);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_auto_laser_params">
            <summary>
             uint n_set_auto_laser_params(uint CardNo, uint Ctrl, uint Value, uint MinValue, uint MaxValue);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_load_auto_laser_control">
            <summary>
             int n_load_auto_laser_control(uint CardNo, string Name, uint No);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_load_position_control">
            <summary>
             int n_load_position_control(uint CardNo, string Name, uint No);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_default_pixel">
            <summary>
             void n_set_default_pixel(uint CardNo, uint PulseLength);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_get_standby">
            <summary>
             void n_get_standby(uint CardNo, out uint HalfPeriod, out uint PulseLength);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_pulse_picking">
            <summary>
             void n_set_pulse_picking(uint CardNo, uint No);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_pulse_picking_length">
            <summary>
             void n_set_pulse_picking_length(uint CardNo, uint Length);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_config_laser_signals">
            <summary>
             void n_config_laser_signals(uint CardNo, uint Config);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.disable_laser">
            <summary>
             void disable_laser();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.enable_laser">
            <summary>
             void enable_laser();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.laser_signal_on">
            <summary>
             void laser_signal_on();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.laser_signal_off">
            <summary>
             void laser_signal_off();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_standby">
            <summary>
             void set_standby(uint HalfPeriod, uint PulseLength);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_laser_pulses_ctrl">
            <summary>
             void set_laser_pulses_ctrl(uint HalfPeriod, uint PulseLength);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_firstpulse_killer">
            <summary>
             void set_firstpulse_killer(uint Length);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_qswitch_delay">
            <summary>
             void set_qswitch_delay(uint Delay);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_laser_mode">
            <summary>
             void set_laser_mode(uint Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_laser_control">
            <summary>
             void set_laser_control(uint Ctrl);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_laser_pin_out">
            <summary>
             void set_laser_pin_out(uint Pins);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.get_laser_pin_in">
            <summary>
             uint get_laser_pin_in();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_softstart_level">
            <summary>
             void set_softstart_level(uint Index, uint Level);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_softstart_mode">
            <summary>
             void set_softstart_mode(uint Mode, uint Number, uint Delay);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_auto_laser_control">
            <summary>
             uint set_auto_laser_control(uint Ctrl, uint Value, uint Mode, uint MinValue, uint MaxValue);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_auto_laser_params">
            <summary>
             uint set_auto_laser_params(uint Ctrl, uint Value, uint MinValue, uint MaxValue);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.load_auto_laser_control">
            <summary>
             int load_auto_laser_control(string Name, uint No);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.load_position_control">
            <summary>
             int load_position_control(string Name, uint No);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_default_pixel">
            <summary>
             void set_default_pixel(uint PulseLength);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.get_standby">
            <summary>
             void get_standby(out uint HalfPeriod, out uint PulseLength);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_pulse_picking">
            <summary>
             void set_pulse_picking(uint No);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_pulse_picking_length">
            <summary>
             void set_pulse_picking_length(uint Length);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.config_laser_signals">
            <summary>
             void config_laser_signals(uint Config);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_ext_start_delay">
            <summary>
             void n_set_ext_start_delay(uint CardNo, int Delay, uint EncoderNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_rot_center">
            <summary>
             void n_set_rot_center(uint CardNo, int X, int Y);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_simulate_encoder">
            <summary>
             void n_simulate_encoder(uint CardNo, uint EncoderNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_get_marking_info">
            <summary>
             uint n_get_marking_info(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_encoder_speed_ctrl">
            <summary>
             void n_set_encoder_speed_ctrl(uint CardNo, uint EncoderNo, double Speed, double Smooth);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_mcbsp_x">
            <summary>
             void n_set_mcbsp_x(uint CardNo, double ScaleX);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_mcbsp_y">
            <summary>
             void n_set_mcbsp_y(uint CardNo, double ScaleY);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_mcbsp_rot">
            <summary>
             void n_set_mcbsp_rot(uint CardNo, double Resolution);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_mcbsp_matrix">
            <summary>
             void n_set_mcbsp_matrix(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_mcbsp_global_x">
            <summary>
             void n_set_mcbsp_global_x(uint CardNo, double ScaleX);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_mcbsp_global_y">
            <summary>
             void n_set_mcbsp_global_y(uint CardNo, double ScaleY);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_mcbsp_global_rot">
            <summary>
             void n_set_mcbsp_global_rot(uint CardNo, double Resolution);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_mcbsp_global_matrix">
            <summary>
             void n_set_mcbsp_global_matrix(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_mcbsp_in">
            <summary>
             void n_set_mcbsp_in(uint CardNo, uint Mode, double Scale);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_multi_mcbsp_in">
            <summary>
             void n_set_multi_mcbsp_in(uint CardNo, uint Ctrl, uint P, uint Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_fly_tracking_error">
            <summary>
             void n_set_fly_tracking_error(uint CardNo, uint TrackingErrorX, uint TrackingErrorY);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_load_fly_2d_table">
            <summary>
             int n_load_fly_2d_table(uint CardNo, string Name, uint No);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_init_fly_2d">
            <summary>
             void n_init_fly_2d(uint CardNo, int OffsetX, int OffsetY);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_get_fly_2d_offset">
            <summary>
             void n_get_fly_2d_offset(uint CardNo, out int OffsetX, out int OffsetY);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_get_encoder">
            <summary>
             void n_get_encoder(uint CardNo, out int Encoder0, out int Encoder1);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_read_encoder">
            <summary>
             void n_read_encoder(uint CardNo, out int Encoder0_1, out int Encoder1_1, out int Encoder0_2, out int Encoder1_2);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_get_mcbsp">
            <summary>
             int n_get_mcbsp(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_read_mcbsp">
            <summary>
             int n_read_mcbsp(uint CardNo, uint No);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_read_multi_mcbsp">
            <summary>
             int n_read_multi_mcbsp(uint CardNo, uint No);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_clear_fly_overflow_ctrl">
            <summary>
             void n_clear_fly_overflow_ctrl(uint CardNo, uint Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_ext_start_delay">
            <summary>
             void set_ext_start_delay(int Delay, uint EncoderNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_rot_center">
            <summary>
             void set_rot_center(int X, int Y);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.simulate_encoder">
            <summary>
             void simulate_encoder(uint EncoderNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.get_marking_info">
            <summary>
             uint get_marking_info();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_encoder_speed_ctrl">
            <summary>
             void set_encoder_speed_ctrl(uint EncoderNo, double Speed, double Smooth);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_mcbsp_x">
            <summary>
             void set_mcbsp_x(double ScaleX);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_mcbsp_y">
            <summary>
             void set_mcbsp_y(double ScaleY);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_mcbsp_rot">
            <summary>
             void set_mcbsp_rot(double Resolution);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_mcbsp_matrix">
            <summary>
             void set_mcbsp_matrix();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_mcbsp_global_x">
            <summary>
             void set_mcbsp_global_x(double ScaleX);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_mcbsp_global_y">
            <summary>
             void set_mcbsp_global_y(double ScaleY);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_mcbsp_global_rot">
            <summary>
             void set_mcbsp_global_rot(double Resolution);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_mcbsp_global_matrix">
            <summary>
             void set_mcbsp_global_matrix();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_mcbsp_in">
            <summary>
             void set_mcbsp_in(uint Mode, double Scale);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_multi_mcbsp_in">
            <summary>
             void set_multi_mcbsp_in(uint Ctrl, uint P, uint Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_fly_tracking_error">
            <summary>
             void set_fly_tracking_error(uint TrackingErrorX, uint TrackingErrorY);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.load_fly_2d_table">
            <summary>
             int load_fly_2d_table(string Name, uint No);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.init_fly_2d">
            <summary>
             void init_fly_2d(int OffsetX, int OffsetY);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.get_fly_2d_offset">
            <summary>
             void get_fly_2d_offset(out int OffsetX, out int OffsetY);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.get_encoder">
            <summary>
             void get_encoder(out int Encoder0, out int Encoder1);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.read_encoder">
            <summary>
             void read_encoder(out int Encoder0_1, out int Encoder1_1, out int Encoder0_2, out int Encoder1_2);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.get_mcbsp">
            <summary>
             int get_mcbsp();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.read_mcbsp">
            <summary>
             int read_mcbsp(uint No);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.read_multi_mcbsp">
            <summary>
             int read_multi_mcbsp(uint No);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.clear_fly_overflow_ctrl">
            <summary>
             void clear_fly_overflow_ctrl(uint Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_get_time">
            <summary>
             double n_get_time(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_get_lap_time">
            <summary>
             double n_get_lap_time(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_measurement_status">
            <summary>
             void n_measurement_status(uint CardNo, out uint Busy, out uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_get_waveform">
            <summary>
             void n_get_waveform(uint CardNo, uint Channel, uint Number, int[] Ptr);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_bounce_supp">
            <summary>
             void n_bounce_supp(uint CardNo, uint Length);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_home_position_xyz">
            <summary>
             void n_home_position_xyz(uint CardNo, int XHome, int YHome, int ZHome);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_home_position">
            <summary>
             void n_home_position(uint CardNo, int XHome, int YHome);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_rs232_config">
            <summary>
             void n_rs232_config(uint CardNo, uint BaudRate);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_rs232_write_data">
            <summary>
             void n_rs232_write_data(uint CardNo, uint Data);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_rs232_write_text">
            <summary>
             void n_rs232_write_text(uint CardNo, string pData);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_rs232_read_data">
            <summary>
             uint n_rs232_read_data(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_mcbsp_freq">
            <summary>
             uint n_set_mcbsp_freq(uint CardNo, uint Freq);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_mcbsp_init">
            <summary>
             void n_mcbsp_init(uint CardNo, uint XDelay, uint RDelay);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_mcbsp_init_spi">
            <summary>
             void n_mcbsp_init_spi(uint CardNo, uint ClockLevel, uint ClockDelay);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_get_overrun">
            <summary>
             uint n_get_overrun(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_get_master_slave">
            <summary>
             uint n_get_master_slave(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_get_transform">
            <summary>
             void n_get_transform(uint CardNo, uint Number, int[] Ptr1, int[] Ptr2, uint[] Ptr, uint Code);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_stop_trigger">
            <summary>
             void n_stop_trigger(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_move_to">
            <summary>
             void n_move_to(uint CardNo, uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_enduring_wobbel">
            <summary>
             void n_set_enduring_wobbel(uint CardNo, uint CenterX, uint CenterY, uint CenterZ, uint LimitHi, uint LimitLo, double ScaleX, double ScaleY, double ScaleZ);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_enduring_wobbel_2">
            <summary>
             void n_set_enduring_wobbel_2(uint CardNo, uint CenterX, uint CenterY, uint CenterZ, uint LimitHi, uint LimitLo, double ScaleX, double ScaleY, double ScaleZ);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_free_variable">
            <summary>
             void n_set_free_variable(uint CardNo, uint VarNo, uint Value);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_get_free_variable">
            <summary>
             uint n_get_free_variable(uint CardNo, uint VarNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_mcbsp_out_ptr">
            <summary>
             void n_set_mcbsp_out_ptr(uint CardNo, uint Number, uint[] SignalPtr);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_periodic_toggle">
            <summary>
             void n_periodic_toggle(uint CardNo, uint Port, uint Mask, uint P1, uint P2, uint Count, uint Start);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_load_wobbel_power">
            <summary>
             uint n_load_wobbel_power(uint CardNo, uint TableNo, int[] Ptr, int Flag);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.get_time">
            <summary>
             double get_time();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.get_lap_time">
            <summary>
             double get_lap_time();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.measurement_status">
            <summary>
             void measurement_status(out uint Busy, out uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.get_waveform">
            <summary>
             void get_waveform(uint Channel, uint Number, int[] Ptr);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.bounce_supp">
            <summary>
             void bounce_supp(uint Length);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.home_position_xyz">
            <summary>
             void home_position_xyz(int XHome, int YHome, int ZHome);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.home_position">
            <summary>
             void home_position(int XHome, int YHome);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.rs232_config">
            <summary>
             void rs232_config(uint BaudRate);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.rs232_write_data">
            <summary>
             void rs232_write_data(uint Data);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.rs232_write_text">
            <summary>
             void rs232_write_text(string pData);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.rs232_read_data">
            <summary>
             uint rs232_read_data();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_mcbsp_freq">
            <summary>
             uint set_mcbsp_freq(uint Freq);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.mcbsp_init">
            <summary>
             void mcbsp_init(uint XDelay, uint RDelay);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.mcbsp_init_spi">
            <summary>
             void mcbsp_init_spi(uint ClockLevel, uint ClockDelay);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.get_overrun">
            <summary>
             uint get_overrun();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.get_master_slave">
            <summary>
             uint get_master_slave();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.get_transform">
            <summary>
             void get_transform(uint Number, int[] Ptr1, int[] Ptr2, uint[] Ptr, uint Code);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.stop_trigger">
            <summary>
             void stop_trigger();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.move_to">
            <summary>
             void move_to(uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_enduring_wobbel">
            <summary>
             void set_enduring_wobbel(uint CenterX, uint CenterY, uint CenterZ, uint LimitHi, uint LimitLo, double ScaleX, double ScaleY, double ScaleZ);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_enduring_wobbel_2">
            <summary>
             void set_enduring_wobbel_2(uint CenterX, uint CenterY, uint CenterZ, uint LimitHi, uint LimitLo, double ScaleX, double ScaleY, double ScaleZ);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_free_variable">
            <summary>
             void set_free_variable(uint VarNo, uint Value);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.get_free_variable">
            <summary>
             uint get_free_variable(uint VarNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_mcbsp_out_ptr">
            <summary>
             void set_mcbsp_out_ptr(uint Number, uint[] SignalPtr);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.periodic_toggle">
            <summary>
             void periodic_toggle(uint Port, uint Mask, uint P1, uint P2, uint Count, uint Start);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.load_wobbel_power">
            <summary>
             uint load_wobbel_power(uint TableNo, int[] Ptr, int Flag);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_defocus">
            <summary>
             void n_set_defocus(uint CardNo, int Shift);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_defocus_offset">
            <summary>
             void n_set_defocus_offset(uint CardNo, int Shift);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_goto_xyz">
            <summary>
             void n_goto_xyz(uint CardNo, int X, int Y, int Z);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_zoom">
            <summary>
             void n_set_zoom(uint CardNo, uint Zoom);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_goto_xy">
            <summary>
             void n_goto_xy(uint CardNo, int X, int Y);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_get_z_distance">
            <summary>
             int n_get_z_distance(uint CardNo, int X, int Y, int Z);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_defocus">
            <summary>
             void set_defocus(int Shift);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_defocus_offset">
            <summary>
             void set_defocus_offset(int Shift);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.goto_xyz">
            <summary>
             void goto_xyz(int X, int Y, int Z);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.goto_xy">
            <summary>
             void goto_xy(int X, int Y);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_zoom">
            <summary>
             void set_zoom(uint Zoom);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.get_z_distance">
            <summary>
             int get_z_distance(int X, int Y, int Z);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_offset_xyz">
            <summary>
             void n_set_offset_xyz(uint CardNo, uint HeadNo, int XOffset, int YOffset, int ZOffset, uint at_once);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_offset">
            <summary>
             void n_set_offset(uint CardNo, uint HeadNo, int XOffset, int YOffset, uint at_once);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_matrix">
            <summary>
             void n_set_matrix(uint CardNo, uint HeadNo, double M11, double M12, double M21, double M22, uint at_once);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_angle">
            <summary>
             void n_set_angle(uint CardNo, uint HeadNo, double Angle, uint at_once);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_scale">
            <summary>
             void n_set_scale(uint CardNo, uint HeadNo, double Scale, uint at_once);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_apply_mcbsp">
            <summary>
             void n_apply_mcbsp(uint CardNo, uint HeadNo, uint at_once);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_upload_transform">
            <summary>
             uint n_upload_transform(uint CardNo, uint HeadNo, uint[] Ptr);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_offset_xyz">
            <summary>
             void set_offset_xyz(uint HeadNo, int XOffset, int YOffset, int ZOffset, uint at_once);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_offset">
            <summary>
             void set_offset(uint HeadNo, int XOffset, int YOffset, uint at_once);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_matrix">
            <summary>
             void set_matrix(uint HeadNo, double M11, double M12, double M21, double M22, uint at_once);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_angle">
            <summary>
             void set_angle(uint HeadNo, double Angle, uint at_once);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_scale">
            <summary>
             void set_scale(uint HeadNo, double Scale, uint at_once);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.apply_mcbsp">
            <summary>
             void apply_mcbsp(uint HeadNo, uint at_once);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.upload_transform">
            <summary>
             uint upload_transform(uint HeadNo, uint[] Ptr);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.transform">
            <summary>
             uint transform(out int Sig1, out int Sig2, uint[] Ptr, uint Code);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_delay_mode">
            <summary>
             void n_set_delay_mode(uint CardNo, uint VarPoly, uint DirectMove3D, uint EdgeLevel, uint MinJumpDelay, uint JumpLengthLimit);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_jump_speed_ctrl">
            <summary>
             void n_set_jump_speed_ctrl(uint CardNo, double Speed);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_mark_speed_ctrl">
            <summary>
             void n_set_mark_speed_ctrl(uint CardNo, double Speed);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_sky_writing_para">
            <summary>
             void n_set_sky_writing_para(uint CardNo, double Timelag, int LaserOnShift, uint Nprev, uint Npost);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_sky_writing_limit">
            <summary>
             void n_set_sky_writing_limit(uint CardNo, double CosAngle);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_sky_writing_mode">
            <summary>
             void n_set_sky_writing_mode(uint CardNo, uint Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_load_varpolydelay">
            <summary>
             int n_load_varpolydelay(uint CardNo, string Name, uint No);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_hi">
            <summary>
             void n_set_hi(uint CardNo, uint HeadNo, double GalvoGainX, double GalvoGainY, int GalvoOffsetX, int GalvoOffsetY);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_get_hi_pos">
            <summary>
             void n_get_hi_pos(uint CardNo, uint HeadNo, out int X1, out int X2, out int Y1, out int Y2);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_auto_cal">
            <summary>
             uint n_auto_cal(uint CardNo, uint HeadNo, uint Command);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_get_auto_cal">
            <summary>
             uint n_get_auto_cal(uint CardNo, uint HeadNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_write_hi_pos">
            <summary>
             uint n_write_hi_pos(uint CardNo, uint HeadNo, int X1, int X2, int Y1, int Y2);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_sky_writing">
            <summary>
             void n_set_sky_writing(uint CardNo, double Timelag, int LaserOnShift);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_get_hi_data">
            <summary>
             void n_get_hi_data(uint CardNo, out int X1, out int X2, out int Y1, out int Y2);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_delay_mode">
            <summary>
             void set_delay_mode(uint VarPoly, uint DirectMove3D, uint EdgeLevel, uint MinJumpDelay, uint JumpLengthLimit);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_jump_speed_ctrl">
            <summary>
             void set_jump_speed_ctrl(double Speed);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_mark_speed_ctrl">
            <summary>
             void set_mark_speed_ctrl(double Speed);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_sky_writing_para">
            <summary>
             void set_sky_writing_para(double Timelag, int LaserOnShift, uint Nprev, uint Npost);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_sky_writing_limit">
            <summary>
             void set_sky_writing_limit(double CosAngle);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_sky_writing_mode">
            <summary>
             void set_sky_writing_mode(uint Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.load_varpolydelay">
            <summary>
             int load_varpolydelay(string Name, uint No);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_hi">
            <summary>
             void set_hi(uint HeadNo, double GalvoGainX, double GalvoGainY, int GalvoOffsetX, int GalvoOffsetY);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.get_hi_pos">
            <summary>
             void get_hi_pos(uint HeadNo, out int X1, out int X2, out int Y1, out int Y2);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.auto_cal">
            <summary>
             uint auto_cal(uint HeadNo, uint Command);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.get_auto_cal">
            <summary>
             uint get_auto_cal(uint HeadNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.write_hi_pos">
            <summary>
             uint write_hi_pos(uint HeadNo, int X1, int X2, int Y1, int Y2);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_sky_writing">
            <summary>
             void set_sky_writing(double Timelag, int LaserOnShift);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.get_hi_data">
            <summary>
             void get_hi_data(out int X1, out int X2, out int Y1, out int Y2);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_send_user_data">
            <summary>
             void n_send_user_data(uint CardNo, uint Head, uint Axis, int Data0, int Data1, int Data2, int Data3, int Data4);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_read_user_data">
            <summary>
             int n_read_user_data(uint CardNo, uint Head, uint Axis, out int Data0, out int Data1, out int Data2, out int Data3, out int Data4);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_control_command">
            <summary>
             void n_control_command(uint CardNo, uint Head, uint Axis, uint Data);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_get_value">
            <summary>
             int n_get_value(uint CardNo, uint Signal);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_get_values">
            <summary>
             void n_get_values(uint CardNo, uint[] SignalPtr, int[] ResultPtr);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_get_galvo_controls">
            <summary>
             void n_get_galvo_controls(uint CardNo, int[] SignalPtr, int[] ResultPtr);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_get_head_status">
            <summary>
             uint n_get_head_status(uint CardNo, uint Head);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_jump_mode">
            <summary>
             int n_set_jump_mode(uint CardNo, int Flag, uint Length, int VA1, int VA2, int VB1, int VB2, int JA1, int JA2, int JB1, int JB2);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_load_jump_table_offset">
            <summary>
             int n_load_jump_table_offset(uint CardNo, string Name, uint No, uint PosAck, int Offset, uint MinDelay, uint MaxDelay, uint ListPos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_get_jump_table">
            <summary>
             uint n_get_jump_table(uint CardNo, ushort[] Ptr);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_jump_table">
            <summary>
             uint n_set_jump_table(uint CardNo, ushort[] Ptr);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_load_jump_table">
            <summary>
             int n_load_jump_table(uint CardNo, string Name, uint No, uint PosAck, uint MinDelay, uint MaxDelay, uint ListPos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.send_user_data">
            <summary>
             void send_user_data(uint Head, uint Axis, int Data0, int Data1, int Data2, int Data3, int Data4);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.read_user_data">
            <summary>
             int read_user_data(uint Head, uint Axis, out int Data0, out int Data1, out int Data2, out int Data3, out int Data4);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.control_command">
            <summary>
             void control_command(uint Head, uint Axis, uint Data);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.get_value">
            <summary>
             int get_value(uint Signal);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.get_values">
            <summary>
             void get_values(uint[] SignalPtr, int[] ResultPtr);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.get_galvo_controls">
            <summary>
             void get_galvo_controls(int[] SignalPtr, int[] ResultPtr);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.get_head_status">
            <summary>
             uint get_head_status(uint Head);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_jump_mode">
            <summary>
             int set_jump_mode(int Flag, uint Length, int VA1, int VA2, int VB1, int VB2, int JA1, int JA2, int JB1, int JB2);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.load_jump_table_offset">
            <summary>
             int load_jump_table_offset(string Name, uint No, uint PosAck, int Offset, uint MinDelay, uint MaxDelay, uint ListPos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.get_jump_table">
            <summary>
             uint get_jump_table(ushort[] Ptr);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_jump_table">
            <summary>
             uint set_jump_table(ushort[] Ptr);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.load_jump_table">
            <summary>
             int load_jump_table(string Name, uint No, uint PosAck, uint MinDelay, uint MaxDelay, uint ListPos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_stepper_init">
            <summary>
             void n_stepper_init(uint CardNo, uint No, uint Period, int Dir, int Pos, uint Tol, uint Enable, uint WaitTime);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_stepper_enable">
            <summary>
             void n_stepper_enable(uint CardNo, int Enable1, int Enable2);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_stepper_disable_switch">
            <summary>
             void n_stepper_disable_switch(uint CardNo, int Disable1, int Disable2);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_stepper_control">
            <summary>
             void n_stepper_control(uint CardNo, int Period1, int Period2);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_stepper_abs_no">
            <summary>
             void n_stepper_abs_no(uint CardNo, uint No, int Pos, uint WaitTime);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_stepper_rel_no">
            <summary>
             void n_stepper_rel_no(uint CardNo, uint No, int dPos, uint WaitTime);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_stepper_abs">
            <summary>
             void n_stepper_abs(uint CardNo, int Pos1, int Pos2, uint WaitTime);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_stepper_rel">
            <summary>
             void n_stepper_rel(uint CardNo, int dPos1, int dPos2, uint WaitTime);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_get_stepper_status">
            <summary>
             void n_get_stepper_status(uint CardNo, out uint Status1, out int Pos1, out uint Status2, out int Pos2);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.stepper_init">
            <summary>
             void stepper_init(uint No, uint Period, int Dir, int Pos, uint Tol, uint Enable, uint WaitTime);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.stepper_enable">
            <summary>
             void stepper_enable(int Enable1, int Enable2);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.stepper_disable_switch">
            <summary>
             void stepper_disable_switch(int Disable1, int Disable2);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.stepper_control">
            <summary>
             void stepper_control(int Period1, int Period2);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.stepper_abs_no">
            <summary>
             void stepper_abs_no(uint No, int Pos, uint WaitTime);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.stepper_rel_no">
            <summary>
             void stepper_rel_no(uint No, int dPos, uint WaitTime);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.stepper_abs">
            <summary>
             void stepper_abs(int Pos1, int Pos2, uint WaitTime);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.stepper_rel">
            <summary>
             void stepper_rel(int dPos1, int dPos2, uint WaitTime);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.get_stepper_status">
            <summary>
             void get_stepper_status(out uint Status1, out int Pos1, out uint Status2, out int Pos2);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_select_cor_table_list">
            <summary>
             void n_select_cor_table_list(uint CardNo, uint HeadA, uint HeadB);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.select_cor_table_list">
            <summary>
             void select_cor_table_list(uint HeadA, uint HeadB);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_list_nop">
            <summary>
             void n_list_nop(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_list_continue">
            <summary>
             void n_list_continue(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_list_next">
            <summary>
             void n_list_next(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_long_delay">
            <summary>
             void n_long_delay(uint CardNo, uint Delay);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_end_of_list">
            <summary>
             void n_set_end_of_list(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_wait">
            <summary>
             void n_set_wait(uint CardNo, uint WaitWord);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_list_jump_pos">
            <summary>
             void n_list_jump_pos(uint CardNo, uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_list_jump_rel">
            <summary>
             void n_list_jump_rel(uint CardNo, int Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_list_repeat">
            <summary>
             void n_list_repeat(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_list_until">
            <summary>
             void n_list_until(uint CardNo, uint Number);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_range_checking">
            <summary>
             void n_range_checking(uint CardNo, uint HeadNo, uint Mode, uint Data);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_list_jump">
            <summary>
             void n_set_list_jump(uint CardNo, uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.list_nop">
            <summary>
             void list_nop();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.list_continue">
            <summary>
             void list_continue();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.list_next">
            <summary>
             void list_next();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.long_delay">
            <summary>
             void long_delay(uint Delay);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_end_of_list">
            <summary>
             void set_end_of_list();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_wait">
            <summary>
             void set_wait(uint WaitWord);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.list_jump_pos">
            <summary>
             void list_jump_pos(uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.list_jump_rel">
            <summary>
             void list_jump_rel(int Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.list_repeat">
            <summary>
             void list_repeat();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.list_until">
            <summary>
             void list_until(uint Number);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.range_checking">
            <summary>
             void range_checking(uint HeadNo, uint Mode, uint Data);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_list_jump">
            <summary>
             void set_list_jump(uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_extstartpos_list">
            <summary>
             void n_set_extstartpos_list(uint CardNo, uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_control_mode_list">
            <summary>
             void n_set_control_mode_list(uint CardNo, uint Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_simulate_ext_start">
            <summary>
             void n_simulate_ext_start(uint CardNo, int Delay, uint EncoderNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_extstartpos_list">
            <summary>
             void set_extstartpos_list(uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_control_mode_list">
            <summary>
             void set_control_mode_list(uint Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.simulate_ext_start">
            <summary>
             void simulate_ext_start(int Delay, uint EncoderNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_list_return">
            <summary>
             void n_list_return(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_list_call_repeat">
            <summary>
             void n_list_call_repeat(uint CardNo, uint Pos, uint Number);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_list_call_abs_repeat">
            <summary>
             void n_list_call_abs_repeat(uint CardNo, uint Pos, uint Number);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_list_call">
            <summary>
             void n_list_call(uint CardNo, uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_list_call_abs">
            <summary>
             void n_list_call_abs(uint CardNo, uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_sub_call_repeat">
            <summary>
             void n_sub_call_repeat(uint CardNo, uint Index, uint Number);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_sub_call_abs_repeat">
            <summary>
             void n_sub_call_abs_repeat(uint CardNo, uint Index, uint Number);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_sub_call">
            <summary>
             void n_sub_call(uint CardNo, uint Index);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_sub_call_abs">
            <summary>
             void n_sub_call_abs(uint CardNo, uint Index);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.list_return">
            <summary>
             void list_return();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.list_call_repeat">
            <summary>
             void list_call_repeat(uint Pos, uint Number);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.list_call_abs_repeat">
            <summary>
             void list_call_abs_repeat(uint Pos, uint Number);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.list_call">
            <summary>
             void list_call(uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.list_call_abs">
            <summary>
             void list_call_abs(uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.sub_call_repeat">
            <summary>
             void sub_call_repeat(uint Index, uint Number);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.sub_call_abs_repeat">
            <summary>
             void sub_call_abs_repeat(uint Index, uint Number);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.sub_call">
            <summary>
             void sub_call(uint Index);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.sub_call_abs">
            <summary>
             void sub_call_abs(uint Index);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_list_call_cond">
            <summary>
             void n_list_call_cond(uint CardNo, uint Mask1, uint Mask0, uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_list_call_abs_cond">
            <summary>
             void n_list_call_abs_cond(uint CardNo, uint Mask1, uint Mask0, uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_sub_call_cond">
            <summary>
             void n_sub_call_cond(uint CardNo, uint Mask1, uint Mask0, uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_sub_call_abs_cond">
            <summary>
             void n_sub_call_abs_cond(uint CardNo, uint Mask1, uint Mask0, uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_list_jump_pos_cond">
            <summary>
             void n_list_jump_pos_cond(uint CardNo, uint Mask1, uint Mask0, uint Index);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_list_jump_rel_cond">
            <summary>
             void n_list_jump_rel_cond(uint CardNo, uint Mask1, uint Mask0, int Index);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_if_cond">
            <summary>
             void n_if_cond(uint CardNo, uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_if_not_cond">
            <summary>
             void n_if_not_cond(uint CardNo, uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_if_pin_cond">
            <summary>
             void n_if_pin_cond(uint CardNo, uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_if_not_pin_cond">
            <summary>
             void n_if_not_pin_cond(uint CardNo, uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_switch_ioport">
            <summary>
             void n_switch_ioport(uint CardNo, uint MaskBits, uint ShiftBits);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_list_jump_cond">
            <summary>
             void n_list_jump_cond(uint CardNo, uint Mask1, uint Mask0, uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.list_call_cond">
            <summary>
             void list_call_cond(uint Mask1, uint Mask0, uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.list_call_abs_cond">
            <summary>
             void list_call_abs_cond(uint Mask1, uint Mask0, uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.sub_call_cond">
            <summary>
             void sub_call_cond(uint Mask1, uint Mask0, uint Index);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.sub_call_abs_cond">
            <summary>
             void sub_call_abs_cond(uint Mask1, uint Mask0, uint Index);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.list_jump_pos_cond">
            <summary>
             void list_jump_pos_cond(uint Mask1, uint Mask0, uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.list_jump_rel_cond">
            <summary>
             void list_jump_rel_cond(uint Mask1, uint Mask0, int Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.if_cond">
            <summary>
             void if_cond(uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.if_not_cond">
            <summary>
             void if_not_cond(uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.if_pin_cond">
            <summary>
             void if_pin_cond(uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.if_not_pin_cond">
            <summary>
             void if_not_pin_cond(uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.switch_ioport">
            <summary>
             void switch_ioport(uint MaskBits, uint ShiftBits);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.list_jump_cond">
            <summary>
             void list_jump_cond(uint Mask1, uint Mask0, uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_select_char_set">
            <summary>
             void n_select_char_set(uint CardNo, uint No);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_mark_text">
            <summary>
             void n_mark_text(uint CardNo, string Text);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_mark_text_abs">
            <summary>
             void n_mark_text_abs(uint CardNo, string Text);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_mark_char">
            <summary>
             void n_mark_char(uint CardNo, uint Char);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_mark_char_abs">
            <summary>
             void n_mark_char_abs(uint CardNo, uint Char);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.select_char_set">
            <summary>
             void select_char_set(uint No);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.mark_text">
            <summary>
             void mark_text(string Text);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.mark_text_abs">
            <summary>
             void mark_text_abs(string Text);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.mark_char">
            <summary>
             void mark_char(uint Char);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.mark_char_abs">
            <summary>
             void mark_char_abs(uint Char);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_mark_serial">
            <summary>
             void n_mark_serial(uint CardNo, uint Mode, uint Digits);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_mark_serial_abs">
            <summary>
             void n_mark_serial_abs(uint CardNo, uint Mode, uint Digits);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_mark_date">
            <summary>
             void n_mark_date(uint CardNo, uint Part, uint Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_mark_date_abs">
            <summary>
             void n_mark_date_abs(uint CardNo, uint Part, uint Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_mark_time">
            <summary>
             void n_mark_time(uint CardNo, uint Part, uint Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_mark_time_abs">
            <summary>
             void n_mark_time_abs(uint CardNo, uint Part, uint Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_select_serial_set_list">
            <summary>
             void n_select_serial_set_list(uint CardNo, uint No);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_serial_step_list">
            <summary>
             void n_set_serial_step_list(uint CardNo, uint No, uint Step);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_time_fix_f_off">
            <summary>
             void n_time_fix_f_off(uint CardNo, uint FirstDay, uint Offset);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_time_fix_f">
            <summary>
             void n_time_fix_f(uint CardNo, uint FirstDay);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_time_fix">
            <summary>
             void n_time_fix(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.mark_serial">
            <summary>
             void mark_serial(uint Mode, uint Digits);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.mark_serial_abs">
            <summary>
             void mark_serial_abs(uint Mode, uint Digits);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.mark_date">
            <summary>
             void mark_date(uint Part, uint Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.mark_date_abs">
            <summary>
             void mark_date_abs(uint Part, uint Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.mark_time">
            <summary>
             void mark_time(uint Part, uint Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.mark_time_abs">
            <summary>
             void mark_time_abs(uint Part, uint Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.time_fix_f_off">
            <summary>
             void time_fix_f_off(uint FirstDay, uint Offset);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.select_serial_set_list">
            <summary>
             void select_serial_set_list(uint No);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_serial_step_list">
            <summary>
             void set_serial_step_list(uint No, uint Step);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.time_fix_f">
            <summary>
             void time_fix_f(uint FirstDay);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.time_fix">
            <summary>
             void time_fix();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_clear_io_cond_list">
            <summary>
             void n_clear_io_cond_list(uint CardNo, uint Mask1, uint Mask0, uint Mask);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_io_cond_list">
            <summary>
             void n_set_io_cond_list(uint CardNo, uint Mask1, uint Mask0, uint Mask);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_write_io_port_mask_list">
            <summary>
             void n_write_io_port_mask_list(uint CardNo, uint Value, uint Mask);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_write_8bit_port_list">
            <summary>
             void n_write_8bit_port_list(uint CardNo, uint Value);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_read_io_port_list">
            <summary>
             void n_read_io_port_list(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_write_da_x_list">
            <summary>
             void n_write_da_x_list(uint CardNo, uint x, uint Value);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_write_io_port_list">
            <summary>
             void n_write_io_port_list(uint CardNo, uint Value);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_write_da_1_list">
            <summary>
             void n_write_da_1_list(uint CardNo, uint Value);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_write_da_2_list">
            <summary>
             void n_write_da_2_list(uint CardNo, uint Value);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.clear_io_cond_list">
            <summary>
             void clear_io_cond_list(uint Mask1, uint Mask0, uint MaskClear);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_io_cond_list">
            <summary>
             void set_io_cond_list(uint Mask1, uint Mask0, uint MaskSet);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.write_io_port_mask_list">
            <summary>
             void write_io_port_mask_list(uint Value, uint Mask);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.write_8bit_port_list">
            <summary>
             void write_8bit_port_list(uint Value);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.read_io_port_list">
            <summary>
             void read_io_port_list();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.write_da_x_list">
            <summary>
             void write_da_x_list(uint x, uint Value);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.write_io_port_list">
            <summary>
             void write_io_port_list(uint Value);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.write_da_1_list">
            <summary>
             void write_da_1_list(uint Value);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.write_da_2_list">
            <summary>
             void write_da_2_list(uint Value);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_laser_signal_on_list">
            <summary>
             void n_laser_signal_on_list(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_laser_signal_off_list">
            <summary>
             void n_laser_signal_off_list(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_para_laser_on_pulses_list">
            <summary>
             void n_para_laser_on_pulses_list(uint CardNo, uint Period, uint Pulses, uint P);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_laser_on_pulses_list">
            <summary>
             void n_laser_on_pulses_list(uint CardNo, uint Period, uint Pulses);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_laser_on_list">
            <summary>
             void n_laser_on_list(uint CardNo, uint Period);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_laser_delays">
            <summary>
             void n_set_laser_delays(uint CardNo, int LaserOnDelay, uint LaserOffDelay);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_standby_list">
            <summary>
             void n_set_standby_list(uint CardNo, uint HalfPeriod, uint PulseLength);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_laser_pulses">
            <summary>
             void n_set_laser_pulses(uint CardNo, uint HalfPeriod, uint PulseLength);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_firstpulse_killer_list">
            <summary>
             void n_set_firstpulse_killer_list(uint CardNo, uint Length);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_qswitch_delay_list">
            <summary>
             void n_set_qswitch_delay_list(uint CardNo, uint Delay);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_laser_pin_out_list">
            <summary>
             void n_set_laser_pin_out_list(uint CardNo, uint Pins);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_vector_control">
            <summary>
             void n_set_vector_control(uint CardNo, uint Ctrl, uint Value);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_default_pixel_list">
            <summary>
             void n_set_default_pixel_list(uint CardNo, uint PulseLength);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_port_default_list">
            <summary>
             void n_set_port_default_list(uint CardNo, uint Port, uint Value);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_auto_laser_params_list">
            <summary>
             void n_set_auto_laser_params_list(uint CardNo, uint Ctrl, uint Value, uint MinValue, uint MaxValue);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_pulse_picking_list">
            <summary>
             void n_set_pulse_picking_list(uint CardNo, uint No);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_softstart_level_list">
            <summary>
             void n_set_softstart_level_list(uint CardNo, uint Index, uint Level1, uint Level2, uint Level3);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_softstart_mode_list">
            <summary>
             void n_set_softstart_mode_list(uint CardNo, uint Mode, uint Number, uint Delay);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_config_laser_signals_list">
            <summary>
             void n_config_laser_signals_list(uint CardNo, uint Config);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_laser_timing">
            <summary>
             void n_set_laser_timing(uint CardNo, uint HalfPeriod, uint PulseLength1, uint PulseLength2, uint TimeBase);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.laser_signal_on_list">
            <summary>
             void laser_signal_on_list();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.laser_signal_off_list">
            <summary>
             void laser_signal_off_list();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.para_laser_on_pulses_list">
            <summary>
             void para_laser_on_pulses_list(uint Period, uint Pulses, uint P);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.laser_on_pulses_list">
            <summary>
             void laser_on_pulses_list(uint Period, uint Pulses);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.laser_on_list">
            <summary>
             void laser_on_list(uint Period);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_laser_delays">
            <summary>
             void set_laser_delays(int LaserOnDelay, uint LaserOffDelay);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_standby_list">
            <summary>
             void set_standby_list(uint HalfPeriod, uint PulseLength);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_laser_pulses">
            <summary>
             void set_laser_pulses(uint HalfPeriod, uint PulseLength);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_firstpulse_killer_list">
            <summary>
             void set_firstpulse_killer_list(uint Length);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_qswitch_delay_list">
            <summary>
             void set_qswitch_delay_list(uint Delay);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_laser_pin_out_list">
            <summary>
             void set_laser_pin_out_list(uint Pins);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_vector_control">
            <summary>
             void set_vector_control(uint Ctrl, uint Value);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_default_pixel_list">
            <summary>
             void set_default_pixel_list(uint PulseLength);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_port_default_list">
            <summary>
             void set_port_default_list(uint Port, uint Value);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_auto_laser_params_list">
            <summary>
             void set_auto_laser_params_list(uint Ctrl, uint Value, uint MinValue, uint MaxValue);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_pulse_picking_list">
            <summary>
             void set_pulse_picking_list(uint No);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_softstart_level_list">
            <summary>
             void set_softstart_level_list(uint Index, uint Level1, uint Level2, uint Level3);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_softstart_mode_list">
            <summary>
             void set_softstart_mode_list(uint Mode, uint Number, uint Delay);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.config_laser_signals_list">
            <summary>
             void config_laser_signals_list(uint Config);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_laser_timing">
            <summary>
             void set_laser_timing(uint HalfPeriod, uint PulseLength1, uint PulseLength2, uint TimeBase);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_fly_return_z">
            <summary>
             void n_fly_return_z(uint CardNo, int X, int Y, int Z);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_fly_return">
            <summary>
             void n_fly_return(uint CardNo, int X, int Y);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_rot_center_list">
            <summary>
             void n_set_rot_center_list(uint CardNo, int X, int Y);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_ext_start_delay_list">
            <summary>
             void n_set_ext_start_delay_list(uint CardNo, int Delay, uint EncoderNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_fly_x">
            <summary>
             void n_set_fly_x(uint CardNo, double ScaleX);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_fly_y">
            <summary>
             void n_set_fly_y(uint CardNo, double ScaleY);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_fly_z">
            <summary>
             void n_set_fly_z(uint CardNo, double ScaleZ, uint EndoderNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_fly_rot">
            <summary>
             void n_set_fly_rot(uint CardNo, double Resolution);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_fly_2d">
            <summary>
             void n_set_fly_2d(uint CardNo, double ScaleX, double ScaleY);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_fly_x_pos">
            <summary>
             void n_set_fly_x_pos(uint CardNo, double ScaleX);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_fly_y_pos">
            <summary>
             void n_set_fly_y_pos(uint CardNo, double ScaleY);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_fly_rot_pos">
            <summary>
             void n_set_fly_rot_pos(uint CardNo, double Resolution);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_fly_limits">
            <summary>
             void n_set_fly_limits(uint CardNo, int Xmin, int Xmax, int Ymin, int Ymax);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_fly_limits_z">
            <summary>
             void n_set_fly_limits_z(uint CardNo, int Zmin, int Zmax);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_if_fly_x_overflow">
            <summary>
             void n_if_fly_x_overflow(uint CardNo, int Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_if_fly_y_overflow">
            <summary>
             void n_if_fly_y_overflow(uint CardNo, int Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_if_fly_z_overflow">
            <summary>
             void n_if_fly_z_overflow(uint CardNo, int Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_if_not_fly_x_overflow">
            <summary>
             void n_if_not_fly_x_overflow(uint CardNo, int Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_if_not_fly_y_overflow">
            <summary>
             void n_if_not_fly_y_overflow(uint CardNo, int Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_if_not_fly_z_overflow">
            <summary>
             void n_if_not_fly_z_overflow(uint CardNo, int Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_clear_fly_overflow">
            <summary>
             void n_clear_fly_overflow(uint CardNo, uint Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_mcbsp_x_list">
            <summary>
             void n_set_mcbsp_x_list(uint CardNo, double ScaleX);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_mcbsp_y_list">
            <summary>
             void n_set_mcbsp_y_list(uint CardNo, double ScaleY);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_mcbsp_rot_list">
            <summary>
             void n_set_mcbsp_rot_list(uint CardNo, double Resolution);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_mcbsp_matrix_list">
            <summary>
             void n_set_mcbsp_matrix_list(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_mcbsp_global_x_list">
            <summary>
             void n_set_mcbsp_global_x_list(uint CardNo, double ScaleX);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_mcbsp_global_y_list">
            <summary>
             void n_set_mcbsp_global_y_list(uint CardNo, double ScaleY);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_mcbsp_global_rot_list">
            <summary>
             void n_set_mcbsp_global_rot_list(uint CardNo, double Resolution);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_mcbsp_global_matrix_list">
            <summary>
             void n_set_mcbsp_global_matrix_list(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_mcbsp_in_list">
            <summary>
             void n_set_mcbsp_in_list(uint CardNo, uint Mode, double Scale);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_multi_mcbsp_in_list">
            <summary>
             void n_set_multi_mcbsp_in_list(uint CardNo, uint Ctrl, uint P, uint Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_wait_for_encoder_mode">
            <summary>
             void n_wait_for_encoder_mode(uint CardNo, int Value, uint EncoderNo, int Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_wait_for_mcbsp">
            <summary>
             void n_wait_for_mcbsp(uint CardNo, uint Axis, int Value, int Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_encoder_speed">
            <summary>
             void n_set_encoder_speed(uint CardNo, uint EncoderNo, double Speed, double Smooth);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_get_mcbsp_list">
            <summary>
             void n_get_mcbsp_list(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_store_encoder">
            <summary>
             void n_store_encoder(uint CardNo, uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_wait_for_encoder_in_range">
            <summary>
             void n_wait_for_encoder_in_range(uint CardNo, int EncXmin, int EncXmax, int EncYmin, int EncYmax);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_activate_fly_xy">
            <summary>
             void n_activate_fly_xy(uint CardNo, double ScaleX, double ScaleY);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_activate_fly_2d">
            <summary>
             void n_activate_fly_2d(uint CardNo, double ScaleX, double ScaleY);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_activate_fly_xy_encoder">
            <summary>
             void n_activate_fly_xy_encoder(uint CardNo, double ScaleX, double ScaleY, int EncX, int EncY);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_activate_fly_2d_encoder">
            <summary>
             void n_activate_fly_2d_encoder(uint CardNo, double ScaleX, double ScaleY, int EncX, int EncY);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_if_not_activated">
            <summary>
             void n_if_not_activated(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_park_position">
            <summary>
             void n_park_position(uint CardNo, uint Mode, int X, int Y);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_park_return">
            <summary>
             void n_park_return(uint CardNo, uint Mode, int X, int Y);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_wait_for_encoder">
            <summary>
             void n_wait_for_encoder(uint CardNo, int Value, uint EncoderNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.fly_return_z">
            <summary>
             void fly_return_z(int X, int Y, int Z);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.fly_return">
            <summary>
             void fly_return(int X, int Y);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_rot_center_list">
            <summary>
             void set_rot_center_list(int X, int Y);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_ext_start_delay_list">
            <summary>
             void set_ext_start_delay_list(int Delay, uint EncoderNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_fly_x">
            <summary>
             void set_fly_x(double ScaleX);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_fly_y">
            <summary>
             void set_fly_y(double ScaleY);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_fly_z">
            <summary>
             void set_fly_z(double ScaleZ, uint EncoderNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_fly_rot">
            <summary>
             void set_fly_rot(double Resolution);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_fly_2d">
            <summary>
             void set_fly_2d(double ScaleX, double ScaleY);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_fly_x_pos">
            <summary>
             void set_fly_x_pos(double ScaleX);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_fly_y_pos">
            <summary>
             void set_fly_y_pos(double ScaleY);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_fly_rot_pos">
            <summary>
             void set_fly_rot_pos(double Resolution);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_fly_limits">
            <summary>
             void set_fly_limits(int Xmin, int Xmax, int Ymin, int Ymax);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_fly_limits_z">
            <summary>
             void set_fly_limits_z(int Zmin, int Zmax);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.if_fly_x_overflow">
            <summary>
             void if_fly_x_overflow(int Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.if_fly_y_overflow">
            <summary>
             void if_fly_y_overflow(int Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.if_fly_z_overflow">
            <summary>
             void if_fly_z_overflow(int Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.if_not_fly_x_overflow">
            <summary>
             void if_not_fly_x_overflow(int Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.if_not_fly_y_overflow">
            <summary>
             void if_not_fly_y_overflow(int Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.if_not_fly_z_overflow">
            <summary>
             void if_not_fly_z_overflow(int Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.clear_fly_overflow">
            <summary>
             void clear_fly_overflow(uint Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_mcbsp_x_list">
            <summary>
             void set_mcbsp_x_list(double ScaleX);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_mcbsp_y_list">
            <summary>
             void set_mcbsp_y_list(double ScaleY);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_mcbsp_rot_list">
            <summary>
             void set_mcbsp_rot_list(double Resolution);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_mcbsp_matrix_list">
            <summary>
             void set_mcbsp_matrix_list();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_mcbsp_global_x_list">
            <summary>
             void set_mcbsp_global_x_list(double ScaleX);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_mcbsp_global_y_list">
            <summary>
             void set_mcbsp_global_y_list(double ScaleY);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_mcbsp_global_rot_list">
            <summary>
             void set_mcbsp_global_rot_list(double Resolution);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_mcbsp_global_matrix_list">
            <summary>
             void set_mcbsp_global_matrix_list();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_mcbsp_in_list">
            <summary>
             void set_mcbsp_in_list(uint Mode, double Scale);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_multi_mcbsp_in_list">
            <summary>
             void set_multi_mcbsp_in_list(uint Ctrl, uint P, uint Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.wait_for_encoder_mode">
            <summary>
             void wait_for_encoder_mode(int Value, uint EncoderNo, int Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.wait_for_mcbsp">
            <summary>
             void wait_for_mcbsp(uint Axis, int Value, int Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_encoder_speed">
            <summary>
             void set_encoder_speed(uint EncoderNo, double Speed, double Smooth);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.get_mcbsp_list">
            <summary>
             void get_mcbsp_list();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.store_encoder">
            <summary>
             void store_encoder(uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.wait_for_encoder_in_range">
            <summary>
             void wait_for_encoder_in_range(int EncXmin, int EncXmax, int EncYmin, int EncYmax);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.activate_fly_xy">
            <summary>
             void activate_fly_xy(double ScaleX, double ScaleY);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.activate_fly_2d">
            <summary>
             void activate_fly_2d(double ScaleX, double ScaleY);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.activate_fly_xy_encoder">
            <summary>
             void activate_fly_xy_encoder(double ScaleX, double ScaleY, int EncX, int EncY);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.activate_fly_2d_encoder">
            <summary>
             void activate_fly_2d_encoder(double ScaleX, double ScaleY, int EncX, int EncY);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.if_not_activated">
            <summary>
             void if_not_activated();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.park_position">
            <summary>
             void park_position(uint Mode, int X, int Y);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.park_return">
            <summary>
             void park_return(uint Mode, int X, int Y);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.wait_for_encoder">
            <summary>
             void wait_for_encoder(int Value, uint EncoderNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_save_and_restart_timer">
            <summary>
             void n_save_and_restart_timer(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_wobbel">
            <summary>
             void n_set_wobbel(uint CardNo, uint Transversal, uint Longitudinal, double Freq);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_wobbel_mode">
            <summary>
             void n_set_wobbel_mode(uint CardNo, uint Transversal, uint Longitudinal, double Freq, int Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_wobbel_mode_phase">
            <summary>
             void n_set_wobbel_mode_phase(uint CardNo, uint Transversal, uint Longitudinal, double Freq, int Mode, double Phase);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_wobbel_direction">
            <summary>
             void n_set_wobbel_direction(uint CardNo, int dX, int dY);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_wobbel_control">
            <summary>
             void n_set_wobbel_control(uint CardNo, uint Ctrl, uint Value, uint MinValue, uint MaxValue);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_wobbel_vector">
            <summary>
             void n_set_wobbel_vector(uint CardNo, double dTrans, double dLong, uint Period, double dPower);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_wobbel_offset">
            <summary>
             void n_set_wobbel_offset(uint CardNo, int OffsetTrans, int OffsetLong);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_load_wobbel_power_list">
            <summary>
             void n_load_wobbel_power_list(uint CardNo, uint TableNo, int[] Ptr, int Flag);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_wobbel_power_angle">
            <summary>
             void n_set_wobbel_power_angle(uint CardNo, uint Angle);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_trigger">
            <summary>
             void n_set_trigger(uint CardNo, uint Period, uint Signal1, uint Signal2);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_trigger4">
            <summary>
             void n_set_trigger4(uint CardNo, uint Period, uint Signal1, uint Signal2, uint Signal3, uint Signal4);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_pixel_line_3d">
            <summary>
             void n_set_pixel_line_3d(uint CardNo, uint Channel, uint HalfPeriod, double dX, double dY, double dZ);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_pixel_line">
            <summary>
             void n_set_pixel_line(uint CardNo, uint Channel, uint HalfPeriod, double dX, double dY);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_stretch_pixel_line">
            <summary>
             void n_stretch_pixel_line(uint CardNo, uint Delay, uint Period);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_n_pixel">
            <summary>
             void n_set_n_pixel(uint CardNo, uint PulseLength, uint AnalogOut, uint Number);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_pixel">
            <summary>
             void n_set_pixel(uint CardNo, uint PulseLength, uint AnalogOut);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_rs232_write_text_list">
            <summary>
             void n_rs232_write_text_list(uint CardNo, string pData);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_mcbsp_out">
            <summary>
             void n_set_mcbsp_out(uint CardNo, uint Signal1, uint Signal2);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_mcbsp_out_ptr_list">
            <summary>
             void n_set_mcbsp_out_ptr_list(uint CardNo, uint Number, uint[] SignalPtr);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_camming">
            <summary>
             void n_camming(uint CardNo, uint FirstPos, uint NPos, uint No, uint Ctrl, double Scale, uint Code);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_periodic_toggle_list">
            <summary>
             void n_periodic_toggle_list(uint CardNo, uint Port, uint Mask, uint P1, uint P2, uint Count, uint Start);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_micro_vector_abs_3d">
            <summary>
             void n_micro_vector_abs_3d(uint CardNo, int X, int Y, int Z, int LasOn, int LasOf);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_micro_vector_rel_3d">
            <summary>
             void n_micro_vector_rel_3d(uint CardNo, int dX, int dY, int dZ, int LasOn, int LasOf);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_micro_vector_abs">
            <summary>
             void n_micro_vector_abs(uint CardNo, int X, int Y, int LasOn, int LasOf);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_micro_vector_rel">
            <summary>
             void n_micro_vector_rel(uint CardNo, int dX, int dY, int LasOn, int LasOf);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_free_variable_list">
            <summary>
             void n_set_free_variable_list(uint CardNo, uint VarNo, uint Value);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_jump_abs_drill_2">
            <summary>
             void n_jump_abs_drill_2(uint CardNo, int X, int Y, uint DrillTime, int XOff, int YOff);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_jump_rel_drill_2">
            <summary>
             void n_jump_rel_drill_2(uint CardNo, int dX, int dY, uint DrillTime, int XOff, int YOff);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_jump_abs_drill">
            <summary>
             void n_jump_abs_drill(uint CardNo, int X, int Y, uint DrillTime);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_jump_rel_drill">
            <summary>
             void n_jump_rel_drill(uint CardNo, int dX, int dY, uint DrillTime);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.save_and_restart_timer">
            <summary>
             void save_and_restart_timer();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_wobbel">
            <summary>
             void set_wobbel(uint Transversal, uint Longitudinal, double Freq);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_wobbel_mode">
            <summary>
             void set_wobbel_mode(uint Transversal, uint Longitudinal, double Freq, int Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_wobbel_mode_phase">
            <summary>
             void set_wobbel_mode_phase(uint Transversal, uint Longitudinal, double Freq, int Mode, double Phase);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_wobbel_direction">
            <summary>
             void set_wobbel_direction(int dX, int dY);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_wobbel_control">
            <summary>
             void set_wobbel_control(uint Ctrl, uint Value, uint MinValue, uint MaxValue);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_wobbel_vector">
            <summary>
             void set_wobbel_vector(double dTrans, double dLong, uint Period, double dPower);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_wobbel_offset">
            <summary>
             void set_wobbel_offset(int OffsetTrans, int OffsetLong);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.load_wobbel_power_list">
            <summary>
             void load_wobbel_power_list(uint TableNo, int[] Ptr, int Flag);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_wobbel_power_angle">
            <summary>
             void set_wobbel_power_angle(uint Angle);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_trigger">
            <summary>
             void set_trigger(uint Period, uint Signal1, uint Signal2);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_trigger4">
            <summary>
             void set_trigger4(uint Period, uint Signal1, uint Signal2, uint Signal3, uint Signal4);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_pixel_line_3d">
            <summary>
             void set_pixel_line_3d(uint Channel, uint HalfPeriod, double dX, double dY, double dZ);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_pixel_line">
            <summary>
             void set_pixel_line(uint Channel, uint HalfPeriod, double dX, double dY);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.stretch_pixel_line">
            <summary>
             void stretch_pixel_line(uint Delay, uint Period);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_n_pixel">
            <summary>
             void set_n_pixel(uint PulseLength, uint AnalogOut, uint Number);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_pixel">
            <summary>
             void set_pixel(uint PulseLength, uint AnalogOut);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.rs232_write_text_list">
            <summary>
             void rs232_write_text_list(string pData);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_mcbsp_out">
            <summary>
             void set_mcbsp_out(uint Signal1, uint Signal2);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_mcbsp_out_ptr_list">
            <summary>
             void set_mcbsp_out_ptr_list(uint Number, uint[] SignalPtr);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.camming">
            <summary>
             void camming(uint FirstPos, uint NPos, uint No, uint Ctrl, double Scale, uint Code);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.periodic_toggle_list">
            <summary>
             void periodic_toggle_list(uint Port, uint Mask, uint P1, uint P2, uint Count, uint Start);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.micro_vector_abs_3d">
            <summary>
             void micro_vector_abs_3d(int X, int Y, int Z, int LasOn, int LasOf);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.micro_vector_rel_3d">
            <summary>
             void micro_vector_rel_3d(int dX, int dY, int dZ, int LasOn, int LasOf);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.micro_vector_abs">
            <summary>
             void micro_vector_abs(int X, int Y, int LasOn, int LasOf);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.micro_vector_rel">
            <summary>
             void micro_vector_rel(int dX, int dY, int LasOn, int LasOf);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_free_variable_list">
            <summary>
             void set_free_variable_list(uint VarNo, uint Value);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.jump_abs_drill_2">
            <summary>
             void jump_abs_drill_2(int X, int Y, uint DrillTime, int XOff, int YOff);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.jump_rel_drill_2">
            <summary>
             void jump_rel_drill_2(int dX, int dY, uint DrillTime, int XOff, int YOff);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.jump_abs_drill">
            <summary>
             void jump_abs_drill(int X, int Y, uint DrillTime);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.jump_rel_drill">
            <summary>
             void jump_rel_drill(int dX, int dY, uint DrillTime);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_timed_mark_abs_3d">
            <summary>
             void n_timed_mark_abs_3d(uint CardNo, int X, int Y, int Z, double T);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_timed_mark_rel_3d">
            <summary>
             void n_timed_mark_rel_3d(uint CardNo, int dX, int dY, int dZ, double T);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_timed_mark_abs">
            <summary>
             void n_timed_mark_abs(uint CardNo, int X, int Y, double T);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_timed_mark_rel">
            <summary>
             void n_timed_mark_rel(uint CardNo, int dX, int dY, double T);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.timed_mark_abs_3d">
            <summary>
             void timed_mark_abs_3d(int X, int Y, int Z, double T);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.timed_mark_rel_3d">
            <summary>
             void timed_mark_rel_3d(int dX, int dY, int dZ, double T);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.timed_mark_abs">
            <summary>
             void timed_mark_abs(int X, int Y, double T);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.timed_mark_rel">
            <summary>
             void timed_mark_rel(int dX, int dY, double T);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_mark_abs_3d">
            <summary>
             void n_mark_abs_3d(uint CardNo, int X, int Y, int Z);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_mark_rel_3d">
            <summary>
             void n_mark_rel_3d(uint CardNo, int dX, int dY, int dZ);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_mark_abs">
            <summary>
             void n_mark_abs(uint CardNo, int X, int Y);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_mark_rel">
            <summary>
             void n_mark_rel(uint CardNo, int dX, int dY);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.mark_abs_3d">
            <summary>
             void mark_abs_3d(int X, int Y, int Z);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.mark_rel_3d">
            <summary>
             void mark_rel_3d(int dX, int dY, int dZ);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.mark_abs">
            <summary>
             void mark_abs(int X, int Y);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.mark_rel">
            <summary>
             void mark_rel(int dX, int dY);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_timed_jump_abs_3d">
            <summary>
             void n_timed_jump_abs_3d(uint CardNo, int X, int Y, int Z, double T);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_timed_jump_rel_3d">
            <summary>
             void n_timed_jump_rel_3d(uint CardNo, int dX, int dY, int dZ, double T);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_timed_jump_abs">
            <summary>
             void n_timed_jump_abs(uint CardNo, int X, int Y, double T);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_timed_jump_rel">
            <summary>
             void n_timed_jump_rel(uint CardNo, int dX, int dY, double T);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.timed_jump_abs_3d">
            <summary>
             void timed_jump_abs_3d(int X, int Y, int Z, double T);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.timed_jump_rel_3d">
            <summary>
             void timed_jump_rel_3d(int dX, int dY, int dZ, double T);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.timed_jump_abs">
            <summary>
             void timed_jump_abs(int X, int Y, double T);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.timed_jump_rel">
            <summary>
             void timed_jump_rel(int dX, int dY, double T);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_jump_abs_3d">
            <summary>
             void n_jump_abs_3d(uint CardNo, int X, int Y, int Z);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_jump_rel_3d">
            <summary>
             void n_jump_rel_3d(uint CardNo, int dX, int dY, int dZ);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_jump_abs">
            <summary>
             void n_jump_abs(uint CardNo, int X, int Y);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_jump_rel">
            <summary>
             void n_jump_rel(uint CardNo, int dX, int dY);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.jump_abs_3d">
            <summary>
             void jump_abs_3d(int X, int Y, int Z);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.jump_rel_3d">
            <summary>
             void jump_rel_3d(int dX, int dY, int dZ);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.jump_abs">
            <summary>
             void jump_abs(int X, int Y);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.jump_rel">
            <summary>
             void jump_rel(int dX, int dY);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_para_mark_abs_3d">
            <summary>
             void n_para_mark_abs_3d(uint CardNo, int X, int Y, int Z, uint P);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_para_mark_rel_3d">
            <summary>
             void n_para_mark_rel_3d(uint CardNo, int dX, int dY, int dZ, uint P);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_para_mark_abs">
            <summary>
             void n_para_mark_abs(uint CardNo, int X, int Y, uint P);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_para_mark_rel">
            <summary>
             void n_para_mark_rel(uint CardNo, int dX, int dY, uint P);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.para_mark_abs_3d">
            <summary>
             void para_mark_abs_3d(int X, int Y, int Z, uint P);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.para_mark_rel_3d">
            <summary>
             void para_mark_rel_3d(int dX, int dY, int dZ, uint P);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.para_mark_abs">
            <summary>
             void para_mark_abs(int X, int Y, uint P);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.para_mark_rel">
            <summary>
             void para_mark_rel(int dX, int dY, uint P);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_para_jump_abs_3d">
            <summary>
             void n_para_jump_abs_3d(uint CardNo, int X, int Y, int Z, uint P);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_para_jump_rel_3d">
            <summary>
             void n_para_jump_rel_3d(uint CardNo, int dX, int dY, int dZ, uint P);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_para_jump_abs">
            <summary>
             void n_para_jump_abs(uint CardNo, int X, int Y, uint P);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_para_jump_rel">
            <summary>
             void n_para_jump_rel(uint CardNo, int dX, int dY, uint P);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.para_jump_abs_3d">
            <summary>
             void para_jump_abs_3d(int X, int Y, int Z, uint P);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.para_jump_rel_3d">
            <summary>
             void para_jump_rel_3d(int dX, int dY, int dZ, uint P);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.para_jump_abs">
            <summary>
             void para_jump_abs(int X, int Y, uint P);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.para_jump_rel">
            <summary>
             void para_jump_rel(int dX, int dY, uint P);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_timed_para_mark_abs_3d">
            <summary>
             void n_timed_para_mark_abs_3d(uint CardNo, int X, int Y, int Z, uint P, double T);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_timed_para_mark_rel_3d">
            <summary>
             void n_timed_para_mark_rel_3d(uint CardNo, int dX, int dY, int dZ, uint P, double T);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_timed_para_jump_abs_3d">
            <summary>
             void n_timed_para_jump_abs_3d(uint CardNo, int X, int Y, int Z, uint P, double T);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_timed_para_jump_rel_3d">
            <summary>
             void n_timed_para_jump_rel_3d(uint CardNo, int dX, int dY, int dZ, uint P, double T);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_timed_para_mark_abs">
            <summary>
             void n_timed_para_mark_abs(uint CardNo, int X, int Y, uint P, double T);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_timed_para_mark_rel">
            <summary>
             void n_timed_para_mark_rel(uint CardNo, int dX, int dY, uint P, double T);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_timed_para_jump_abs">
            <summary>
             void n_timed_para_jump_abs(uint CardNo, int X, int Y, uint P, double T);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_timed_para_jump_rel">
            <summary>
             void n_timed_para_jump_rel(uint CardNo, int dX, int dY, uint P, double T);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.timed_para_mark_abs_3d">
            <summary>
             void timed_para_mark_abs_3d(int X, int Y, int Z, uint P, double T);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.timed_para_mark_rel_3d">
            <summary>
             void timed_para_mark_rel_3d(int dX, int dY, int dZ, uint P, double T);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.timed_para_jump_abs_3d">
            <summary>
             void timed_para_jump_abs_3d(int X, int Y, int Z, uint P, double T);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.timed_para_jump_rel_3d">
            <summary>
             void timed_para_jump_rel_3d(int dX, int dY, int dZ, uint P, double T);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.timed_para_mark_abs">
            <summary>
             void timed_para_mark_abs(int X, int Y, uint P, double T);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.timed_para_mark_rel">
            <summary>
             void timed_para_mark_rel(int dX, int dY, uint P, double T);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.timed_para_jump_abs">
            <summary>
             void timed_para_jump_abs(int X, int Y, uint P, double T);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.timed_para_jump_rel">
            <summary>
             void timed_para_jump_rel(int dX, int dY, uint P, double T);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_defocus_list">
            <summary>
             void n_set_defocus_list(uint CardNo, int Shift);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_defocus_offset_list">
            <summary>
             void n_set_defocus_offset_list(uint CardNo, int Shift);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_zoom_list">
            <summary>
             void n_set_zoom_list(uint CardNo, uint Zoom);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_defocus_list">
            <summary>
             void set_defocus_list(int Shift);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_defocus_offset_list">
            <summary>
             void set_defocus_offset_list(int Shift);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_zoom_list">
            <summary>
             void set_zoom_list(uint Zoom);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_timed_arc_abs">
            <summary>
             void n_timed_arc_abs(uint CardNo, int X, int Y, double Angle, double T);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_timed_arc_rel">
            <summary>
             void n_timed_arc_rel(uint CardNo, int dX, int dY, double Angle, double T);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.timed_arc_abs">
            <summary>
             void timed_arc_abs(int X, int Y, double Angle, double T);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.timed_arc_rel">
            <summary>
             void timed_arc_rel(int dX, int dY, double Angle, double T);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_arc_abs_3d">
            <summary>
             void n_arc_abs_3d(uint CardNo, int X, int Y, int Z, double Angle);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_arc_rel_3d">
            <summary>
             void n_arc_rel_3d(uint CardNo, int dX, int dY, int dZ, double Angle);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_arc_abs">
            <summary>
             void n_arc_abs(uint CardNo, int X, int Y, double Angle);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_arc_rel">
            <summary>
             void n_arc_rel(uint CardNo, int dX, int dY, double Angle);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_ellipse">
            <summary>
             void n_set_ellipse(uint CardNo, uint A, uint B, double Phi0, double Phi);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_mark_ellipse_abs">
            <summary>
             void n_mark_ellipse_abs(uint CardNo, int X, int Y, double Alpha);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_mark_ellipse_rel">
            <summary>
             void n_mark_ellipse_rel(uint CardNo, int dX, int dY, double Alpha);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.arc_abs_3d">
            <summary>
             void arc_abs_3d(int X, int Y, int Z, double Angle);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.arc_rel_3d">
            <summary>
             void arc_rel_3d(int dX, int dY, int dZ, double Angle);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.arc_abs">
            <summary>
             void arc_abs(int X, int Y, double Angle);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.arc_rel">
            <summary>
             void arc_rel(int dX, int dY, double Angle);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_ellipse">
            <summary>
             void set_ellipse(uint A, uint B, double Phi0, double Phi);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.mark_ellipse_abs">
            <summary>
             void mark_ellipse_abs(int X, int Y, double Alpha);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.mark_ellipse_rel">
            <summary>
             void mark_ellipse_rel(int dX, int dY, double Alpha);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_offset_xyz_list">
            <summary>
             void n_set_offset_xyz_list(uint CardNo, uint HeadNo, int XOffset, int YOffset, int ZOffset, uint at_once);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_offset_list">
            <summary>
             void n_set_offset_list(uint CardNo, uint HeadNo, int XOffset, int YOffset, uint at_once);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_matrix_list">
            <summary>
             void n_set_matrix_list(uint CardNo, uint HeadNo, uint Ind1, uint Ind2, double Mij, uint at_once);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_angle_list">
            <summary>
             void n_set_angle_list(uint CardNo, uint HeadNo, double Angle, uint at_once);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_scale_list">
            <summary>
             void n_set_scale_list(uint CardNo, uint HeadNo, double Scale, uint at_once);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_apply_mcbsp_list">
            <summary>
             void n_apply_mcbsp_list(uint CardNo, uint HeadNo, uint at_once);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_offset_xyz_list">
            <summary>
             void set_offset_xyz_list(uint HeadNo, int XOffset, int YOffset, int ZOffset, uint at_once);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_offset_list">
            <summary>
             void set_offset_list(uint HeadNo, int XOffset, int YOffset, uint at_once);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_matrix_list">
            <summary>
             void set_matrix_list(uint HeadNo, uint Ind1, uint Ind2, double Mij, uint at_once);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_angle_list">
            <summary>
             void set_angle_list(uint HeadNo, double Angle, uint at_once);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_scale_list">
            <summary>
             void set_scale_list(uint HeadNo, double Scale, uint at_once);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.apply_mcbsp_list">
            <summary>
             void apply_mcbsp_list(uint HeadNo, uint at_once);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_mark_speed">
            <summary>
             void n_set_mark_speed(uint CardNo, double Speed);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_jump_speed">
            <summary>
             void n_set_jump_speed(uint CardNo, double Speed);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_sky_writing_para_list">
            <summary>
             void n_set_sky_writing_para_list(uint CardNo, double Timelag, int LaserOnShift, uint Nprev, uint Npost);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_sky_writing_list">
            <summary>
             void n_set_sky_writing_list(uint CardNo, double Timelag, int LaserOnShift);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_sky_writing_limit_list">
            <summary>
             void n_set_sky_writing_limit_list(uint CardNo, double CosAngle);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_sky_writing_mode_list">
            <summary>
             void n_set_sky_writing_mode_list(uint CardNo, uint Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_scanner_delays">
            <summary>
             void n_set_scanner_delays(uint CardNo, uint Jump, uint Mark, uint Polygon);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_jump_mode_list">
            <summary>
             void n_set_jump_mode_list(uint CardNo, int Flag);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_enduring_wobbel">
            <summary>
             void n_enduring_wobbel(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_set_delay_mode_list">
            <summary>
             void n_set_delay_mode_list(uint CardNo, uint VarPoly, uint DirectMove3D, uint EdgeLevel, uint MinJumpDelay, uint JumpLengthLimit);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_mark_speed">
            <summary>
             void set_mark_speed(double Speed);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_jump_speed">
            <summary>
             void set_jump_speed(double Speed);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_sky_writing_para_list">
            <summary>
             void set_sky_writing_para_list(double Timelag, int LaserOnShift, uint Nprev, uint Npost);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_sky_writing_list">
            <summary>
             void set_sky_writing_list(double Timelag, int LaserOnShift);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_sky_writing_limit_list">
            <summary>
             void set_sky_writing_limit_list(double CosAngle);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_sky_writing_mode_list">
            <summary>
             void set_sky_writing_mode_list(uint Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_scanner_delays">
            <summary>
             void set_scanner_delays(uint Jump, uint Mark, uint Polygon);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_jump_mode_list">
            <summary>
             void set_jump_mode_list(int Flag);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.enduring_wobbel">
            <summary>
             void enduring_wobbel();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.set_delay_mode_list">
            <summary>
             void set_delay_mode_list(uint VarPoly, uint DirectMove3D, uint EdgeLevel, uint MinJumpDelay, uint JumpLengthLimit);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_stepper_enable_list">
            <summary>
             void n_stepper_enable_list(uint CardNo, int Enable1, int Enable2);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_stepper_control_list">
            <summary>
             void n_stepper_control_list(uint CardNo, int Period1, int Period2);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_stepper_abs_no_list">
            <summary>
             void n_stepper_abs_no_list(uint CardNo, uint No, int Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_stepper_rel_no_list">
            <summary>
             void n_stepper_rel_no_list(uint CardNo, uint No, int dPos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_stepper_abs_list">
            <summary>
             void n_stepper_abs_list(uint CardNo, int Pos1, int Pos2);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_stepper_rel_list">
            <summary>
             void n_stepper_rel_list(uint CardNo, int dPos1, int dPos2);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.n_stepper_wait">
            <summary>
             void n_stepper_wait(uint CardNo, uint No);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.stepper_enable_list">
            <summary>
             void stepper_enable_list(int Enable1, int Enable2);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.stepper_control_list">
            <summary>
             void stepper_control_list(int Period1, int Period2);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.stepper_abs_no_list">
            <summary>
             void stepper_abs_no_list(uint No, int Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.stepper_rel_no_list">
            <summary>
             void stepper_rel_no_list(uint No, int dPos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.stepper_abs_list">
            <summary>
             void stepper_abs_list(int Pos1, int Pos2);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.stepper_rel_list">
            <summary>
             void stepper_rel_list(int dPos1, int dPos2);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC5Wrap.stepper_wait">
            <summary>
             void stepper_wait(uint No);
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Scanner.RTC6Wrap">
            <summary>
            Notice that the construction of the RTC6Import object or an initial
            call of any RTC6Import method may throw a TypeInitializationException
            exception, which indicates that the required DLL is missing or the
            import of a particular DLL function failed. In order to analyze and
            properly handle such an error condition you need to catch that
            TypeInitializationException type exception.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.Initialized">
            <summary>
            dll 초기화 여부
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.init_rtc6_dll">
            <summary>
             uint init_rtc6_dll();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.free_rtc6_dll">
            <summary>
             void free_rtc6_dll();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_rtc4_mode">
            <summary>
             void set_rtc4_mode();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_rtc5_mode">
            <summary>
             void set_rtc5_mode();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_rtc6_mode">
            <summary>
             void set_rtc6_mode();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.get_rtc_mode">
            <summary>
             uint get_rtc_mode();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_get_error">
            <summary>
             uint n_get_error(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_get_last_error">
            <summary>
             uint n_get_last_error(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_reset_error">
            <summary>
             void n_reset_error(uint CardNo, uint Code);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_verify">
            <summary>
             uint n_set_verify(uint CardNo, uint Verify);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.get_error">
            <summary>
             uint get_error();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.get_last_error">
            <summary>
             uint get_last_error();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.reset_error">
            <summary>
             void reset_error(uint Code);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_verify">
            <summary>
             uint set_verify(uint Verify);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.verify_checksum">
            <summary>
             uint verify_checksum(string Name);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.eth_count_cards">
            <summary>
             uint eth_count_cards();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.eth_found_cards">
            <summary>
             uint eth_found_cards();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.eth_max_card">
            <summary>
             uint eth_max_card();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.eth_remove_card">
            <summary>
             int eth_remove_card(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.eth_get_card_info">
            <summary>
             void eth_get_card_info(uint CardNo, uint[] Ptr);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.eth_get_card_info_search">
            <summary>
             void eth_get_card_info_search(uint SearchNo, uint[] Ptr);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.eth_set_search_cards_timeout">
            <summary>
             void eth_set_search_cards_timeout(uint TimeOut);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.eth_search_cards">
            <summary>
             uint eth_search_cards(uint Ip, uint NetMask);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.eth_search_cards_range">
            <summary>
             uint eth_search_cards_range(uint StartIp, uint EndIp);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.eth_assign_card_ip">
            <summary>
             int eth_assign_card_ip(uint Ip, uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.eth_assign_card">
            <summary>
             int eth_assign_card(uint SearchNo, uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.eth_convert_string_to_ip">
            <summary>
             uint eth_convert_string_to_ip(string IpString);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.eth_convert_ip_to_string">
            <summary>
             void eth_convert_ip_to_string(uint Ip, uint[] IpString);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.eth_get_ip">
            <summary>
             uint eth_get_ip(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.eth_get_ip_search">
            <summary>
             uint eth_get_ip_search(uint SearchNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.eth_get_serial_search">
            <summary>
             uint eth_get_serial_search(uint SearchNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_eth_get_last_error">
            <summary>
             uint n_eth_get_last_error(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_eth_get_error">
            <summary>
             uint n_eth_get_error(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_eth_error_dump">
            <summary>
             uint n_eth_error_dump(uint CardNo, uint[] Dump);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_eth_set_static_ip">
            <summary>
             uint n_eth_set_static_ip(uint CardNo, uint Ip, uint NetMask, uint Gateway);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_eth_get_static_ip">
            <summary>
             uint n_eth_get_static_ip(uint CardNo, out uint Ip, out uint NetMask, out uint Gateway);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_eth_set_port_numbers">
            <summary>
             uint n_eth_set_port_numbers(uint CardNo, uint UDPsearch, uint UDPexcl, uint TCP);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_eth_get_port_numbers">
            <summary>
             uint n_eth_get_port_numbers(uint CardNo, out uint UDPsearch, out uint UDPexcl, out uint TCP);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_eth_set_com_timeouts">
            <summary>
             void n_eth_set_com_timeouts(uint CardNo, uint AcquireTimeout, uint AcquireMaxRetries, uint SendRecvTimeout, uint SendRecvMaxRetries, uint KeepAlive, uint KeepInterval);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_eth_get_com_timeouts">
            <summary>
             void n_eth_get_com_timeouts(uint CardNo, out uint AcquireTimeout, out uint AcquireMaxRetries, out uint SendRecvTimeout, out uint SendRecvMaxRetries, out uint KeepAlive, out uint KeepInterval);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_eth_set_com_timeouts_auto">
            <summary>
             void n_eth_set_com_timeouts_auto(uint CardNo, double InitialTimeout, double MaxTimeout, double Multiplier, uint Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_eth_get_com_timeouts_auto">
            <summary>
             void n_eth_get_com_timeouts_auto(uint CardNo, out double InitialTimeout, out double MaxTimeout, out double Multiplier, out uint Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_eth_set_high_performance_mode">
            <summary>
             uint n_eth_set_high_performance_mode(uint CardNo, uint Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_eth_check_connection">
            <summary>
             uint n_eth_check_connection(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_eth_boot_control">
            <summary>
             void n_set_eth_boot_control(uint CardNo, uint Ctrl);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_eth_boot_timeout">
            <summary>
             void n_eth_boot_timeout(uint CardNo, uint Timeout);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_eth_set_remote_tgm_format">
            <summary>
             void n_eth_set_remote_tgm_format(uint CardNo, uint Format);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_eth_boot_dcmd">
            <summary>
             void n_eth_boot_dcmd(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_store_program">
            <summary>
             uint n_store_program(uint CardNo, uint Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_read_image_eth">
            <summary>
             uint n_read_image_eth(uint CardNo, string Name);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_write_image_eth">
            <summary>
             uint n_write_image_eth(uint CardNo, string Name);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_eth_configure_link_loss">
            <summary>
             void n_eth_configure_link_loss(uint CardNo, uint Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_eth_get_standalone_status">
            <summary>
             void n_eth_get_standalone_status(uint CardNo, out uint Status, out uint Error, out uint Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_eth_config_waveform_streaming_ctrl">
            <summary>
             void n_eth_config_waveform_streaming_ctrl(uint CardNo, uint Size, uint Flags);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.eth_get_last_error">
            <summary>
             uint eth_get_last_error();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.eth_get_error">
            <summary>
             uint eth_get_error();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.eth_error_dump">
            <summary>
             uint eth_error_dump(uint[] Dump);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.eth_set_static_ip">
            <summary>
             uint eth_set_static_ip(uint Ip, uint NetMask, uint Gateway);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.eth_get_static_ip">
            <summary>
             uint eth_get_static_ip(out uint Ip, out uint NetMask, out uint Gateway);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.eth_set_port_numbers">
            <summary>
             uint eth_set_port_numbers(uint UDPsearch, uint UDPexcl, uint TCP);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.eth_get_port_numbers">
            <summary>
             uint eth_get_port_numbers(out uint UDPsearch, out uint UDPexcl, out uint TCP);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.eth_set_com_timeouts">
            <summary>
             void eth_set_com_timeouts(uint AcquireTimeout, uint AcquireMaxRetries, uint SendRecvTimeout, uint SendRecvMaxRetries, uint KeepAlive, uint KeepInterval);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.eth_get_com_timeouts">
            <summary>
             void eth_get_com_timeouts(out uint AcquireTimeout, out uint AcquireMaxRetries, out uint SendRecvTimeout, out uint SendRecvMaxRetries, out uint KeepAlive, out uint KeepInterval);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.eth_set_com_timeouts_auto">
            <summary>
             void eth_set_com_timeouts_auto(double InitialTimeout, double MaxTimeout, double Multiplier, uint Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.eth_get_com_timeouts_auto">
            <summary>
             void eth_get_com_timeouts_auto(out double InitialTimeout, out double MaxTimeout, out double Multiplier, out uint Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.eth_set_high_performance_mode">
            <summary>
             uint eth_set_high_performance_mode(uint Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.eth_check_connection">
            <summary>
             uint eth_check_connection();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_eth_boot_control">
            <summary>
             void set_eth_boot_control(uint Ctrl);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.eth_boot_timeout">
            <summary>
             void eth_boot_timeout(uint Timeout);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.eth_set_remote_tgm_format">
            <summary>
             void eth_set_remote_tgm_format(uint Format);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.eth_boot_dcmd">
            <summary>
             void eth_boot_dcmd();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.store_program">
            <summary>
             uint store_program(uint Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.read_image_eth">
            <summary>
             uint read_image_eth(string Name);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.write_image_eth">
            <summary>
             uint write_image_eth(string Name);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.eth_configure_link_loss">
            <summary>
             void eth_configure_link_loss(uint Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.eth_get_standalone_status">
            <summary>
             void eth_get_standalone_status(out uint Status, out uint Error, out uint Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.eth_config_waveform_streaming_ctrl">
            <summary>
             void eth_config_waveform_streaming_ctrl(uint Size, uint Flags);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.read_abc_from_file">
            <summary>
             uint read_abc_from_file(string Name, out double A, out double B, out double C);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.write_abc_to_file">
            <summary>
             uint write_abc_to_file(string Name, double A, double B, double C);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.read_abc_from_file_20b">
            <summary>
             uint read_abc_from_file_20b(string Name, out double A, out double B, out double C);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.write_abc_to_file_20b">
            <summary>
             uint write_abc_to_file_20b(string Name, double A, double B, double C);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_create_dat_file">
            <summary>
             uint n_create_dat_file(uint CardNo, int Flag);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.create_dat_file">
            <summary>
             uint create_dat_file(int Flag);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.transform">
            <summary>
             uint transform(out int Sig1, out int Sig2, uint[] Ptr, uint Code);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.rtc6_count_cards">
            <summary>
             uint rtc6_count_cards();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.acquire_rtc">
            <summary>
             uint acquire_rtc(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.release_rtc">
            <summary>
             uint release_rtc(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.select_rtc">
            <summary>
             uint select_rtc(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.get_dll_version">
            <summary>
             uint get_dll_version();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_get_card_type">
            <summary>
             uint n_get_card_type(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_get_serial_number">
            <summary>
             uint n_get_serial_number(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_get_hex_version">
            <summary>
             uint n_get_hex_version(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_get_rtc_version">
            <summary>
             uint n_get_rtc_version(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_get_bios_version">
            <summary>
             uint n_get_bios_version(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.get_card_type">
            <summary>
             uint get_card_type();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.get_serial_number">
            <summary>
             uint get_serial_number();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.get_hex_version">
            <summary>
             uint get_hex_version();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.get_rtc_version">
            <summary>
             uint get_rtc_version();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.get_bios_version">
            <summary>
             uint get_bios_version();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_load_program_file">
            <summary>
             uint n_load_program_file(uint CardNo, string Path);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_sync_slaves">
            <summary>
             void n_sync_slaves(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_get_sync_status">
            <summary>
             uint n_get_sync_status(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_master_slave_config">
            <summary>
             void n_master_slave_config(uint CardNo, uint Flags);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_load_correction_file">
            <summary>
             uint n_load_correction_file(uint CardNo, string Name, uint No, uint Dim);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_load_zoom_correction_file">
            <summary>
             uint n_load_zoom_correction_file(uint CardNo, string Name, uint No);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_load_oct_table_no">
            <summary>
             uint n_load_oct_table_no(uint CardNo, double A, double B, uint No);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_load_z_table_no">
            <summary>
             uint n_load_z_table_no(uint CardNo, double A, double B, double C, uint No);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_load_z_table">
            <summary>
             uint n_load_z_table(uint CardNo, double A, double B, double C);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_select_cor_table">
            <summary>
             void n_select_cor_table(uint CardNo, uint HeadA, uint HeadB);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_dsp_mode">
            <summary>
             uint n_set_dsp_mode(uint CardNo, uint Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_load_stretch_table">
            <summary>
             int n_load_stretch_table(uint CardNo, string Name, int No, uint TableNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_number_of_correction_tables">
            <summary>
             void n_number_of_correction_tables(uint CardNo, uint Number);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_load_z_table_no_20b">
            <summary>
             uint n_load_z_table_no_20b(uint CardNo, double A, double B, double C, uint No);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_load_z_table_20b">
            <summary>
             uint n_load_z_table_20b(uint CardNo, double A, double B, double C);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_get_head_para">
            <summary>
             double n_get_head_para(uint CardNo, uint HeadNo, uint ParaNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_get_table_para">
            <summary>
             double n_get_table_para(uint CardNo, uint TableNo, uint ParaNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.load_program_file">
            <summary>
             uint load_program_file(string Path);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.sync_slaves">
            <summary>
             void sync_slaves();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.get_sync_status">
            <summary>
             uint get_sync_status();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.master_slave_config">
            <summary>
             void master_slave_config(uint Flags);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.load_correction_file">
            <summary>
             uint load_correction_file(string Name, uint No, uint Dim);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.load_zoom_correction_file">
            <summary>
             uint load_zoom_correction_file(string Name, uint No);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.load_oct_table_no">
            <summary>
             uint load_oct_table_no(double A, double B, uint No);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.load_z_table_no">
            <summary>
             uint load_z_table_no(double A, double B, double C, uint No);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.load_z_table">
            <summary>
             uint load_z_table(double A, double B, double C);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.select_cor_table">
            <summary>
             void select_cor_table(uint HeadA, uint HeadB);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_dsp_mode">
            <summary>
             uint set_dsp_mode(uint Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.load_stretch_table">
            <summary>
             int load_stretch_table(string Name, int No, uint TableNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.number_of_correction_tables">
            <summary>
             void number_of_correction_tables(uint Number);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.load_z_table_no_20b">
            <summary>
             uint load_z_table_no_20b(double A, double B, double C, uint No);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.load_z_table_20b">
            <summary>
             uint load_z_table_20b(double A, double B, double C);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.get_head_para">
            <summary>
             double get_head_para(uint HeadNo, uint ParaNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.get_table_para">
            <summary>
             double get_table_para(uint TableNo, uint ParaNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_config_list">
            <summary>
             void n_config_list(uint CardNo, uint Mem1, uint Mem2);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_get_config_list">
            <summary>
             void n_get_config_list(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_save_disk">
            <summary>
             uint n_save_disk(uint CardNo, string Name, uint Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_load_disk">
            <summary>
             uint n_load_disk(uint CardNo, string Name, uint Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_get_list_space">
            <summary>
             uint n_get_list_space(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.config_list">
            <summary>
             void config_list(uint Mem1, uint Mem2);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.get_config_list">
            <summary>
             void get_config_list();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.save_disk">
            <summary>
             uint save_disk(string Name, uint Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.load_disk">
            <summary>
             uint load_disk(string Name, uint Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.get_list_space">
            <summary>
             uint get_list_space();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_start_list_pos">
            <summary>
             void n_set_start_list_pos(uint CardNo, uint ListNo, uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_start_list">
            <summary>
             void n_set_start_list(uint CardNo, uint ListNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_start_list_1">
            <summary>
             void n_set_start_list_1(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_start_list_2">
            <summary>
             void n_set_start_list_2(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_input_pointer">
            <summary>
             void n_set_input_pointer(uint CardNo, uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_load_list">
            <summary>
             uint n_load_list(uint CardNo, uint ListNo, uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_load_sub">
            <summary>
             void n_load_sub(uint CardNo, uint Index);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_load_char">
            <summary>
             void n_load_char(uint CardNo, uint Char);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_load_text_table">
            <summary>
             void n_load_text_table(uint CardNo, uint Index);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_get_list_pointer">
            <summary>
             void n_get_list_pointer(uint CardNo, out uint ListNo, out uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_get_input_pointer">
            <summary>
             uint n_get_input_pointer(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_start_list_pos">
            <summary>
             void set_start_list_pos(uint ListNo, uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_start_list">
            <summary>
             void set_start_list(uint ListNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_start_list_1">
            <summary>
             void set_start_list_1();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_start_list_2">
            <summary>
             void set_start_list_2();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_input_pointer">
            <summary>
             void set_input_pointer(uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.load_list">
            <summary>
             uint load_list(uint ListNo, uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.load_sub">
            <summary>
             void load_sub(uint Index);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.load_char">
            <summary>
             void load_char(uint Char);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.load_text_table">
            <summary>
             void load_text_table(uint Index);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.get_list_pointer">
            <summary>
             void get_list_pointer(out uint ListNo, out uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.get_input_pointer">
            <summary>
             uint get_input_pointer();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_execute_list_pos">
            <summary>
             void n_execute_list_pos(uint CardNo, uint ListNo, uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_execute_at_pointer">
            <summary>
             void n_execute_at_pointer(uint CardNo, uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_execute_list">
            <summary>
             void n_execute_list(uint CardNo, uint ListNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_execute_list_1">
            <summary>
             void n_execute_list_1(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_execute_list_2">
            <summary>
             void n_execute_list_2(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_list_jump_rel_ctrl">
            <summary>
             uint n_list_jump_rel_ctrl(uint CardNo, int Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_get_out_pointer">
            <summary>
             void n_get_out_pointer(uint CardNo, out uint ListNo, out uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.execute_list_pos">
            <summary>
             void execute_list_pos(uint ListNo, uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.execute_at_pointer">
            <summary>
             void execute_at_pointer(uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.execute_list">
            <summary>
             void execute_list(uint ListNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.execute_list_1">
            <summary>
             void execute_list_1();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.execute_list_2">
            <summary>
             void execute_list_2();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.list_jump_rel_ctrl">
            <summary>
             uint list_jump_rel_ctrl(int Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.get_out_pointer">
            <summary>
             void get_out_pointer(out uint ListNo, out uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_auto_change_pos">
            <summary>
             void n_auto_change_pos(uint CardNo, uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_start_loop">
            <summary>
             void n_start_loop(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_quit_loop">
            <summary>
             void n_quit_loop(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_pause_list">
            <summary>
             void n_pause_list(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_restart_list">
            <summary>
             void n_restart_list(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_release_wait">
            <summary>
             void n_release_wait(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_stop_execution">
            <summary>
             void n_stop_execution(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_pause_list_cond">
            <summary>
             void n_set_pause_list_cond(uint CardNo, uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_pause_list_not_cond">
            <summary>
             void n_set_pause_list_not_cond(uint CardNo, uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_auto_change">
            <summary>
             void n_auto_change(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_stop_list">
            <summary>
             void n_stop_list(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_get_wait_status">
            <summary>
             uint n_get_wait_status(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_read_status">
            <summary>
             uint n_read_status(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_get_status">
            <summary>
             void n_get_status(uint CardNo, out uint Status, out uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.auto_change_pos">
            <summary>
             void auto_change_pos(uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.start_loop">
            <summary>
             void start_loop();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.quit_loop">
            <summary>
             void quit_loop();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.pause_list">
            <summary>
             void pause_list();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.restart_list">
            <summary>
             void restart_list();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.release_wait">
            <summary>
             void release_wait();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.stop_execution">
            <summary>
             void stop_execution();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_pause_list_cond">
            <summary>
             void set_pause_list_cond(uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_pause_list_not_cond">
            <summary>
             void set_pause_list_not_cond(uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.auto_change">
            <summary>
             void auto_change();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.stop_list">
            <summary>
             void stop_list();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.get_wait_status">
            <summary>
             uint get_wait_status();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.read_status">
            <summary>
             uint read_status();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.get_status">
            <summary>
             void get_status(out uint Status, out uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_extstartpos">
            <summary>
             void n_set_extstartpos(uint CardNo, uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_max_counts">
            <summary>
             void n_set_max_counts(uint CardNo, uint Counts);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_control_mode">
            <summary>
             void n_set_control_mode(uint CardNo, uint Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_simulate_ext_stop">
            <summary>
             void n_simulate_ext_stop(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_simulate_ext_start_ctrl">
            <summary>
             void n_simulate_ext_start_ctrl(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_store_timestamp_counter">
            <summary>
             void n_store_timestamp_counter(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_get_timestamp_long">
            <summary>
             void n_get_timestamp_long(uint CardNo, out uint TimeStampL, out uint TimeStampH);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_get_counts">
            <summary>
             uint n_get_counts(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_get_startstop_info">
            <summary>
             uint n_get_startstop_info(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_extstartpos">
            <summary>
             void set_extstartpos(uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_max_counts">
            <summary>
             void set_max_counts(uint Counts);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_control_mode">
            <summary>
             void set_control_mode(uint Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.simulate_ext_stop">
            <summary>
             void simulate_ext_stop();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.simulate_ext_start_ctrl">
            <summary>
             void simulate_ext_start_ctrl();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.store_timestamp_counter">
            <summary>
             void store_timestamp_counter();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.get_timestamp_long">
            <summary>
             void get_timestamp_long(out uint TimeStampL, out uint TimeStampH);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.get_counts">
            <summary>
             uint get_counts();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.get_startstop_info">
            <summary>
             uint get_startstop_info();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_copy_dst_src">
            <summary>
             void n_copy_dst_src(uint CardNo, uint Dst, uint Src, uint Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_char_pointer">
            <summary>
             void n_set_char_pointer(uint CardNo, uint Char, uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_sub_pointer">
            <summary>
             void n_set_sub_pointer(uint CardNo, uint Index, uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_text_table_pointer">
            <summary>
             void n_set_text_table_pointer(uint CardNo, uint Index, uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_char_table">
            <summary>
             void n_set_char_table(uint CardNo, uint Index, uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_get_char_pointer">
            <summary>
             uint n_get_char_pointer(uint CardNo, uint Char);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_get_sub_pointer">
            <summary>
             uint n_get_sub_pointer(uint CardNo, uint Index);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_get_text_table_pointer">
            <summary>
             uint n_get_text_table_pointer(uint CardNo, uint Index);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.copy_dst_src">
            <summary>
             void copy_dst_src(uint Dst, uint Src, uint Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_char_pointer">
            <summary>
             void set_char_pointer(uint Char, uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_sub_pointer">
            <summary>
             void set_sub_pointer(uint Index, uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_text_table_pointer">
            <summary>
             void set_text_table_pointer(uint Index, uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_char_table">
            <summary>
             void set_char_table(uint Index, uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.get_char_pointer">
            <summary>
             uint get_char_pointer(uint Char);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.get_sub_pointer">
            <summary>
             uint get_sub_pointer(uint Index);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.get_text_table_pointer">
            <summary>
             uint get_text_table_pointer(uint Index);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_time_update">
            <summary>
             void n_time_update(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_time_control_eth">
            <summary>
             void n_time_control_eth(uint CardNo, double PPM);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_serial_step">
            <summary>
             void n_set_serial_step(uint CardNo, uint No, uint Step);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_select_serial_set">
            <summary>
             void n_select_serial_set(uint CardNo, uint No);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_serial">
            <summary>
             void n_set_serial(uint CardNo, uint No);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_get_serial">
            <summary>
             double n_get_serial(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_get_list_serial">
            <summary>
             double n_get_list_serial(uint CardNo, out uint SetNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.time_update">
            <summary>
             void time_update();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.time_control_eth">
            <summary>
             void time_control_eth(double PPM);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_serial_step">
            <summary>
             void set_serial_step(uint No, uint Step);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.select_serial_set">
            <summary>
             void select_serial_set(uint No);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_serial">
            <summary>
             void set_serial(uint No);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.get_serial">
            <summary>
             double get_serial();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.get_list_serial">
            <summary>
             double get_list_serial(out uint SetNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_write_io_port_mask">
            <summary>
             void n_write_io_port_mask(uint CardNo, uint Value, uint Mask);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_write_8bit_port">
            <summary>
             void n_write_8bit_port(uint CardNo, uint Value);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_read_io_port">
            <summary>
             uint n_read_io_port(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_read_io_port_buffer">
            <summary>
             uint n_read_io_port_buffer(uint CardNo, uint Index, out uint Value, out int XPos, out int YPos, out uint Time);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_get_io_status">
            <summary>
             uint n_get_io_status(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_read_analog_in">
            <summary>
             uint n_read_analog_in(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_write_da_x">
            <summary>
             void n_write_da_x(uint CardNo, uint x, uint Value);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_laser_off_default">
            <summary>
             void n_set_laser_off_default(uint CardNo, uint AnalogOut1, uint AnalogOut2, uint DigitalOut);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_port_default">
            <summary>
             void n_set_port_default(uint CardNo, uint Port, uint Value);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_write_io_port">
            <summary>
             void n_write_io_port(uint CardNo, uint Value);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_write_da_1">
            <summary>
             void n_write_da_1(uint CardNo, uint Value);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_write_da_2">
            <summary>
             void n_write_da_2(uint CardNo, uint Value);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.write_io_port_mask">
            <summary>
             void write_io_port_mask(uint Value, uint Mask);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.write_8bit_port">
            <summary>
             void write_8bit_port(uint Value);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.read_io_port">
            <summary>
             uint read_io_port();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.read_io_port_buffer">
            <summary>
             uint read_io_port_buffer(uint Index, out uint Value, out int XPos, out int YPos, out uint Time);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.get_io_status">
            <summary>
             uint get_io_status();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.read_analog_in">
            <summary>
             uint read_analog_in();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.write_da_x">
            <summary>
             void write_da_x(uint x, uint Value);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_laser_off_default">
            <summary>
             void set_laser_off_default(uint AnalogOut1, uint AnalogOut2, uint DigitalOut);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_port_default">
            <summary>
             void set_port_default(uint Port, uint Value);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.write_io_port">
            <summary>
             void write_io_port(uint Value);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.write_da_1">
            <summary>
             void write_da_1(uint Value);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.write_da_2">
            <summary>
             void write_da_2(uint Value);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_disable_laser">
            <summary>
             void n_disable_laser(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_enable_laser">
            <summary>
             void n_enable_laser(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_laser_signal_on">
            <summary>
             void n_laser_signal_on(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_laser_signal_off">
            <summary>
             void n_laser_signal_off(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_standby">
            <summary>
             void n_set_standby(uint CardNo, uint HalfPeriod, uint PulseLength);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_laser_pulses_ctrl">
            <summary>
             void n_set_laser_pulses_ctrl(uint CardNo, uint HalfPeriod, uint PulseLength);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_firstpulse_killer">
            <summary>
             void n_set_firstpulse_killer(uint CardNo, uint Length);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_qswitch_delay">
            <summary>
             void n_set_qswitch_delay(uint CardNo, uint Delay);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_laser_mode">
            <summary>
             void n_set_laser_mode(uint CardNo, uint Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_laser_control">
            <summary>
             void n_set_laser_control(uint CardNo, uint Ctrl);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_laser_pin_out">
            <summary>
             void n_set_laser_pin_out(uint CardNo, uint Pins);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_get_laser_pin_in">
            <summary>
             uint n_get_laser_pin_in(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_softstart_level">
            <summary>
             void n_set_softstart_level(uint CardNo, uint Index, uint Level);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_softstart_mode">
            <summary>
             void n_set_softstart_mode(uint CardNo, uint Mode, uint Number, uint Delay);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_auto_laser_control">
            <summary>
             uint n_set_auto_laser_control(uint CardNo, uint Ctrl, uint Value, uint Mode, uint MinValue, uint MaxValue);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_auto_laser_params">
            <summary>
             uint n_set_auto_laser_params(uint CardNo, uint Ctrl, uint Value, uint MinValue, uint MaxValue);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_load_auto_laser_control">
            <summary>
             int n_load_auto_laser_control(uint CardNo, string Name, uint No);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_load_position_control">
            <summary>
             int n_load_position_control(uint CardNo, string Name, uint No);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_default_pixel">
            <summary>
             void n_set_default_pixel(uint CardNo, uint PulseLength);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_get_standby">
            <summary>
             void n_get_standby(uint CardNo, out uint HalfPeriod, out uint PulseLength);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_pulse_picking">
            <summary>
             void n_set_pulse_picking(uint CardNo, uint No);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_pulse_picking_length">
            <summary>
             void n_set_pulse_picking_length(uint CardNo, uint Length);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_config_laser_signals">
            <summary>
             void n_config_laser_signals(uint CardNo, uint Config);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_spot_distance_ctrl">
            <summary>
             void n_spot_distance_ctrl(uint CardNo, double Dist);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_laser_pulse_form">
            <summary>
             void n_set_laser_pulse_form(uint CardNo, uint Mode, uint Length);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_laser_pulse_sync">
            <summary>
             void n_set_laser_pulse_sync(uint CardNo, uint Mode, uint Delay);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_controlpreview_compensation_ctrl">
            <summary>
             void n_set_controlpreview_compensation_ctrl(uint CardNo, uint ControlPreview, uint Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.disable_laser">
            <summary>
             void disable_laser();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.enable_laser">
            <summary>
             void enable_laser();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.laser_signal_on">
            <summary>
             void laser_signal_on();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.laser_signal_off">
            <summary>
             void laser_signal_off();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_standby">
            <summary>
             void set_standby(uint HalfPeriod, uint PulseLength);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_laser_pulses_ctrl">
            <summary>
             void set_laser_pulses_ctrl(uint HalfPeriod, uint PulseLength);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_firstpulse_killer">
            <summary>
             void set_firstpulse_killer(uint Length);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_qswitch_delay">
            <summary>
             void set_qswitch_delay(uint Delay);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_laser_mode">
            <summary>
             void set_laser_mode(uint Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_laser_control">
            <summary>
             void set_laser_control(uint Ctrl);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_laser_pin_out">
            <summary>
             void set_laser_pin_out(uint Pins);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.get_laser_pin_in">
            <summary>
             uint get_laser_pin_in();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_softstart_level">
            <summary>
             void set_softstart_level(uint Index, uint Level);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_softstart_mode">
            <summary>
             void set_softstart_mode(uint Mode, uint Number, uint Delay);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_auto_laser_control">
            <summary>
             uint set_auto_laser_control(uint Ctrl, uint Value, uint Mode, uint MinValue, uint MaxValue);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_auto_laser_params">
            <summary>
             uint set_auto_laser_params(uint Ctrl, uint Value, uint MinValue, uint MaxValue);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.load_auto_laser_control">
            <summary>
             int load_auto_laser_control(string Name, uint No);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.load_position_control">
            <summary>
             int load_position_control(string Name, uint No);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_default_pixel">
            <summary>
             void set_default_pixel(uint PulseLength);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.get_standby">
            <summary>
             void get_standby(out uint HalfPeriod, out uint PulseLength);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_pulse_picking">
            <summary>
             void set_pulse_picking(uint No);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_pulse_picking_length">
            <summary>
             void set_pulse_picking_length(uint Length);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.config_laser_signals">
            <summary>
             void config_laser_signals(uint Config);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.spot_distance_ctrl">
            <summary>
             void spot_distance_ctrl(double Dist);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_laser_pulse_form">
            <summary>
             void set_laser_pulse_form(uint Mode, uint Length);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_laser_pulse_sync">
            <summary>
             void set_laser_pulse_sync(uint Mode, uint Delay);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_controlpreview_compensation_ctrl">
            <summary>
             void set_controlpreview_compensation_ctrl(uint ControlPreview, uint Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_ext_start_delay">
            <summary>
             void n_set_ext_start_delay(uint CardNo, int Delay, uint EncoderNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_rot_center">
            <summary>
             void n_set_rot_center(uint CardNo, int X, int Y);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_simulate_encoder">
            <summary>
             void n_simulate_encoder(uint CardNo, uint EncoderNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_get_marking_info">
            <summary>
             uint n_get_marking_info(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_encoder_speed_ctrl">
            <summary>
             void n_set_encoder_speed_ctrl(uint CardNo, uint EncoderNo, double Speed, double Smooth);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_mcbsp_x">
            <summary>
             void n_set_mcbsp_x(uint CardNo, double ScaleX);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_mcbsp_y">
            <summary>
             void n_set_mcbsp_y(uint CardNo, double ScaleY);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_mcbsp_rot">
            <summary>
             void n_set_mcbsp_rot(uint CardNo, double Resolution);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_mcbsp_matrix">
            <summary>
             void n_set_mcbsp_matrix(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_mcbsp_global_x">
            <summary>
             void n_set_mcbsp_global_x(uint CardNo, double ScaleX);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_mcbsp_global_y">
            <summary>
             void n_set_mcbsp_global_y(uint CardNo, double ScaleY);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_mcbsp_global_rot">
            <summary>
             void n_set_mcbsp_global_rot(uint CardNo, double Resolution);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_mcbsp_global_matrix">
            <summary>
             void n_set_mcbsp_global_matrix(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_mcbsp_in">
            <summary>
             void n_set_mcbsp_in(uint CardNo, uint Mode, double Scale);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_multi_mcbsp_in">
            <summary>
             void n_set_multi_mcbsp_in(uint CardNo, uint Ctrl, uint P, uint Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_fly_tracking_error">
            <summary>
             void n_set_fly_tracking_error(uint CardNo, uint TrackingErrorX, uint TrackingErrorY);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_load_fly_2d_table">
            <summary>
             int n_load_fly_2d_table(uint CardNo, string Name, uint No);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_init_fly_2d">
            <summary>
             void n_init_fly_2d(uint CardNo, int OffsetX, int OffsetY, uint No);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_get_fly_2d_offset">
            <summary>
             void n_get_fly_2d_offset(uint CardNo, out int OffsetX, out int OffsetY);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_get_encoder">
            <summary>
             void n_get_encoder(uint CardNo, out int Encoder0, out int Encoder1);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_read_encoder">
            <summary>
             void n_read_encoder(uint CardNo, out int Encoder0_1, out int Encoder1_1, out int Encoder0_2, out int Encoder1_2);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_get_mcbsp">
            <summary>
             int n_get_mcbsp(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_read_mcbsp">
            <summary>
             int n_read_mcbsp(uint CardNo, uint No);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_read_multi_mcbsp">
            <summary>
             int n_read_multi_mcbsp(uint CardNo, uint No);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_clear_fly_overflow_ctrl">
            <summary>
             void n_clear_fly_overflow_ctrl(uint CardNo, uint Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_encoder_filter_ctrl">
            <summary>
             void n_set_encoder_filter_ctrl(uint CardNo, uint Length, uint Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_ext_start_delay">
            <summary>
             void set_ext_start_delay(int Delay, uint EncoderNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_rot_center">
            <summary>
             void set_rot_center(int X, int Y);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.simulate_encoder">
            <summary>
             void simulate_encoder(uint EncoderNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.get_marking_info">
            <summary>
             uint get_marking_info();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_encoder_speed_ctrl">
            <summary>
             void set_encoder_speed_ctrl(uint EncoderNo, double Speed, double Smooth);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_mcbsp_x">
            <summary>
             void set_mcbsp_x(double ScaleX);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_mcbsp_y">
            <summary>
             void set_mcbsp_y(double ScaleY);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_mcbsp_rot">
            <summary>
             void set_mcbsp_rot(double Resolution);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_mcbsp_matrix">
            <summary>
             void set_mcbsp_matrix();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_mcbsp_global_x">
            <summary>
             void set_mcbsp_global_x(double ScaleX);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_mcbsp_global_y">
            <summary>
             void set_mcbsp_global_y(double ScaleY);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_mcbsp_global_rot">
            <summary>
             void set_mcbsp_global_rot(double Resolution);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_mcbsp_global_matrix">
            <summary>
             void set_mcbsp_global_matrix();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_mcbsp_in">
            <summary>
             void set_mcbsp_in(uint Mode, double Scale);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_multi_mcbsp_in">
            <summary>
             void set_multi_mcbsp_in(uint Ctrl, uint P, uint Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_fly_tracking_error">
            <summary>
             void set_fly_tracking_error(uint TrackingErrorX, uint TrackingErrorY);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.load_fly_2d_table">
            <summary>
             int load_fly_2d_table(string Name, uint No);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.init_fly_2d">
            <summary>
             void init_fly_2d(int OffsetX, int OffsetY, uint No);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.get_fly_2d_offset">
            <summary>
             void get_fly_2d_offset(out int OffsetX, out int OffsetY);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.get_encoder">
            <summary>
             void get_encoder(out int Encoder0, out int Encoder1);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.read_encoder">
            <summary>
             void read_encoder(out int Encoder0_1, out int Encoder1_1, out int Encoder0_2, out int Encoder1_2);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.get_mcbsp">
            <summary>
             int get_mcbsp();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.read_mcbsp">
            <summary>
             int read_mcbsp(uint No);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.read_multi_mcbsp">
            <summary>
             int read_multi_mcbsp(uint No);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.clear_fly_overflow_ctrl">
            <summary>
             void clear_fly_overflow_ctrl(uint Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_encoder_filter_ctrl">
            <summary>
             void set_encoder_filter_ctrl(uint Length, uint Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_get_time">
            <summary>
             double n_get_time(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_get_lap_time">
            <summary>
             double n_get_lap_time(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_measurement_status">
            <summary>
             void n_measurement_status(uint CardNo, out uint Busy, out uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_get_waveform_offset">
            <summary>
             void n_get_waveform_offset(uint CardNo, uint Channel, uint Offset, uint Number, int[] Ptr);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_get_waveform">
            <summary>
             void n_get_waveform(uint CardNo, uint Channel, uint Number, int[] Ptr);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_bounce_supp">
            <summary>
             void n_bounce_supp(uint CardNo, uint Length);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_home_position_4">
            <summary>
             void n_home_position_4(uint CardNo, int X0Home, int X1Home, int X2Home, int X3Home);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_get_home_position_4">
            <summary>
             void n_get_home_position_4(uint CardNo, out int X0Home, out int X1Home, out int X2Home, out int X3Home);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_home_4_return_time">
            <summary>
             void n_set_home_4_return_time(uint CardNo, uint Time);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_get_home_4_return_time">
            <summary>
             uint n_get_home_4_return_time(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_home_position_xyz">
            <summary>
             void n_home_position_xyz(uint CardNo, int XHome, int YHome, int ZHome);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_home_position">
            <summary>
             void n_home_position(uint CardNo, int XHome, int YHome);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_uart_config">
            <summary>
             uint n_uart_config(uint CardNo, uint BaudRate);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_rs232_config">
            <summary>
             void n_rs232_config(uint CardNo, uint BaudRate);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_rs232_write_data">
            <summary>
             void n_rs232_write_data(uint CardNo, uint Data);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_rs232_write_text">
            <summary>
             void n_rs232_write_text(uint CardNo, string pData);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_rs232_read_data">
            <summary>
             uint n_rs232_read_data(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_mcbsp_freq">
            <summary>
             uint n_set_mcbsp_freq(uint CardNo, uint Freq);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_mcbsp_init">
            <summary>
             void n_mcbsp_init(uint CardNo, uint XDelay, uint RDelay);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_mcbsp_init_spi">
            <summary>
             void n_mcbsp_init_spi(uint CardNo, uint ClockLevel, uint ClockDelay);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_get_overrun">
            <summary>
             uint n_get_overrun(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_get_master_slave">
            <summary>
             uint n_get_master_slave(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_get_transform">
            <summary>
             void n_get_transform(uint CardNo, uint Number, int[] Ptr1, int[] Ptr2, uint[] Ptr, uint Code);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_get_transform_offset">
            <summary>
             void n_get_transform_offset(uint CardNo, uint Channel1, uint Channel2, uint Offset, uint Number, int[] Ptr1, int[] Ptr2, uint[] Ptr, uint Code);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_stop_trigger">
            <summary>
             void n_stop_trigger(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_move_to">
            <summary>
             void n_move_to(uint CardNo, uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_enduring_wobbel">
            <summary>
             void n_set_enduring_wobbel(uint CardNo, uint CenterX, uint CenterY, uint CenterZ, uint LimitHi, uint LimitLo, double ScaleX, double ScaleY, double ScaleZ);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_enduring_wobbel_2">
            <summary>
             void n_set_enduring_wobbel_2(uint CardNo, uint CenterX, uint CenterY, uint CenterZ, uint LimitHi, uint LimitLo, double ScaleX, double ScaleY, double ScaleZ);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_free_variable">
            <summary>
             void n_set_free_variable(uint CardNo, uint VarNo, uint Value);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_get_free_variable">
            <summary>
             uint n_get_free_variable(uint CardNo, uint VarNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_mcbsp_out_ptr">
            <summary>
             void n_set_mcbsp_out_ptr(uint CardNo, uint Number, uint[] SignalPtr);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_mcbsp_out_oie_ctrl">
            <summary>
             void n_set_mcbsp_out_oie_ctrl(uint CardNo, uint Signal1, uint Signal2);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_periodic_toggle">
            <summary>
             void n_periodic_toggle(uint CardNo, uint Port, uint Mask, uint P1, uint P2, uint Count, uint Start);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_multi_axis_config">
            <summary>
             void n_multi_axis_config(uint CardNo, uint Cfg, uint[] Ptr);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_quad_axis_init">
            <summary>
             void n_quad_axis_init(uint CardNo, uint Idle, double X1, double Y1);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_quad_axis_get_status">
            <summary>
             uint n_quad_axis_get_status(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_quad_axis_get_values">
            <summary>
             void n_quad_axis_get_values(uint CardNo, out double X1, out double Y1, out uint Flags0, out uint Flags1);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_get_temperature">
            <summary>
             double n_get_temperature(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.get_time">
            <summary>
             double get_time();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.get_lap_time">
            <summary>
             double get_lap_time();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.measurement_status">
            <summary>
             void measurement_status(out uint Busy, out uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.get_waveform_offset">
            <summary>
             void get_waveform_offset(uint Channel, uint Offset, uint Number, int[] Ptr);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.get_waveform">
            <summary>
             void get_waveform(uint Channel, uint Number, int[] Ptr);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.bounce_supp">
            <summary>
             void bounce_supp(uint Length);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.home_position_4">
            <summary>
             void home_position_4(int X0Home, int X1Home, int X2Home, int X3Home);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.get_home_position_4">
            <summary>
             void get_home_position_4(out int X0Home, out int X1Home, out int X2Home, out int X3Home);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_home_4_return_time">
            <summary>
             void set_home_4_return_time(uint Time);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.get_home_4_return_time">
            <summary>
             uint get_home_4_return_time();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.home_position_xyz">
            <summary>
             void home_position_xyz(int XHome, int YHome, int ZHome);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.home_position">
            <summary>
             void home_position(int XHome, int YHome);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.uart_config">
            <summary>
             uint uart_config(uint BaudRate);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.rs232_config">
            <summary>
             void rs232_config(uint BaudRate);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.rs232_write_data">
            <summary>
             void rs232_write_data(uint Data);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.rs232_write_text">
            <summary>
             void rs232_write_text(string pData);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.rs232_read_data">
            <summary>
             uint rs232_read_data();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_mcbsp_freq">
            <summary>
             uint set_mcbsp_freq(uint Freq);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.mcbsp_init">
            <summary>
             void mcbsp_init(uint XDelay, uint RDelay);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.mcbsp_init_spi">
            <summary>
             void mcbsp_init_spi(uint ClockLevel, uint ClockDelay);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.get_overrun">
            <summary>
             uint get_overrun();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.get_master_slave">
            <summary>
             uint get_master_slave();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.get_transform">
            <summary>
             void get_transform(uint Number, int[] Ptr1, int[] Ptr2, uint[] Ptr, uint Code);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.get_transform_offset">
            <summary>
             void get_transform_offset(uint Channel1, uint Channel2, uint Offset, uint Number, int[] Ptr1, int[] Ptr2, uint[] Ptr, uint Code);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.stop_trigger">
            <summary>
             void stop_trigger();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.move_to">
            <summary>
             void move_to(uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_enduring_wobbel">
            <summary>
             void set_enduring_wobbel(uint CenterX, uint CenterY, uint CenterZ, uint LimitHi, uint LimitLo, double ScaleX, double ScaleY, double ScaleZ);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_enduring_wobbel_2">
            <summary>
             void set_enduring_wobbel_2(uint CenterX, uint CenterY, uint CenterZ, uint LimitHi, uint LimitLo, double ScaleX, double ScaleY, double ScaleZ);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_free_variable">
            <summary>
             void set_free_variable(uint VarNo, uint Value);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.get_free_variable">
            <summary>
             uint get_free_variable(uint VarNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_mcbsp_out_ptr">
            <summary>
             void set_mcbsp_out_ptr(uint Number, uint[] SignalPtr);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_mcbsp_out_oie_ctrl">
            <summary>
             void set_mcbsp_out_oie_ctrl(uint Signal1, uint Signal2);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.periodic_toggle">
            <summary>
             void periodic_toggle(uint Port, uint Mask, uint P1, uint P2, uint Count, uint Start);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.multi_axis_config">
            <summary>
             void multi_axis_config(uint Cfg, uint[] Ptr);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.quad_axis_init">
            <summary>
             void quad_axis_init(uint Idle, double X1, double Y1);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.quad_axis_get_status">
            <summary>
             uint quad_axis_get_status();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.quad_axis_get_values">
            <summary>
             void quad_axis_get_values(out double X1, out double Y1, out uint Flags0, out uint Flags1);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.get_temperature">
            <summary>
             double get_temperature();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_defocus">
            <summary>
             void n_set_defocus(uint CardNo, int Shift);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_defocus_offset">
            <summary>
             void n_set_defocus_offset(uint CardNo, int Shift);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_goto_xyz">
            <summary>
             void n_goto_xyz(uint CardNo, int X, int Y, int Z);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_zoom">
            <summary>
             void n_set_zoom(uint CardNo, uint Zoom);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_goto_xy">
            <summary>
             void n_goto_xy(uint CardNo, int X, int Y);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_get_z_distance">
            <summary>
             int n_get_z_distance(uint CardNo, int X, int Y, int Z);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_defocus">
            <summary>
             void set_defocus(int Shift);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_defocus_offset">
            <summary>
             void set_defocus_offset(int Shift);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.goto_xyz">
            <summary>
             void goto_xyz(int X, int Y, int Z);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.goto_xy">
            <summary>
             void goto_xy(int X, int Y);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_zoom">
            <summary>
             void set_zoom(uint Zoom);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.get_z_distance">
            <summary>
             int get_z_distance(int X, int Y, int Z);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_offset_xyz">
            <summary>
             void n_set_offset_xyz(uint CardNo, uint HeadNo, int XOffset, int YOffset, int ZOffset, uint at_once);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_offset">
            <summary>
             void n_set_offset(uint CardNo, uint HeadNo, int XOffset, int YOffset, uint at_once);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_matrix">
            <summary>
             void n_set_matrix(uint CardNo, uint HeadNo, double M11, double M12, double M21, double M22, uint at_once);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_angle">
            <summary>
             void n_set_angle(uint CardNo, uint HeadNo, double Angle, uint at_once);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_scale">
            <summary>
             void n_set_scale(uint CardNo, uint HeadNo, double Scale, uint at_once);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_apply_mcbsp">
            <summary>
             void n_apply_mcbsp(uint CardNo, uint HeadNo, uint at_once);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_upload_transform">
            <summary>
             uint n_upload_transform(uint CardNo, uint HeadNo, uint[] Ptr);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_offset_xyz">
            <summary>
             void set_offset_xyz(uint HeadNo, int XOffset, int YOffset, int ZOffset, uint at_once);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_offset">
            <summary>
             void set_offset(uint HeadNo, int XOffset, int YOffset, uint at_once);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_matrix">
            <summary>
             void set_matrix(uint HeadNo, double M11, double M12, double M21, double M22, uint at_once);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_angle">
            <summary>
             void set_angle(uint HeadNo, double Angle, uint at_once);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_scale">
            <summary>
             void set_scale(uint HeadNo, double Scale, uint at_once);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.apply_mcbsp">
            <summary>
             void apply_mcbsp(uint HeadNo, uint at_once);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.upload_transform">
            <summary>
             uint upload_transform(uint HeadNo, uint[] Ptr);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_delay_mode">
            <summary>
             void n_set_delay_mode(uint CardNo, uint VarPoly, uint DirectMove3D, uint EdgeLevel, uint MinJumpDelay, uint JumpLengthLimit);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_jump_speed_ctrl">
            <summary>
             void n_set_jump_speed_ctrl(uint CardNo, double Speed);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_mark_speed_ctrl">
            <summary>
             void n_set_mark_speed_ctrl(uint CardNo, double Speed);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_sky_writing_para">
            <summary>
             void n_set_sky_writing_para(uint CardNo, double Timelag, int LaserOnShift, uint Nprev, uint Npost);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_sky_writing_limit">
            <summary>
             void n_set_sky_writing_limit(uint CardNo, double CosAngle);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_sky_writing_mode">
            <summary>
             void n_set_sky_writing_mode(uint CardNo, uint Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_load_varpolydelay">
            <summary>
             int n_load_varpolydelay(uint CardNo, string Name, uint No);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_hi">
            <summary>
             void n_set_hi(uint CardNo, uint HeadNo, double GalvoGainX, double GalvoGainY, int GalvoOffsetX, int GalvoOffsetY);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_get_hi_pos">
            <summary>
             void n_get_hi_pos(uint CardNo, uint HeadNo, out int X1, out int X2, out int Y1, out int Y2);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_auto_cal">
            <summary>
             uint n_auto_cal(uint CardNo, uint HeadNo, uint Command);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_get_auto_cal">
            <summary>
             uint n_get_auto_cal(uint CardNo, uint HeadNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_write_hi_pos">
            <summary>
             uint n_write_hi_pos(uint CardNo, uint HeadNo, int X1, int X2, int Y1, int Y2);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_timelag_compensation">
            <summary>
             void n_set_timelag_compensation(uint CardNo, uint HeadNo, uint TimeLagXY, uint TimeLagZ);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_sky_writing">
            <summary>
             void n_set_sky_writing(uint CardNo, double Timelag, int LaserOnShift);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_get_hi_data">
            <summary>
             void n_get_hi_data(uint CardNo, out int X1, out int X2, out int Y1, out int Y2);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_delay_mode">
            <summary>
             void set_delay_mode(uint VarPoly, uint DirectMove3D, uint EdgeLevel, uint MinJumpDelay, uint JumpLengthLimit);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_jump_speed_ctrl">
            <summary>
             void set_jump_speed_ctrl(double Speed);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_mark_speed_ctrl">
            <summary>
             void set_mark_speed_ctrl(double Speed);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_sky_writing_para">
            <summary>
             void set_sky_writing_para(double Timelag, int LaserOnShift, uint Nprev, uint Npost);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_sky_writing_limit">
            <summary>
             void set_sky_writing_limit(double CosAngle);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_sky_writing_mode">
            <summary>
             void set_sky_writing_mode(uint Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.load_varpolydelay">
            <summary>
             int load_varpolydelay(string Name, uint No);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_hi">
            <summary>
             void set_hi(uint HeadNo, double GalvoGainX, double GalvoGainY, int GalvoOffsetX, int GalvoOffsetY);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.get_hi_pos">
            <summary>
             void get_hi_pos(uint HeadNo, out int X1, out int X2, out int Y1, out int Y2);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.auto_cal">
            <summary>
             uint auto_cal(uint HeadNo, uint Command);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.get_auto_cal">
            <summary>
             uint get_auto_cal(uint HeadNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.write_hi_pos">
            <summary>
             uint write_hi_pos(uint HeadNo, int X1, int X2, int Y1, int Y2);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_timelag_compensation">
            <summary>
             void set_timelag_compensation(uint HeadNo, uint TimeLagXY, uint TimeLagZ);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_sky_writing">
            <summary>
             void set_sky_writing(double Timelag, int LaserOnShift);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.get_hi_data">
            <summary>
             void get_hi_data(out int X1, out int X2, out int Y1, out int Y2);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_send_user_data">
            <summary>
             void n_send_user_data(uint CardNo, uint Head, uint Axis, int Data0, int Data1, int Data2, int Data3, int Data4);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_read_user_data">
            <summary>
             int n_read_user_data(uint CardNo, uint Head, uint Axis, out int Data0, out int Data1, out int Data2, out int Data3, out int Data4);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_control_command">
            <summary>
             void n_control_command(uint CardNo, uint Head, uint Axis, uint Data);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_get_value">
            <summary>
             int n_get_value(uint CardNo, uint Signal);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_get_values">
            <summary>
             void n_get_values(uint CardNo, uint[] SignalPtr, int[] ResultPtr);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_get_galvo_controls">
            <summary>
             void n_get_galvo_controls(uint CardNo, int[] SignalPtr, int[] ResultPtr);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_get_head_status">
            <summary>
             uint n_get_head_status(uint CardNo, uint Head);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_jump_mode">
            <summary>
             int n_set_jump_mode(uint CardNo, int Flag, uint Length, int VA1, int VA2, int VB1, int VB2, int JA1, int JA2, int JB1, int JB2);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_load_jump_table_offset">
            <summary>
             int n_load_jump_table_offset(uint CardNo, string Name, uint No, uint PosAck, int Offset, uint MinDelay, uint MaxDelay, uint ListPos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_get_jump_table">
            <summary>
             uint n_get_jump_table(uint CardNo, ushort[] Ptr);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_jump_table">
            <summary>
             uint n_set_jump_table(uint CardNo, ushort[] Ptr);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_load_jump_table">
            <summary>
             int n_load_jump_table(uint CardNo, string Name, uint No, uint PosAck, uint MinDelay, uint MaxDelay, uint ListPos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.send_user_data">
            <summary>
             void send_user_data(uint Head, uint Axis, int Data0, int Data1, int Data2, int Data3, int Data4);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.read_user_data">
            <summary>
             int read_user_data(uint Head, uint Axis, out int Data0, out int Data1, out int Data2, out int Data3, out int Data4);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.control_command">
            <summary>
             void control_command(uint Head, uint Axis, uint Data);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.get_value">
            <summary>
             int get_value(uint Signal);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.get_values">
            <summary>
             void get_values(uint[] SignalPtr, int[] ResultPtr);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.get_galvo_controls">
            <summary>
             void get_galvo_controls(int[] SignalPtr, int[] ResultPtr);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.get_head_status">
            <summary>
             uint get_head_status(uint Head);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_jump_mode">
            <summary>
             int set_jump_mode(int Flag, uint Length, int VA1, int VA2, int VB1, int VB2, int JA1, int JA2, int JB1, int JB2);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.load_jump_table_offset">
            <summary>
             int load_jump_table_offset(string Name, uint No, uint PosAck, int Offset, uint MinDelay, uint MaxDelay, uint ListPos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.get_jump_table">
            <summary>
             uint get_jump_table(ushort[] Ptr);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_jump_table">
            <summary>
             uint set_jump_table(ushort[] Ptr);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.load_jump_table">
            <summary>
             int load_jump_table(string Name, uint No, uint PosAck, uint MinDelay, uint MaxDelay, uint ListPos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_get_scanahead_params">
            <summary>
             uint n_get_scanahead_params(uint CardNo, uint HeadNo, out uint PreViewTime, out uint Vmax, out double Amax);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_activate_scanahead_autodelays">
            <summary>
             int n_activate_scanahead_autodelays(uint CardNo, int Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_scanahead_laser_shifts">
            <summary>
             void n_set_scanahead_laser_shifts(uint CardNo, int dLasOn, int dLasOff);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_scanahead_line_params">
            <summary>
             void n_set_scanahead_line_params(uint CardNo, uint CornerScale, uint EndScale, uint AccScale);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_scanahead_line_params_ex">
            <summary>
             void n_set_scanahead_line_params_ex(uint CardNo, uint CornerScale, uint EndScale, uint AccScale, uint JumpScale);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_scanahead_params">
            <summary>
             uint n_set_scanahead_params(uint CardNo, uint Mode, uint HeadNo, uint TableNo, uint PreViewTime, uint Vmax, double Amax);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_scanahead_speed_control">
            <summary>
             void n_set_scanahead_speed_control(uint CardNo, uint Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.get_scanahead_params">
            <summary>
             uint get_scanahead_params(uint HeadNo, out uint PreViewTime, out uint Vmax, out double Amax);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.activate_scanahead_autodelays">
            <summary>
             int activate_scanahead_autodelays(int Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_scanahead_laser_shifts">
            <summary>
             void set_scanahead_laser_shifts(int dLasOn, int dLasOff);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_scanahead_line_params">
            <summary>
             void set_scanahead_line_params(uint CornerScale, uint EndScale, uint AccScale);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_scanahead_line_params_ex">
            <summary>
             void set_scanahead_line_params_ex(uint CornerScale, uint EndScale, uint AccScale, uint JumpScale);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_scanahead_params">
            <summary>
             uint set_scanahead_params(uint Mode, uint HeadNo, uint TableNo, uint PreViewTime, uint Vmax, double Amax);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_scanahead_speed_control">
            <summary>
             void set_scanahead_speed_control(uint Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_stepper_init">
            <summary>
             void n_stepper_init(uint CardNo, uint No, uint Period, int Dir, int Pos, uint Tol, uint Enable, uint WaitTime);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_stepper_enable">
            <summary>
             void n_stepper_enable(uint CardNo, int Enable1, int Enable2);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_stepper_disable_switch">
            <summary>
             void n_stepper_disable_switch(uint CardNo, int Disable1, int Disable2);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_stepper_control">
            <summary>
             void n_stepper_control(uint CardNo, int Period1, int Period2);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_stepper_abs_no">
            <summary>
             void n_stepper_abs_no(uint CardNo, uint No, int Pos, uint WaitTime);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_stepper_rel_no">
            <summary>
             void n_stepper_rel_no(uint CardNo, uint No, int dPos, uint WaitTime);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_stepper_abs">
            <summary>
             void n_stepper_abs(uint CardNo, int Pos1, int Pos2, uint WaitTime);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_stepper_rel">
            <summary>
             void n_stepper_rel(uint CardNo, int dPos1, int dPos2, uint WaitTime);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_get_stepper_status">
            <summary>
             void n_get_stepper_status(uint CardNo, out uint Status1, out int Pos1, out uint Status2, out int Pos2);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.stepper_init">
            <summary>
             void stepper_init(uint No, uint Period, int Dir, int Pos, uint Tol, uint Enable, uint WaitTime);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.stepper_enable">
            <summary>
             void stepper_enable(int Enable1, int Enable2);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.stepper_disable_switch">
            <summary>
             void stepper_disable_switch(int Disable1, int Disable2);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.stepper_control">
            <summary>
             void stepper_control(int Period1, int Period2);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.stepper_abs_no">
            <summary>
             void stepper_abs_no(uint No, int Pos, uint WaitTime);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.stepper_rel_no">
            <summary>
             void stepper_rel_no(uint No, int dPos, uint WaitTime);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.stepper_abs">
            <summary>
             void stepper_abs(int Pos1, int Pos2, uint WaitTime);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.stepper_rel">
            <summary>
             void stepper_rel(int dPos1, int dPos2, uint WaitTime);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.get_stepper_status">
            <summary>
             void get_stepper_status(out uint Status1, out int Pos1, out uint Status2, out int Pos2);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_select_cor_table_list">
            <summary>
             void n_select_cor_table_list(uint CardNo, uint HeadA, uint HeadB);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.select_cor_table_list">
            <summary>
             void select_cor_table_list(uint HeadA, uint HeadB);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_list_nop">
            <summary>
             void n_list_nop(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_list_continue">
            <summary>
             void n_list_continue(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_list_next">
            <summary>
             void n_list_next(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_long_delay">
            <summary>
             void n_long_delay(uint CardNo, uint Delay);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_end_of_list">
            <summary>
             void n_set_end_of_list(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_wait">
            <summary>
             void n_set_wait(uint CardNo, uint WaitWord);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_list_jump_pos">
            <summary>
             void n_list_jump_pos(uint CardNo, uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_list_jump_rel">
            <summary>
             void n_list_jump_rel(uint CardNo, int Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_list_repeat">
            <summary>
             void n_list_repeat(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_list_until">
            <summary>
             void n_list_until(uint CardNo, uint Number);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_range_checking">
            <summary>
             void n_range_checking(uint CardNo, uint HeadNo, uint Mode, uint Data);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_store_timestamp_counter_list">
            <summary>
             void n_store_timestamp_counter_list(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_wait_for_timestamp_counter">
            <summary>
             void n_wait_for_timestamp_counter(uint CardNo, uint TimeStampCounter);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_wait_for_timestamp_counter_mode">
            <summary>
             void n_wait_for_timestamp_counter_mode(uint CardNo, uint TimeStampCounter, uint Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_list_jump">
            <summary>
             void n_set_list_jump(uint CardNo, uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_wait_for_timestamp_counter_long">
            <summary>
             void n_wait_for_timestamp_counter_long(uint CardNo, uint WaitCounterL, uint WaitCounterH, uint MaxWaitTime, uint Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.list_nop">
            <summary>
             void list_nop();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.list_continue">
            <summary>
             void list_continue();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.list_next">
            <summary>
             void list_next();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.long_delay">
            <summary>
             void long_delay(uint Delay);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_end_of_list">
            <summary>
             void set_end_of_list();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_wait">
            <summary>
             void set_wait(uint WaitWord);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.list_jump_pos">
            <summary>
             void list_jump_pos(uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.list_jump_rel">
            <summary>
             void list_jump_rel(int Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.list_repeat">
            <summary>
             void list_repeat();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.list_until">
            <summary>
             void list_until(uint Number);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.range_checking">
            <summary>
             void range_checking(uint HeadNo, uint Mode, uint Data);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.store_timestamp_counter_list">
            <summary>
             void store_timestamp_counter_list();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.wait_for_timestamp_counter">
            <summary>
             void wait_for_timestamp_counter(uint TimeStampCounter);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.wait_for_timestamp_counter_mode">
            <summary>
             void wait_for_timestamp_counter_mode(uint TimeStampCounter, uint Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.wait_for_timestamp_counter_long">
            <summary>
             void wait_for_timestamp_counter_long(uint WaitCounterL, uint WaitCounterH, uint MaxWaitTime, uint Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_list_jump">
            <summary>
             void set_list_jump(uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_extstartpos_list">
            <summary>
             void n_set_extstartpos_list(uint CardNo, uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_control_mode_list">
            <summary>
             void n_set_control_mode_list(uint CardNo, uint Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_simulate_ext_start">
            <summary>
             void n_simulate_ext_start(uint CardNo, int Delay, uint EncoderNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_extstartpos_list">
            <summary>
             void set_extstartpos_list(uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_control_mode_list">
            <summary>
             void set_control_mode_list(uint Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.simulate_ext_start">
            <summary>
             void simulate_ext_start(int Delay, uint EncoderNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_list_return">
            <summary>
             void n_list_return(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_list_call_repeat">
            <summary>
             void n_list_call_repeat(uint CardNo, uint Pos, uint Number);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_list_call_abs_repeat">
            <summary>
             void n_list_call_abs_repeat(uint CardNo, uint Pos, uint Number);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_list_call">
            <summary>
             void n_list_call(uint CardNo, uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_list_call_abs">
            <summary>
             void n_list_call_abs(uint CardNo, uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_sub_call_repeat">
            <summary>
             void n_sub_call_repeat(uint CardNo, uint Index, uint Number);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_sub_call_abs_repeat">
            <summary>
             void n_sub_call_abs_repeat(uint CardNo, uint Index, uint Number);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_sub_call">
            <summary>
             void n_sub_call(uint CardNo, uint Index);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_sub_call_abs">
            <summary>
             void n_sub_call_abs(uint CardNo, uint Index);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.list_return">
            <summary>
             void list_return();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.list_call_repeat">
            <summary>
             void list_call_repeat(uint Pos, uint Number);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.list_call_abs_repeat">
            <summary>
             void list_call_abs_repeat(uint Pos, uint Number);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.list_call">
            <summary>
             void list_call(uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.list_call_abs">
            <summary>
             void list_call_abs(uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.sub_call_repeat">
            <summary>
             void sub_call_repeat(uint Index, uint Number);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.sub_call_abs_repeat">
            <summary>
             void sub_call_abs_repeat(uint Index, uint Number);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.sub_call">
            <summary>
             void sub_call(uint Index);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.sub_call_abs">
            <summary>
             void sub_call_abs(uint Index);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_list_call_cond">
            <summary>
             void n_list_call_cond(uint CardNo, uint Mask1, uint Mask0, uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_list_call_abs_cond">
            <summary>
             void n_list_call_abs_cond(uint CardNo, uint Mask1, uint Mask0, uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_sub_call_cond">
            <summary>
             void n_sub_call_cond(uint CardNo, uint Mask1, uint Mask0, uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_sub_call_abs_cond">
            <summary>
             void n_sub_call_abs_cond(uint CardNo, uint Mask1, uint Mask0, uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_list_jump_pos_cond">
            <summary>
             void n_list_jump_pos_cond(uint CardNo, uint Mask1, uint Mask0, uint Index);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_list_jump_rel_cond">
            <summary>
             void n_list_jump_rel_cond(uint CardNo, uint Mask1, uint Mask0, int Index);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_if_cond">
            <summary>
             void n_if_cond(uint CardNo, uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_if_not_cond">
            <summary>
             void n_if_not_cond(uint CardNo, uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_if_pin_cond">
            <summary>
             void n_if_pin_cond(uint CardNo, uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_if_not_pin_cond">
            <summary>
             void n_if_not_pin_cond(uint CardNo, uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_switch_ioport">
            <summary>
             void n_switch_ioport(uint CardNo, uint MaskBits, uint ShiftBits);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_list_jump_cond">
            <summary>
             void n_list_jump_cond(uint CardNo, uint Mask1, uint Mask0, uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.list_call_cond">
            <summary>
             void list_call_cond(uint Mask1, uint Mask0, uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.list_call_abs_cond">
            <summary>
             void list_call_abs_cond(uint Mask1, uint Mask0, uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.sub_call_cond">
            <summary>
             void sub_call_cond(uint Mask1, uint Mask0, uint Index);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.sub_call_abs_cond">
            <summary>
             void sub_call_abs_cond(uint Mask1, uint Mask0, uint Index);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.list_jump_pos_cond">
            <summary>
             void list_jump_pos_cond(uint Mask1, uint Mask0, uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.list_jump_rel_cond">
            <summary>
             void list_jump_rel_cond(uint Mask1, uint Mask0, int Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.if_cond">
            <summary>
             void if_cond(uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.if_not_cond">
            <summary>
             void if_not_cond(uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.if_pin_cond">
            <summary>
             void if_pin_cond(uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.if_not_pin_cond">
            <summary>
             void if_not_pin_cond(uint Mask1, uint Mask0);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.switch_ioport">
            <summary>
             void switch_ioport(uint MaskBits, uint ShiftBits);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.list_jump_cond">
            <summary>
             void list_jump_cond(uint Mask1, uint Mask0, uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_select_char_set">
            <summary>
             void n_select_char_set(uint CardNo, uint No);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_mark_text">
            <summary>
             void n_mark_text(uint CardNo, string Text);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_mark_text_abs">
            <summary>
             void n_mark_text_abs(uint CardNo, string Text);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_mark_char">
            <summary>
             void n_mark_char(uint CardNo, uint Char);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_mark_char_abs">
            <summary>
             void n_mark_char_abs(uint CardNo, uint Char);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.select_char_set">
            <summary>
             void select_char_set(uint No);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.mark_text">
            <summary>
             void mark_text(string Text);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.mark_text_abs">
            <summary>
             void mark_text_abs(string Text);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.mark_char">
            <summary>
             void mark_char(uint Char);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.mark_char_abs">
            <summary>
             void mark_char_abs(uint Char);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_mark_serial">
            <summary>
             void n_mark_serial(uint CardNo, uint Mode, uint Digits);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_mark_serial_abs">
            <summary>
             void n_mark_serial_abs(uint CardNo, uint Mode, uint Digits);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_mark_date">
            <summary>
             void n_mark_date(uint CardNo, uint Part, uint Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_mark_date_abs">
            <summary>
             void n_mark_date_abs(uint CardNo, uint Part, uint Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_mark_time">
            <summary>
             void n_mark_time(uint CardNo, uint Part, uint Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_mark_time_abs">
            <summary>
             void n_mark_time_abs(uint CardNo, uint Part, uint Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_select_serial_set_list">
            <summary>
             void n_select_serial_set_list(uint CardNo, uint No);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_serial_step_list">
            <summary>
             void n_set_serial_step_list(uint CardNo, uint No, uint Step);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_time_fix_f_off">
            <summary>
             void n_time_fix_f_off(uint CardNo, uint FirstDay, uint Offset);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_time_fix_f">
            <summary>
             void n_time_fix_f(uint CardNo, uint FirstDay);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_time_fix">
            <summary>
             void n_time_fix(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.mark_serial">
            <summary>
             void mark_serial(uint Mode, uint Digits);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.mark_serial_abs">
            <summary>
             void mark_serial_abs(uint Mode, uint Digits);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.mark_date">
            <summary>
             void mark_date(uint Part, uint Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.mark_date_abs">
            <summary>
             void mark_date_abs(uint Part, uint Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.mark_time">
            <summary>
             void mark_time(uint Part, uint Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.mark_time_abs">
            <summary>
             void mark_time_abs(uint Part, uint Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.time_fix_f_off">
            <summary>
             void time_fix_f_off(uint FirstDay, uint Offset);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.select_serial_set_list">
            <summary>
             void select_serial_set_list(uint No);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_serial_step_list">
            <summary>
             void set_serial_step_list(uint No, uint Step);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.time_fix_f">
            <summary>
             void time_fix_f(uint FirstDay);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.time_fix">
            <summary>
             void time_fix();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_clear_io_cond_list">
            <summary>
             void n_clear_io_cond_list(uint CardNo, uint Mask1, uint Mask0, uint MaskClear);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_io_cond_list">
            <summary>
             void n_set_io_cond_list(uint CardNo, uint Mask1, uint Mask0, uint MaskSet);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_write_io_port_mask_list">
            <summary>
             void n_write_io_port_mask_list(uint CardNo, uint Value, uint Mask);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_write_8bit_port_list">
            <summary>
             void n_write_8bit_port_list(uint CardNo, uint Value);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_read_io_port_list">
            <summary>
             void n_read_io_port_list(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_write_da_x_list">
            <summary>
             void n_write_da_x_list(uint CardNo, uint x, uint Value);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_write_io_port_list">
            <summary>
             void n_write_io_port_list(uint CardNo, uint Value);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_write_da_1_list">
            <summary>
             void n_write_da_1_list(uint CardNo, uint Value);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_write_da_2_list">
            <summary>
             void n_write_da_2_list(uint CardNo, uint Value);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_write_port_list">
            <summary>
             void n_write_port_list(uint CardNo, uint Port, uint Value, uint NoDelay);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.clear_io_cond_list">
            <summary>
             void clear_io_cond_list(uint Mask1, uint Mask0, uint MaskClear);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_io_cond_list">
            <summary>
             void set_io_cond_list(uint Mask1, uint Mask0, uint MaskSet);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.write_io_port_mask_list">
            <summary>
             void write_io_port_mask_list(uint Value, uint Mask);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.write_8bit_port_list">
            <summary>
             void write_8bit_port_list(uint Value);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.read_io_port_list">
            <summary>
             void read_io_port_list();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.write_da_x_list">
            <summary>
             void write_da_x_list(uint x, uint Value);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.write_io_port_list">
            <summary>
             void write_io_port_list(uint Value);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.write_da_1_list">
            <summary>
             void write_da_1_list(uint Value);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.write_da_2_list">
            <summary>
             void write_da_2_list(uint Value);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.write_port_list">
            <summary>
             void write_port_list(uint Port, uint Value, uint NoDelay);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_laser_signal_on_list">
            <summary>
             void n_laser_signal_on_list(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_laser_signal_off_list">
            <summary>
             void n_laser_signal_off_list(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_para_laser_on_pulses_list">
            <summary>
             void n_para_laser_on_pulses_list(uint CardNo, uint Period, uint Pulses, uint P);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_laser_on_pulses_list">
            <summary>
             void n_laser_on_pulses_list(uint CardNo, uint Period, uint Pulses);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_laser_on_list">
            <summary>
             void n_laser_on_list(uint CardNo, uint Period);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_laser_delays">
            <summary>
             void n_set_laser_delays(uint CardNo, int LaserOnDelay, uint LaserOffDelay);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_standby_list">
            <summary>
             void n_set_standby_list(uint CardNo, uint HalfPeriod, uint PulseLength);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_laser_pulses">
            <summary>
             void n_set_laser_pulses(uint CardNo, uint HalfPeriod, uint PulseLength);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_firstpulse_killer_list">
            <summary>
             void n_set_firstpulse_killer_list(uint CardNo, uint Length);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_qswitch_delay_list">
            <summary>
             void n_set_qswitch_delay_list(uint CardNo, uint Delay);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_laser_pin_out_list">
            <summary>
             void n_set_laser_pin_out_list(uint CardNo, uint Pins);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_vector_control">
            <summary>
             void n_set_vector_control(uint CardNo, uint Ctrl, uint Value);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_default_pixel_list">
            <summary>
             void n_set_default_pixel_list(uint CardNo, uint PulseLength);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_auto_laser_params_list">
            <summary>
             void n_set_auto_laser_params_list(uint CardNo, uint Ctrl, uint Value, uint MinValue, uint MaxValue);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_pulse_picking_list">
            <summary>
             void n_set_pulse_picking_list(uint CardNo, uint No);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_softstart_level_list">
            <summary>
             void n_set_softstart_level_list(uint CardNo, uint Index, uint Level1, uint Level2, uint Level3);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_softstart_mode_list">
            <summary>
             void n_set_softstart_mode_list(uint CardNo, uint Mode, uint Number, uint Delay);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_config_laser_signals_list">
            <summary>
             void n_config_laser_signals_list(uint CardNo, uint Config);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_laser_power">
            <summary>
             void n_set_laser_power(uint CardNo, uint Port, uint Value);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_port_default_list">
            <summary>
             void n_set_port_default_list(uint CardNo, uint Port, uint Value);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_spot_distance">
            <summary>
             void n_spot_distance(uint CardNo, double Dist);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_laser_timing">
            <summary>
             void n_set_laser_timing(uint CardNo, uint HalfPeriod, uint PulseLength1, uint PulseLength2, uint TimeBase);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.laser_signal_on_list">
            <summary>
             void laser_signal_on_list();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.laser_signal_off_list">
            <summary>
             void laser_signal_off_list();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.para_laser_on_pulses_list">
            <summary>
             void para_laser_on_pulses_list(uint Period, uint Pulses, uint P);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.laser_on_pulses_list">
            <summary>
             void laser_on_pulses_list(uint Period, uint Pulses);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.laser_on_list">
            <summary>
             void laser_on_list(uint Period);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_laser_delays">
            <summary>
             void set_laser_delays(int LaserOnDelay, uint LaserOffDelay);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_standby_list">
            <summary>
             void set_standby_list(uint HalfPeriod, uint PulseLength);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_laser_pulses">
            <summary>
             void set_laser_pulses(uint HalfPeriod, uint PulseLength);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_firstpulse_killer_list">
            <summary>
             void set_firstpulse_killer_list(uint Length);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_qswitch_delay_list">
            <summary>
             void set_qswitch_delay_list(uint Delay);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_laser_pin_out_list">
            <summary>
             void set_laser_pin_out_list(uint Pins);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_vector_control">
            <summary>
             void set_vector_control(uint Ctrl, uint Value);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_default_pixel_list">
            <summary>
             void set_default_pixel_list(uint PulseLength);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_auto_laser_params_list">
            <summary>
             void set_auto_laser_params_list(uint Ctrl, uint Value, uint MinValue, uint MaxValue);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_pulse_picking_list">
            <summary>
             void set_pulse_picking_list(uint No);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_softstart_level_list">
            <summary>
             void set_softstart_level_list(uint Index, uint Level1, uint Level2, uint Level3);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_softstart_mode_list">
            <summary>
             void set_softstart_mode_list(uint Mode, uint Number, uint Delay);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.config_laser_signals_list">
            <summary>
             void config_laser_signals_list(uint Config);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_laser_power">
            <summary>
             void set_laser_power(uint Port, uint Value);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_port_default_list">
            <summary>
             void set_port_default_list(uint Port, uint Value);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.spot_distance">
            <summary>
             void spot_distance(double Dist);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_laser_timing">
            <summary>
             void set_laser_timing(uint HalfPeriod, uint PulseLength1, uint PulseLength2, uint TimeBase);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_fly_return_z">
            <summary>
             void n_fly_return_z(uint CardNo, int X, int Y, int Z);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_fly_return">
            <summary>
             void n_fly_return(uint CardNo, int X, int Y);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_rot_center_list">
            <summary>
             void n_set_rot_center_list(uint CardNo, int X, int Y);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_ext_start_delay_list">
            <summary>
             void n_set_ext_start_delay_list(uint CardNo, int Delay, uint EncoderNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_fly_x">
            <summary>
             void n_set_fly_x(uint CardNo, double ScaleX);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_fly_y">
            <summary>
             void n_set_fly_y(uint CardNo, double ScaleY);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_fly_z">
            <summary>
             void n_set_fly_z(uint CardNo, double ScaleZ, uint EndoderNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_fly_rot">
            <summary>
             void n_set_fly_rot(uint CardNo, double Resolution);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_fly_2d">
            <summary>
             void n_set_fly_2d(uint CardNo, double ScaleX, double ScaleY);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_fly_x_pos">
            <summary>
             void n_set_fly_x_pos(uint CardNo, double ScaleX);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_fly_y_pos">
            <summary>
             void n_set_fly_y_pos(uint CardNo, double ScaleY);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_fly_rot_pos">
            <summary>
             void n_set_fly_rot_pos(uint CardNo, double Resolution);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_fly_limits">
            <summary>
             void n_set_fly_limits(uint CardNo, int Xmin, int Xmax, int Ymin, int Ymax);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_fly_limits_z">
            <summary>
             void n_set_fly_limits_z(uint CardNo, int Zmin, int Zmax);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_if_fly_x_overflow">
            <summary>
             void n_if_fly_x_overflow(uint CardNo, int Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_if_fly_y_overflow">
            <summary>
             void n_if_fly_y_overflow(uint CardNo, int Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_if_fly_z_overflow">
            <summary>
             void n_if_fly_z_overflow(uint CardNo, int Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_if_not_fly_x_overflow">
            <summary>
             void n_if_not_fly_x_overflow(uint CardNo, int Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_if_not_fly_y_overflow">
            <summary>
             void n_if_not_fly_y_overflow(uint CardNo, int Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_if_not_fly_z_overflow">
            <summary>
             void n_if_not_fly_z_overflow(uint CardNo, int Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_clear_fly_overflow">
            <summary>
             void n_clear_fly_overflow(uint CardNo, uint Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_mcbsp_x_list">
            <summary>
             void n_set_mcbsp_x_list(uint CardNo, double ScaleX);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_mcbsp_y_list">
            <summary>
             void n_set_mcbsp_y_list(uint CardNo, double ScaleY);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_mcbsp_rot_list">
            <summary>
             void n_set_mcbsp_rot_list(uint CardNo, double Resolution);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_mcbsp_matrix_list">
            <summary>
             void n_set_mcbsp_matrix_list(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_mcbsp_global_x_list">
            <summary>
             void n_set_mcbsp_global_x_list(uint CardNo, double ScaleX);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_mcbsp_global_y_list">
            <summary>
             void n_set_mcbsp_global_y_list(uint CardNo, double ScaleY);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_mcbsp_global_rot_list">
            <summary>
             void n_set_mcbsp_global_rot_list(uint CardNo, double Resolution);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_mcbsp_global_matrix_list">
            <summary>
             void n_set_mcbsp_global_matrix_list(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_mcbsp_in_list">
            <summary>
             void n_set_mcbsp_in_list(uint CardNo, uint Mode, double Scale);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_multi_mcbsp_in_list">
            <summary>
             void n_set_multi_mcbsp_in_list(uint CardNo, uint Ctrl, uint P, uint Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_wait_for_encoder_mode">
            <summary>
             void n_wait_for_encoder_mode(uint CardNo, int Value, uint EncoderNo, int Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_wait_for_mcbsp">
            <summary>
             void n_wait_for_mcbsp(uint CardNo, uint Axis, int Value, int Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_encoder_speed">
            <summary>
             void n_set_encoder_speed(uint CardNo, uint EncoderNo, double Speed, double Smooth);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_get_mcbsp_list">
            <summary>
             void n_get_mcbsp_list(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_store_encoder">
            <summary>
             void n_store_encoder(uint CardNo, uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_wait_for_encoder_in_range_mode">
            <summary>
             void n_wait_for_encoder_in_range_mode(uint CardNo, int EncXmin, int EncXmax, int EncYmin, int EncYmax, uint Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_wait_for_encoder_in_range">
            <summary>
             void n_wait_for_encoder_in_range(uint CardNo, int EncXmin, int EncXmax, int EncYmin, int EncYmax);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_activate_fly_xy">
            <summary>
             void n_activate_fly_xy(uint CardNo, double ScaleX, double ScaleY);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_activate_fly_2d">
            <summary>
             void n_activate_fly_2d(uint CardNo, double ScaleX, double ScaleY);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_activate_fly_xy_encoder">
            <summary>
             void n_activate_fly_xy_encoder(uint CardNo, double ScaleX, double ScaleY, int EncX, int EncY);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_activate_fly_2d_encoder">
            <summary>
             void n_activate_fly_2d_encoder(uint CardNo, double ScaleX, double ScaleY, int EncX, int EncY);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_if_not_activated">
            <summary>
             void n_if_not_activated(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_park_position">
            <summary>
             void n_park_position(uint CardNo, uint Mode, int X, int Y);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_park_return">
            <summary>
             void n_park_return(uint CardNo, uint Mode, int X, int Y);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_fly_prediction">
            <summary>
             void n_fly_prediction(uint CardNo, uint PredictionX, uint PredictionY);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_fly_1_axis">
            <summary>
             void n_set_fly_1_axis(uint CardNo, uint Axis, uint Mode, double Scale);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_fly_return_1_axis">
            <summary>
             void n_fly_return_1_axis(uint CardNo, uint Axis, int RetPos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_wait_for_1_axis">
            <summary>
             void n_wait_for_1_axis(uint CardNo, int Value, uint EncoderMode, int WaitMode, uint LaserMode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_activate_fly_1_axis">
            <summary>
             void n_activate_fly_1_axis(uint CardNo, uint Axis, uint Mode, double Scale, int Offset);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_park_position_1_axis">
            <summary>
             void n_park_position_1_axis(uint CardNo, uint Mode, uint Axis, int ParkPos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_park_return_1_axis">
            <summary>
             void n_park_return_1_axis(uint CardNo, uint Mode, uint Axis, int RetPos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_fly_2_axes">
            <summary>
             void n_set_fly_2_axes(uint CardNo, uint Axis1, uint Mode1, double Scale1, uint Axis2, uint Mode2, double Scale2);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_fly_return_2_axes">
            <summary>
             void n_fly_return_2_axes(uint CardNo, uint Axis1, int RetPos1, uint Axis2, int RetPos2);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_wait_for_2_axes">
            <summary>
             void n_wait_for_2_axes(uint CardNo, uint EncoderModeX, int MinValueX, int MaxValueX, uint EncoderModeY, int MinValueY, int MaxValueY, int WaitMode, uint LaserMode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_activate_fly_2_axes">
            <summary>
             void n_activate_fly_2_axes(uint CardNo, uint ModeX, double ScaleX, int OffsetX, uint ModeY, double ScaleY, int OffsetY);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_park_position_2_axes">
            <summary>
             void n_park_position_2_axes(uint CardNo, uint Mode, int ParkPosX, int ParkPosY);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_park_return_2_axes">
            <summary>
             void n_park_return_2_axes(uint CardNo, uint Mode, int RetPosX, int RetkPosY);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_fly_3_axes">
            <summary>
             void n_set_fly_3_axes(uint CardNo, uint ModeX, double ScaleX, uint ModeY, double ScaleY, uint ModeZ, double ScaleZ);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_fly_return_3_axes">
            <summary>
             void n_fly_return_3_axes(uint CardNo, int RetPosX, int RetPosY, int RetPosZ);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_init_fly_2d_list">
            <summary>
             void n_init_fly_2d_list(uint CardNo, int OffsetX, int OffsetY, uint No);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_wait_for_encoder">
            <summary>
             void n_wait_for_encoder(uint CardNo, int Value, uint EncoderNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.fly_return_z">
            <summary>
             void fly_return_z(int X, int Y, int Z);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.fly_return">
            <summary>
             void fly_return(int X, int Y);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_rot_center_list">
            <summary>
             void set_rot_center_list(int X, int Y);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_ext_start_delay_list">
            <summary>
             void set_ext_start_delay_list(int Delay, uint EncoderNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_fly_x">
            <summary>
             void set_fly_x(double ScaleX);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_fly_y">
            <summary>
             void set_fly_y(double ScaleY);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_fly_z">
            <summary>
             void set_fly_z(double ScaleZ, uint EncoderNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_fly_rot">
            <summary>
             void set_fly_rot(double Resolution);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_fly_2d">
            <summary>
             void set_fly_2d(double ScaleX, double ScaleY);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_fly_x_pos">
            <summary>
             void set_fly_x_pos(double ScaleX);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_fly_y_pos">
            <summary>
             void set_fly_y_pos(double ScaleY);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_fly_rot_pos">
            <summary>
             void set_fly_rot_pos(double Resolution);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_fly_limits">
            <summary>
             void set_fly_limits(int Xmin, int Xmax, int Ymin, int Ymax);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_fly_limits_z">
            <summary>
             void set_fly_limits_z(int Zmin, int Zmax);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.if_fly_x_overflow">
            <summary>
             void if_fly_x_overflow(int Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.if_fly_y_overflow">
            <summary>
             void if_fly_y_overflow(int Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.if_fly_z_overflow">
            <summary>
             void if_fly_z_overflow(int Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.if_not_fly_x_overflow">
            <summary>
             void if_not_fly_x_overflow(int Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.if_not_fly_y_overflow">
            <summary>
             void if_not_fly_y_overflow(int Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.if_not_fly_z_overflow">
            <summary>
             void if_not_fly_z_overflow(int Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.clear_fly_overflow">
            <summary>
             void clear_fly_overflow(uint Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_mcbsp_x_list">
            <summary>
             void set_mcbsp_x_list(double ScaleX);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_mcbsp_y_list">
            <summary>
             void set_mcbsp_y_list(double ScaleY);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_mcbsp_rot_list">
            <summary>
             void set_mcbsp_rot_list(double Resolution);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_mcbsp_matrix_list">
            <summary>
             void set_mcbsp_matrix_list();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_mcbsp_global_x_list">
            <summary>
             void set_mcbsp_global_x_list(double ScaleX);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_mcbsp_global_y_list">
            <summary>
             void set_mcbsp_global_y_list(double ScaleY);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_mcbsp_global_rot_list">
            <summary>
             void set_mcbsp_global_rot_list(double Resolution);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_mcbsp_global_matrix_list">
            <summary>
             void set_mcbsp_global_matrix_list();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_mcbsp_in_list">
            <summary>
             void set_mcbsp_in_list(uint Mode, double Scale);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_multi_mcbsp_in_list">
            <summary>
             void set_multi_mcbsp_in_list(uint Ctrl, uint P, uint Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.wait_for_encoder_mode">
            <summary>
             void wait_for_encoder_mode(int Value, uint EncoderNo, int Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.wait_for_mcbsp">
            <summary>
             void wait_for_mcbsp(uint Axis, int Value, int Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_encoder_speed">
            <summary>
             void set_encoder_speed(uint EncoderNo, double Speed, double Smooth);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.get_mcbsp_list">
            <summary>
             void get_mcbsp_list();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.store_encoder">
            <summary>
             void store_encoder(uint Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.wait_for_encoder_in_range_mode">
            <summary>
             void wait_for_encoder_in_range_mode(int EncXmin, int EncXmax, int EncYmin, int EncYmax, uint Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.wait_for_encoder_in_range">
            <summary>
             void wait_for_encoder_in_range(int EncXmin, int EncXmax, int EncYmin, int EncYmax);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.activate_fly_xy">
            <summary>
             void activate_fly_xy(double ScaleX, double ScaleY);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.activate_fly_2d">
            <summary>
             void activate_fly_2d(double ScaleX, double ScaleY);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.activate_fly_xy_encoder">
            <summary>
             void activate_fly_xy_encoder(double ScaleX, double ScaleY, int EncX, int EncY);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.activate_fly_2d_encoder">
            <summary>
             void activate_fly_2d_encoder(double ScaleX, double ScaleY, int EncX, int EncY);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.if_not_activated">
            <summary>
             void if_not_activated();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.park_position">
            <summary>
             void park_position(uint Mode, int X, int Y);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.park_return">
            <summary>
             void park_return(uint Mode, int X, int Y);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.fly_prediction">
            <summary>
             void fly_prediction(uint PredictionX, uint PredictionY);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_fly_1_axis">
            <summary>
             void set_fly_1_axis(uint Axis, uint Mode, double Scale);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.fly_return_1_axis">
            <summary>
             void fly_return_1_axis(uint Axis, int RetPos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.wait_for_1_axis">
            <summary>
             void wait_for_1_axis(int Value, uint EncoderMode, int WaitMode, uint LaserMode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.activate_fly_1_axis">
            <summary>
             void activate_fly_1_axis(uint Axis, uint Mode, double Scale, int Offset);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.park_position_1_axis">
            <summary>
             void park_position_1_axis(uint Mode, uint Axis, int ParkPos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.park_return_1_axis">
            <summary>
             void park_return_1_axis(uint Mode, uint Axis, int RetPos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_fly_2_axes">
            <summary>
             void set_fly_2_axes(uint Axis1, uint Mode1, double Scale1, uint Axis2, uint Mode2, double Scale2);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.fly_return_2_axes">
            <summary>
             void fly_return_2_axes(uint Axis1, int RetPos1, uint Axis2, int RetPos2);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.wait_for_2_axes">
            <summary>
             void wait_for_2_axes(uint EncoderModeX, int MinValueX, int MaxValueX, uint EncoderModeY, int MinValueY, int MaxValueY, int WaitMode, uint LaserMode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.activate_fly_2_axes">
            <summary>
             void activate_fly_2_axes(uint ModeX, double ScaleX, int OffsetX, uint ModeY, double ScaleY, int OffsetY);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.park_position_2_axes">
            <summary>
             void park_position_2_axes(uint Mode, int ParkPosX, int ParkPosY);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.park_return_2_axes">
            <summary>
             void park_return_2_axes(uint Mode, int RetPosX, int RetPosY);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_fly_3_axes">
            <summary>
             void set_fly_3_axes(uint ModeX, double ScaleX, uint ModeY, double ScaleY, uint ModeZ, double ScaleZ);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.fly_return_3_axes">
            <summary>
             void fly_return_3_axes(int RetPosX, int RetPosY, int RetPosZ);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.init_fly_2d_list">
            <summary>
             void init_fly_2d_list(int OffsetX, int OffsetY, uint No);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.wait_for_encoder">
            <summary>
             void wait_for_encoder(int Value, uint EncoderNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_save_and_restart_timer">
            <summary>
             void n_save_and_restart_timer(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_wobbel_mode_phase">
            <summary>
             void n_set_wobbel_mode_phase(uint CardNo, uint Transversal, uint Longitudinal, double Freq, int Mode, double Phase);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_wobbel_mode">
            <summary>
             void n_set_wobbel_mode(uint CardNo, uint Transversal, uint Longitudinal, double Freq, int Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_wobbel">
            <summary>
             void n_set_wobbel(uint CardNo, uint Transversal, uint Longitudinal, double Freq);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_wobbel_direction">
            <summary>
             void n_set_wobbel_direction(uint CardNo, int dX, int dY);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_wobbel_control">
            <summary>
             void n_set_wobbel_control(uint CardNo, uint Ctrl, uint Value, uint MinValue, uint MaxValue);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_wobbel_vector">
            <summary>
             void n_set_wobbel_vector(uint CardNo, double dTrans, double dLong, uint Period, double dPower);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_wobbel_vector_2">
            <summary>
             void n_set_wobbel_vector_2(uint CardNo, double dTrans, double dLong, uint Period, double dPower, double dPower2, uint Ctrl);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_wobbel_offset">
            <summary>
             void n_set_wobbel_offset(uint CardNo, int OffsetTrans, int OffsetLong);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_trigger">
            <summary>
             void n_set_trigger(uint CardNo, uint Period, uint Signal1, uint Signal2);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_trigger4">
            <summary>
             void n_set_trigger4(uint CardNo, uint Period, uint Signal1, uint Signal2, uint Signal3, uint Signal4);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_trigger8">
            <summary>
             void n_set_trigger8(uint CardNo, uint Period, uint Signal1, uint Signal2, uint Signal3, uint Signal4, uint Signal5, uint Signal6, uint Signal7, uint Signal8);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_pixel_line_3d">
            <summary>
             void n_set_pixel_line_3d(uint CardNo, uint Channel, uint HalfPeriod, double dX, double dY, double dZ);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_pixel_line">
            <summary>
             void n_set_pixel_line(uint CardNo, uint Channel, uint HalfPeriod, double dX, double dY);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_n_pixel">
            <summary>
             void n_set_n_pixel(uint CardNo, uint PortOutValue1, uint PortOutValue2, uint Number);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_pixel">
            <summary>
             void n_set_pixel(uint CardNo, uint PortOutValue1, uint PortOutValue2);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_rs232_write_text_list">
            <summary>
             void n_rs232_write_text_list(uint CardNo, string pData);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_mcbsp_out">
            <summary>
             void n_set_mcbsp_out(uint CardNo, uint Signal1, uint Signal2);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_mcbsp_out_oie_list">
            <summary>
             void n_set_mcbsp_out_oie_list(uint CardNo, uint Signal1, uint Signal2);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_mcbsp_out_ptr_list">
            <summary>
             void n_set_mcbsp_out_ptr_list(uint CardNo, uint Number, uint[] SignalPtr);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_camming">
            <summary>
             void n_camming(uint CardNo, uint FirstPos, uint NPos, uint No, uint Ctrl, double Scale, uint Code);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_periodic_toggle_list">
            <summary>
             void n_periodic_toggle_list(uint CardNo, uint Port, uint Mask, uint P1, uint P2, uint Count, uint Start);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_micro_vector_abs_3d">
            <summary>
             void n_micro_vector_abs_3d(uint CardNo, int X, int Y, int Z, int LasOn, int LasOff);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_micro_vector_rel_3d">
            <summary>
             void n_micro_vector_rel_3d(uint CardNo, int dX, int dY, int dZ, int LasOn, int LasOff);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_micro_vector_abs">
            <summary>
             void n_micro_vector_abs(uint CardNo, int X, int Y, int LasOn, int LasOff);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_micro_vector_rel">
            <summary>
             void n_micro_vector_rel(uint CardNo, int dX, int dY, int LasOn, int LasOff);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_micro_vector_quad_axis_v_2">
            <summary>
             void n_micro_vector_quad_axis_v_2(uint CardNo, int X0, int Y0, int X1, int Y1, int LasOn, int LasOff, uint Power, uint Port, uint Flags, double Velocity);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_micro_vector_quad_axis_v">
            <summary>
             void n_micro_vector_quad_axis_v(uint CardNo, int X0, int Y0, double X1, double Y1, int LasOn, int LasOff, uint Power, uint Port, uint Flags, double Velocity);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_micro_vector_quad_axis">
            <summary>
             void n_micro_vector_quad_axis(uint CardNo, int X0, int Y0, double X1, double Y1, int LasOn, int LasOff, uint Power, uint Port, uint Flags);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_micro_vector_set_position">
            <summary>
             void n_micro_vector_set_position(uint CardNo, int X0, int X1, int X2, int X3, int LasOn, int LasOff);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_multi_axis_flags">
            <summary>
             void n_multi_axis_flags(uint CardNo, uint Flags);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_free_variable_list">
            <summary>
             void n_set_free_variable_list(uint CardNo, uint VarNo, uint Value);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_jump_abs_drill_2">
            <summary>
             void n_jump_abs_drill_2(uint CardNo, int X, int Y, uint DrillTime, int XOff, int YOff);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_jump_rel_drill_2">
            <summary>
             void n_jump_rel_drill_2(uint CardNo, int dX, int dY, uint DrillTime, int XOff, int YOff);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_jump_abs_drill">
            <summary>
             void n_jump_abs_drill(uint CardNo, int X, int Y, uint DrillTime);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_jump_rel_drill">
            <summary>
             void n_jump_rel_drill(uint CardNo, int dX, int dY, uint DrillTime);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.save_and_restart_timer">
            <summary>
             void save_and_restart_timer();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_wobbel_mode_phase">
            <summary>
             void set_wobbel_mode_phase(uint Transversal, uint Longitudinal, double Freq, int Mode, double Phase);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_wobbel_mode">
            <summary>
             void set_wobbel_mode(uint Transversal, uint Longitudinal, double Freq, int Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_wobbel">
            <summary>
             void set_wobbel(uint Transversal, uint Longitudinal, double Freq);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_wobbel_direction">
            <summary>
             void set_wobbel_direction(int dX, int dY);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_wobbel_control">
            <summary>
             void set_wobbel_control(uint Ctrl, uint Value, uint MinValue, uint MaxValue);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_wobbel_vector">
            <summary>
             void set_wobbel_vector(double dTrans, double dLong, uint Period, double dPower);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_wobbel_vector_2">
            <summary>
             void set_wobbel_vector_2(double dTrans, double dLong, uint Period, double dPower, double dPower2, uint Ctrl);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_wobbel_offset">
            <summary>
             void set_wobbel_offset(int OffsetTrans, int OffsetLong);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_trigger">
            <summary>
             void set_trigger(uint Period, uint Signal1, uint Signal2);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_trigger4">
            <summary>
             void set_trigger4(uint Period, uint Signal1, uint Signal2, uint Signal3, uint Signal4);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_trigger8">
            <summary>
             void set_trigger8(uint Period, uint Signal1, uint Signal2, uint Signal3, uint Signal4, uint Signal5, uint Signal6, uint Signal7, uint Signal8);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_pixel_line_3d">
            <summary>
             void set_pixel_line_3d(uint Channel, uint HalfPeriod, double dX, double dY, double dZ);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_pixel_line">
            <summary>
             void set_pixel_line(uint Channel, uint HalfPeriod, double dX, double dY);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_n_pixel">
            <summary>
             void set_n_pixel(uint PortOutValue1, uint PortOutValue2, uint Number);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_pixel">
            <summary>
             void set_pixel(uint PortOutValue1, uint PortOutValue2);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.rs232_write_text_list">
            <summary>
             void rs232_write_text_list(string pData);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_mcbsp_out">
            <summary>
             void set_mcbsp_out(uint Signal1, uint Signal2);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_mcbsp_out_oie_list">
            <summary>
             void set_mcbsp_out_oie_list(uint Signal1, uint Signal2);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_mcbsp_out_ptr_list">
            <summary>
             void set_mcbsp_out_ptr_list(uint Number, uint[] SignalPtr);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.camming">
            <summary>
             void camming(uint FirstPos, uint NPos, uint No, uint Ctrl, double Scale, uint Code);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.periodic_toggle_list">
            <summary>
             void periodic_toggle_list(uint Port, uint Mask, uint P1, uint P2, uint Count, uint Start);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.micro_vector_abs_3d">
            <summary>
             void micro_vector_abs_3d(int X, int Y, int Z, int LasOn, int LasOff);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.micro_vector_rel_3d">
            <summary>
             void micro_vector_rel_3d(int dX, int dY, int dZ, int LasOn, int LasOff);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.micro_vector_abs">
            <summary>
             void micro_vector_abs(int X, int Y, int LasOn, int LasOff);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.micro_vector_rel">
            <summary>
             void micro_vector_rel(int dX, int dY, int LasOn, int LasOff);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.micro_vector_quad_axis_v_2">
            <summary>
             void micro_vector_quad_axis_v_2(int X0, int Y0, int X1, int Y1, int LasOn, int LasOff, uint Power, uint Port, uint Flags, double Velocity);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.micro_vector_quad_axis_v">
            <summary>
             void micro_vector_quad_axis_v(int X0, int Y0, double X1, double Y1, int LasOn, int LasOff, uint Power, uint Port, uint Flags, double Velocity);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.micro_vector_quad_axis">
            <summary>
             void micro_vector_quad_axis(int X0, int Y0, double X1, double Y1, int LasOn, int LasOff, uint Power, uint Port, uint Flags);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.micro_vector_set_position">
            <summary>
             void micro_vector_set_position(int X0, int X1, int X2, int X3, int LasOn, int LasOff);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.multi_axis_flags">
            <summary>
             void multi_axis_flags(uint Flags);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_free_variable_list">
            <summary>
             void set_free_variable_list(uint VarNo, uint Value);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.jump_abs_drill_2">
            <summary>
             void jump_abs_drill_2(int X, int Y, uint DrillTime, int XOff, int YOff);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.jump_rel_drill_2">
            <summary>
             void jump_rel_drill_2(int dX, int dY, uint DrillTime, int XOff, int YOff);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.jump_abs_drill">
            <summary>
             void jump_abs_drill(int X, int Y, uint DrillTime);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.jump_rel_drill">
            <summary>
             void jump_rel_drill(int dX, int dY, uint DrillTime);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_timed_mark_abs_3d">
            <summary>
             void n_timed_mark_abs_3d(uint CardNo, int X, int Y, int Z, double T);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_timed_mark_rel_3d">
            <summary>
             void n_timed_mark_rel_3d(uint CardNo, int dX, int dY, int dZ, double T);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_timed_mark_abs">
            <summary>
             void n_timed_mark_abs(uint CardNo, int X, int Y, double T);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_timed_mark_rel">
            <summary>
             void n_timed_mark_rel(uint CardNo, int dX, int dY, double T);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.timed_mark_abs_3d">
            <summary>
             void timed_mark_abs_3d(int X, int Y, int Z, double T);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.timed_mark_rel_3d">
            <summary>
             void timed_mark_rel_3d(int dX, int dY, int dZ, double T);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.timed_mark_abs">
            <summary>
             void timed_mark_abs(int X, int Y, double T);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.timed_mark_rel">
            <summary>
             void timed_mark_rel(int dX, int dY, double T);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_mark_abs_3d">
            <summary>
             void n_mark_abs_3d(uint CardNo, int X, int Y, int Z);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_mark_rel_3d">
            <summary>
             void n_mark_rel_3d(uint CardNo, int dX, int dY, int dZ);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_mark_abs">
            <summary>
             void n_mark_abs(uint CardNo, int X, int Y);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_mark_rel">
            <summary>
             void n_mark_rel(uint CardNo, int dX, int dY);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.mark_abs_3d">
            <summary>
             void mark_abs_3d(int X, int Y, int Z);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.mark_rel_3d">
            <summary>
             void mark_rel_3d(int dX, int dY, int dZ);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.mark_abs">
            <summary>
             void mark_abs(int X, int Y);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.mark_rel">
            <summary>
             void mark_rel(int dX, int dY);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_timed_jump_abs_3d">
            <summary>
             void n_timed_jump_abs_3d(uint CardNo, int X, int Y, int Z, double T);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_timed_jump_rel_3d">
            <summary>
             void n_timed_jump_rel_3d(uint CardNo, int dX, int dY, int dZ, double T);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_timed_jump_abs">
            <summary>
             void n_timed_jump_abs(uint CardNo, int X, int Y, double T);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_timed_jump_rel">
            <summary>
             void n_timed_jump_rel(uint CardNo, int dX, int dY, double T);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.timed_jump_abs_3d">
            <summary>
             void timed_jump_abs_3d(int X, int Y, int Z, double T);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.timed_jump_rel_3d">
            <summary>
             void timed_jump_rel_3d(int dX, int dY, int dZ, double T);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.timed_jump_abs">
            <summary>
             void timed_jump_abs(int X, int Y, double T);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.timed_jump_rel">
            <summary>
             void timed_jump_rel(int dX, int dY, double T);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_jump_abs_3d">
            <summary>
             void n_jump_abs_3d(uint CardNo, int X, int Y, int Z);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_jump_rel_3d">
            <summary>
             void n_jump_rel_3d(uint CardNo, int dX, int dY, int dZ);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_jump_abs">
            <summary>
             void n_jump_abs(uint CardNo, int X, int Y);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_jump_rel">
            <summary>
             void n_jump_rel(uint CardNo, int dX, int dY);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.jump_abs_3d">
            <summary>
             void jump_abs_3d(int X, int Y, int Z);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.jump_rel_3d">
            <summary>
             void jump_rel_3d(int dX, int dY, int dZ);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.jump_abs">
            <summary>
             void jump_abs(int X, int Y);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.jump_rel">
            <summary>
             void jump_rel(int dX, int dY);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_para_mark_abs_3d">
            <summary>
             void n_para_mark_abs_3d(uint CardNo, int X, int Y, int Z, uint P);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_para_mark_rel_3d">
            <summary>
             void n_para_mark_rel_3d(uint CardNo, int dX, int dY, int dZ, uint P);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_para_mark_abs">
            <summary>
             void n_para_mark_abs(uint CardNo, int X, int Y, uint P);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_para_mark_rel">
            <summary>
             void n_para_mark_rel(uint CardNo, int dX, int dY, uint P);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.para_mark_abs_3d">
            <summary>
             void para_mark_abs_3d(int X, int Y, int Z, uint P);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.para_mark_rel_3d">
            <summary>
             void para_mark_rel_3d(int dX, int dY, int dZ, uint P);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.para_mark_abs">
            <summary>
             void para_mark_abs(int X, int Y, uint P);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.para_mark_rel">
            <summary>
             void para_mark_rel(int dX, int dY, uint P);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_para_jump_abs_3d">
            <summary>
             void n_para_jump_abs_3d(uint CardNo, int X, int Y, int Z, uint P);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_para_jump_rel_3d">
            <summary>
             void n_para_jump_rel_3d(uint CardNo, int dX, int dY, int dZ, uint P);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_para_jump_abs">
            <summary>
             void n_para_jump_abs(uint CardNo, int X, int Y, uint P);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_para_jump_rel">
            <summary>
             void n_para_jump_rel(uint CardNo, int dX, int dY, uint P);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.para_jump_abs_3d">
            <summary>
             void para_jump_abs_3d(int X, int Y, int Z, uint P);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.para_jump_rel_3d">
            <summary>
             void para_jump_rel_3d(int dX, int dY, int dZ, uint P);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.para_jump_abs">
            <summary>
             void para_jump_abs(int X, int Y, uint P);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.para_jump_rel">
            <summary>
             void para_jump_rel(int dX, int dY, uint P);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_timed_para_mark_abs_3d">
            <summary>
             void n_timed_para_mark_abs_3d(uint CardNo, int X, int Y, int Z, uint P, double T);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_timed_para_mark_rel_3d">
            <summary>
             void n_timed_para_mark_rel_3d(uint CardNo, int dX, int dY, int dZ, uint P, double T);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_timed_para_jump_abs_3d">
            <summary>
             void n_timed_para_jump_abs_3d(uint CardNo, int X, int Y, int Z, uint P, double T);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_timed_para_jump_rel_3d">
            <summary>
             void n_timed_para_jump_rel_3d(uint CardNo, int dX, int dY, int dZ, uint P, double T);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_timed_para_mark_abs">
            <summary>
             void n_timed_para_mark_abs(uint CardNo, int X, int Y, uint P, double T);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_timed_para_mark_rel">
            <summary>
             void n_timed_para_mark_rel(uint CardNo, int dX, int dY, uint P, double T);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_timed_para_jump_abs">
            <summary>
             void n_timed_para_jump_abs(uint CardNo, int X, int Y, uint P, double T);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_timed_para_jump_rel">
            <summary>
             void n_timed_para_jump_rel(uint CardNo, int dX, int dY, uint P, double T);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.timed_para_mark_abs_3d">
            <summary>
             void timed_para_mark_abs_3d(int X, int Y, int Z, uint P, double T);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.timed_para_mark_rel_3d">
            <summary>
             void timed_para_mark_rel_3d(int dX, int dY, int dZ, uint P, double T);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.timed_para_jump_abs_3d">
            <summary>
             void timed_para_jump_abs_3d(int X, int Y, int Z, uint P, double T);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.timed_para_jump_rel_3d">
            <summary>
             void timed_para_jump_rel_3d(int dX, int dY, int dZ, uint P, double T);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.timed_para_mark_abs">
            <summary>
             void timed_para_mark_abs(int X, int Y, uint P, double T);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.timed_para_mark_rel">
            <summary>
             void timed_para_mark_rel(int dX, int dY, uint P, double T);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.timed_para_jump_abs">
            <summary>
             void timed_para_jump_abs(int X, int Y, uint P, double T);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.timed_para_jump_rel">
            <summary>
             void timed_para_jump_rel(int dX, int dY, uint P, double T);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_defocus_list">
            <summary>
             void n_set_defocus_list(uint CardNo, int Shift);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_defocus_offset_list">
            <summary>
             void n_set_defocus_offset_list(uint CardNo, int Shift);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_zoom_list">
            <summary>
             void n_set_zoom_list(uint CardNo, uint Zoom);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_defocus_list">
            <summary>
             void set_defocus_list(int Shift);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_defocus_offset_list">
            <summary>
             void set_defocus_offset_list(int Shift);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_zoom_list">
            <summary>
             void set_zoom_list(uint Zoom);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_timed_arc_abs">
            <summary>
             void n_timed_arc_abs(uint CardNo, int X, int Y, double Angle, double T);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_timed_arc_rel">
            <summary>
             void n_timed_arc_rel(uint CardNo, int dX, int dY, double Angle, double T);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.timed_arc_abs">
            <summary>
             void timed_arc_abs(int X, int Y, double Angle, double T);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.timed_arc_rel">
            <summary>
             void timed_arc_rel(int dX, int dY, double Angle, double T);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_arc_abs_3d">
            <summary>
             void n_arc_abs_3d(uint CardNo, int X, int Y, int Z, double Angle);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_arc_rel_3d">
            <summary>
             void n_arc_rel_3d(uint CardNo, int dX, int dY, int dZ, double Angle);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_arc_abs">
            <summary>
             void n_arc_abs(uint CardNo, int X, int Y, double Angle);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_arc_rel">
            <summary>
             void n_arc_rel(uint CardNo, int dX, int dY, double Angle);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_ellipse">
            <summary>
             void n_set_ellipse(uint CardNo, uint A, uint B, double Phi0, double Phi);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_mark_ellipse_abs">
            <summary>
             void n_mark_ellipse_abs(uint CardNo, int X, int Y, double Alpha);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_mark_ellipse_rel">
            <summary>
             void n_mark_ellipse_rel(uint CardNo, int dX, int dY, double Alpha);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.arc_abs_3d">
            <summary>
             void arc_abs_3d(int X, int Y, int Z, double Angle);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.arc_rel_3d">
            <summary>
             void arc_rel_3d(int dX, int dY, int dZ, double Angle);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.arc_abs">
            <summary>
             void arc_abs(int X, int Y, double Angle);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.arc_rel">
            <summary>
             void arc_rel(int dX, int dY, double Angle);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_ellipse">
            <summary>
             void set_ellipse(uint A, uint B, double Phi0, double Phi);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.mark_ellipse_abs">
            <summary>
             void mark_ellipse_abs(int X, int Y, double Alpha);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.mark_ellipse_rel">
            <summary>
             void mark_ellipse_rel(int dX, int dY, double Alpha);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_offset_xyz_list">
            <summary>
             void n_set_offset_xyz_list(uint CardNo, uint HeadNo, int XOffset, int YOffset, int ZOffset, uint at_once);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_offset_list">
            <summary>
             void n_set_offset_list(uint CardNo, uint HeadNo, int XOffset, int YOffset, uint at_once);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_matrix_list">
            <summary>
             void n_set_matrix_list(uint CardNo, uint HeadNo, uint Ind1, uint Ind2, double Mij, uint at_once);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_angle_list">
            <summary>
             void n_set_angle_list(uint CardNo, uint HeadNo, double Angle, uint at_once);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_scale_list">
            <summary>
             void n_set_scale_list(uint CardNo, uint HeadNo, double Scale, uint at_once);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_apply_mcbsp_list">
            <summary>
             void n_apply_mcbsp_list(uint CardNo, uint HeadNo, uint at_once);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_offset_xyz_list">
            <summary>
             void set_offset_xyz_list(uint HeadNo, int XOffset, int YOffset, int ZOffset, uint at_once);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_offset_list">
            <summary>
             void set_offset_list(uint HeadNo, int XOffset, int YOffset, uint at_once);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_matrix_list">
            <summary>
             void set_matrix_list(uint HeadNo, uint Ind1, uint Ind2, double Mij, uint at_once);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_angle_list">
            <summary>
             void set_angle_list(uint HeadNo, double Angle, uint at_once);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_scale_list">
            <summary>
             void set_scale_list(uint HeadNo, double Scale, uint at_once);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.apply_mcbsp_list">
            <summary>
             void apply_mcbsp_list(uint HeadNo, uint at_once);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_mark_speed">
            <summary>
             void n_set_mark_speed(uint CardNo, double Speed);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_jump_speed">
            <summary>
             void n_set_jump_speed(uint CardNo, double Speed);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_sky_writing_para_list">
            <summary>
             void n_set_sky_writing_para_list(uint CardNo, double Timelag, int LaserOnShift, uint Nprev, uint Npost);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_sky_writing_list">
            <summary>
             void n_set_sky_writing_list(uint CardNo, double Timelag, int LaserOnShift);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_sky_writing_limit_list">
            <summary>
             void n_set_sky_writing_limit_list(uint CardNo, double CosAngle);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_sky_writing_mode_list">
            <summary>
             void n_set_sky_writing_mode_list(uint CardNo, uint Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_scanner_delays">
            <summary>
             void n_set_scanner_delays(uint CardNo, uint Jump, uint Mark, uint Polygon);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_jump_mode_list">
            <summary>
             void n_set_jump_mode_list(uint CardNo, int Flag);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_enduring_wobbel">
            <summary>
             void n_enduring_wobbel(uint CardNo);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_delay_mode_list">
            <summary>
             void n_set_delay_mode_list(uint CardNo, uint VarPoly, uint DirectMove3D, uint EdgeLevel, uint MinJumpDelay, uint JumpLengthLimit);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_mark_speed">
            <summary>
             void set_mark_speed(double Speed);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_jump_speed">
            <summary>
             void set_jump_speed(double Speed);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_sky_writing_para_list">
            <summary>
             void set_sky_writing_para_list(double Timelag, int LaserOnShift, uint Nprev, uint Npost);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_sky_writing_list">
            <summary>
             void set_sky_writing_list(double Timelag, int LaserOnShift);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_sky_writing_limit_list">
            <summary>
             void set_sky_writing_limit_list(double CosAngle);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_sky_writing_mode_list">
            <summary>
             void set_sky_writing_mode_list(uint Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_scanner_delays">
            <summary>
             void set_scanner_delays(uint Jump, uint Mark, uint Polygon);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_jump_mode_list">
            <summary>
             void set_jump_mode_list(int Flag);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.enduring_wobbel">
            <summary>
             void enduring_wobbel();
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_delay_mode_list">
            <summary>
             void set_delay_mode_list(uint VarPoly, uint DirectMove3D, uint EdgeLevel, uint MinJumpDelay, uint JumpLengthLimit);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_activate_scanahead_autodelays_list">
            <summary>
             void n_activate_scanahead_autodelays_list(uint CardNo, int Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_scanahead_laser_shifts_list">
            <summary>
             void n_set_scanahead_laser_shifts_list(uint CardNo, int dLasOn, int dLasOff);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_scanahead_line_params_list">
            <summary>
             void n_set_scanahead_line_params_list(uint CardNo, uint CornerScale, uint EndScale, uint AccScale);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_scanahead_line_params_ex_list">
            <summary>
             void n_set_scanahead_line_params_ex_list(uint CardNo, uint CornerScale, uint EndScale, uint AccScale, uint JumpScale);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.activate_scanahead_autodelays_list">
            <summary>
             void activate_scanahead_autodelays_list(int Mode);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_scanahead_laser_shifts_list">
            <summary>
             void set_scanahead_laser_shifts_list(int dLasOn, int dLasOff);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_scanahead_line_params_list">
            <summary>
             void set_scanahead_line_params_list(uint CornerScale, uint EndScale, uint AccScale);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_scanahead_line_params_ex_list">
            <summary>
             void set_scanahead_line_params_ex_list(uint CornerScale, uint EndScale, uint AccScale, uint JumpScale);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_stepper_enable_list">
            <summary>
             void n_stepper_enable_list(uint CardNo, int Enable1, int Enable2);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_stepper_control_list">
            <summary>
             void n_stepper_control_list(uint CardNo, int Period1, int Period2);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_stepper_abs_no_list">
            <summary>
             void n_stepper_abs_no_list(uint CardNo, uint No, int Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_stepper_rel_no_list">
            <summary>
             void n_stepper_rel_no_list(uint CardNo, uint No, int dPos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_stepper_abs_list">
            <summary>
             void n_stepper_abs_list(uint CardNo, int Pos1, int Pos2);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_stepper_rel_list">
            <summary>
             void n_stepper_rel_list(uint CardNo, int dPos1, int dPos2);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_stepper_wait">
            <summary>
             void n_stepper_wait(uint CardNo, uint No);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.stepper_enable_list">
            <summary>
             void stepper_enable_list(int Enable1, int Enable2);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.stepper_control_list">
            <summary>
             void stepper_control_list(int Period1, int Period2);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.stepper_abs_no_list">
            <summary>
             void stepper_abs_no_list(uint No, int Pos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.stepper_rel_no_list">
            <summary>
             void stepper_rel_no_list(uint No, int dPos);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.stepper_abs_list">
            <summary>
             void stepper_abs_list(int Pos1, int Pos2);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.stepper_rel_list">
            <summary>
             void stepper_rel_list(int dPos1, int dPos2);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.stepper_wait">
            <summary>
             void stepper_wait(uint No);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_laser_timing_table">
            <summary>
             void n_set_laser_timing_table(uint CardNo, uint Index, uint F);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_set_duty_cycle_table">
            <summary>
             void n_set_duty_cycle_table(uint CardNo, uint Index, uint DutyCycle);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.n_regulation3">
            <summary>
             void n_regulation3(uint CardNo, uint Fmax, uint Fmin);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_laser_timing_table">
            <summary>
             void set_laser_timing_table(uint Index, uint F);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.set_duty_cycle_table">
            <summary>
             void set_duty_cycle_table(uint Index, uint DutyCycle);
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Scanner.RTC6Wrap.regulation3">
            <summary>
             void regulation3(uint Fmax, uint Fmin);
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.RTC6StreamParserWrap">
            <summary>
            RTC6StreamParserWrap
            </summary>
            <remarks>
            StreamParser v1.1
            </remarks>
        </member>
        <member name="T:SpiralLab.Sirius2.PropertyGridLocalizationAttribute">
            <summary>
            i17n (aka multi-languages)
            </summary>
            <remarks>
            Programmed by Toughman from <seealso href="http://www.youngsoft.co.kr/">(c)Youngsoft</seealso> <br/>
            </remarks>
        </member>
        <member name="T:SpiralLab.Sirius2.PropertyGridLocalizationAttribute.LocalizedCategoryAttribute">
            <summary>
            Category attribute
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.PropertyGridLocalizationAttribute.LocalizedCategoryAttribute.#ctor(System.String,System.Type)">
            <summary>
            _C
            </summary>
            <param name="key"></param>
            <param name="classType"></param>
        </member>
        <member name="M:SpiralLab.Sirius2.PropertyGridLocalizationAttribute.LocalizedCategoryAttribute.GetString(System.String,System.Type)">
            <summary>
            Get string (_C)
            </summary>
            <param name="key"></param>
            <param name="classType"></param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius2.PropertyGridLocalizationAttribute.LocalizedDisplayNameAttribute">
            <summary>
            Display name attribute
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.PropertyGridLocalizationAttribute.LocalizedDisplayNameAttribute.#ctor(System.String,System.Type)">
            <summary>
            _DISP
            </summary>
            <param name="key"></param>
            <param name="classType"></param>
        </member>
        <member name="M:SpiralLab.Sirius2.PropertyGridLocalizationAttribute.LocalizedDisplayNameAttribute.GetString(System.String,System.Type)">
            <summary>
            Get string (_DISP)
            </summary>
            <param name="key"></param>
            <param name="classType"></param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius2.PropertyGridLocalizationAttribute.LocalizedDescriptionAttribute">
            <summary>
            Description attribute
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.PropertyGridLocalizationAttribute.LocalizedDescriptionAttribute.#ctor(System.String,System.Type)">
            <summary>
            _DESC
            </summary>
            <param name="key"></param>
            <param name="classType"></param>
        </member>
        <member name="M:SpiralLab.Sirius2.PropertyGridLocalizationAttribute.LocalizedDescriptionAttribute.GetString(System.String,System.Type)">
            <summary>
            Get string (_DESC)
            </summary>
            <param name="key"></param>
            <param name="classType"></param>
            <returns></returns>
        </member>
    </members>
</doc>
